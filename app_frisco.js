/* combined frisco app */
/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/lang.js */
/**
 * @author abankowski
 * Date: 29.09.11
 * Time: 14:42
 */

var lang = function() {

   var naturalLanguage = "pl";

   var api = null;

   var currentLang = "pl";
   var missing = [];
   var missingTimeout = null;

   var translationTable = {
       pl : {
            "credit limit overdrawn" : "limit kredytowy został przekroczony",
            "cart amount exceeds payment limit" : "wartość koszyka przekracza limit dla płatności",
            "PAYM_delivery" : "kartą przy odbiorze",
            //"delivery" : "kartą przy odbiorze",
            "PAYM_delivery_cash" : "gotówką",
            "PAYM_balance" : "z Twojego salda",
            "paymentBzwbk" : "przelewem na konto",            
            "PAYM_m" : "przelewem z mBanku",
            "PAYM_n" : "przelewem z MultiBanku",
            "PAYM_w" : "przelewem z BZWBK",
            "PAYM_o" : "przelewem z Pekao24",
            "PAYM_h" : "przelewem z BPH",
            "PAYM_i" : "przelewem z Inteligo",
            "PAYM_d" : "przelewem z Nordea",
            "PAYM_p" : "przelewem z iPKO",
            "PAYM_g" : "przelewem z ING",
            "PAYM_l" : "przelewem z Crédit Agricole",
            "PAYM_wr" : "przelewem z Raiffeisen Bank",
            "PAYM_wm" : "przelewem z Millennium",
            "PAYM_wg" : "przelewem z BGŻ",
            "PAYM_wk" : "przelewem z Kredyt Banku",
            "PAYM_wp" : "przelewem z Polbanku",
            "PAYM_wc" : "przelewem z Citi Handlowego",
            "PAYM_wd" : "przelewem z Deutsche Bank",
            "PAYM_wi" : "przelewem z Getin Bank",
            "PAYM_wn" : "przelewem z Invest Bank",
            "PAYM_wy" : "przelewem z Banku Pocztowego",
            "PAYM_c" : "online kartą płatniczą",
            "PAYM_b" : "zwykłym przelewem",
            "PAYM_u" : "przelewem z Eurobanku",
            "PAYM_ab" : "przelewem z Alior Banku",
            "PAYM_me" : "przelewem z MeritumBanku",
            "deffered" : "płatność odroczona",
            "frisco - deferred" : "płatność odroczona",
            
            "PAYM_PaymentPlatnosciPl" : "przelewem online",

            "delivery" : "Płatność kartą przy odbiorze zamówienia",
            "delivery_cash" : "Płatność gotówką przy odbiorze zamówienia",
            "bzwbk" : "Płatność przelewem tradycyjnym na konto Frisco",
            "deferred" : "Płatność odroczona, przelewem na konto Frisco",
            "product_field_price_gross_ascending" : "Od najtańszych",
            "product_field_price_gross_descending" : "Od najdroższych",
            "product_field_full_name_ascending" : "Alfabetycznie A-Z",
            "product_field_full_name_ord_ascending" : "Alfabetycznie A-Z",
            "product_field_priority_descending" : "Od popularnych",
            "product_field_priority_ascending" : "Od niepopularnych",
            "product_field_price_per_unit_ascending" : "Od najtańszych / kg",
            "product_field_price_per_unit_descending" : "Od najdroższych / kg",
            "vegetarian" : "Produkt wegetariański",
            "vanOnly" : "Produkt dostarczany tylko FriscoVANem",
            "organic" : "Produkt organiczny",
            "noSugar" : "Produkt bez cukru",
            "glutenFree": "Produkt bezglutenowy"
       },
       en : {
		    "PAYM_delivery" : "by debit or credit card at delivery",
		    "PAYM_deferred" : "deferred payment",
		    "PAYM_delivery_cash" : "by cash at delivery",
		    "PAYM_balance" : "from your balance",
		    "paymentBzwbk" : "by bank transfer",
		    "PAYM_c" : "online by debit card",
		    "PAYM_i" : "by Inteligo bank transfer",
		    "PAYM_p" : "by iPKO bank transfer",
		   
            "Promocje" : "Promotions",
            "Promocja" : "Promotion",
    	    "Nowości" : "New products",
    	    "Pokaż marki" : "Show brands",
    	    "Pokaż produkty" : "Show products",
            'PAYM_delivery_cash' : "Cash",
            "PAYM_balance" : "Paid from your balance",
            "delivery" : "By debit or credit card at delivery",
            "Płatność przy odbiorze kartą" : "By debit or credit card at delivery",
            "delivery_cash" : "By cash at delivery",
            "Płatność przy odbiorze gotówką" : "By cash at delivery",
            "bzwbk" : "Money transfer",
            "deferred" : "Deferred payment",
            "płatność odroczona" : "Deferred payment",
            "płatność przez PayPal" : "PayPal payment",
            "product_field_price_gross_ascending" : "Cheapest first",
            "product_field_price_gross_descending" : "Expensive first",
            "product_field_full_name_ascending" : "Alphabetical A-Z",
            "product_field_full_name_ord_ascending" : "Alphabetical A-Z",
            "product_field_priority_descending" : "Popular first",
            "product_field_priority_ascending" : "Unpopular first",
            "product_field_price_per_unit_ascending" : "Cheapest first",
            "product_field_price_per_unit_descending" : "Expensive first",
            "vegetarian" : "Vegetarian",
            "vanOnly" : "Only by FriscoVAN",
            "organic" : "Organic",
            "noSugar" : "Without sugar",
            "glutenFree": "Without gluten, lactose...",

            "Aktualny adres dostawy" : "Deliver to",
			"Aktualny adres dostawy:" : "Deliver to:",
			"Dodaj" : "Add",
			"Do koszyka" : "Add to cart",
			"Dodaj do listy" : "Add to list",
			"Zarezerwuj" : "Book",
			"Zarezerwuj termin dostawy" : "Book delivery time",
			"Wartość koszyka" : "Cart",
			"Składanie zamówienia" : "Checkout",
			"Wybierz inny adres" : "Change address",
			"Pozostaw obecny adres" : "Use current address",
			"Sprawdź" : "Check",
			"Sprawdź czy Frisco dostarcza zakupy w Twojej okolicy" : "Check if Frisco delivers in your area",
			"Zamawiam" : "Checkout",
                  "Wybierz termin dostawy" : "Choose delivery time",
			"Wybierz termin dostawy" : "Choose delivery time",
			"Załóż nowe konto" : "Sign up",
			"Dostawa" : "Delivery",
			"Termin i adres dostawy" : "Delivery details",
			"Dostawa bezpłatna od" : "Free delivery from",
			"W koszyku" : "In cart",
			"W kosz.:" : "In cart:",
			"Frisco - 6 lat na rynku i dziesiątki tysięcy zadowolonych klientów" : "Frisco ourstanding service is available to 2,5 million people in greater Warsaw area.",

			"Nowy adres" : "New address",
			"Pierwszy raz we Frisco?" : "New to Frisco?",
			"opcjonalnie" : "optional",
			"Sposób płatności" : "Payment",
			"Wybrany sposób płatności" : "Payment method",
			"Złóż zamówienie z obowiązkiem zapłaty" : "Place order",
			"Jeśli posiadasz Voucher wprowadź kod, który na nim widnieje." : "Please enter voucher code and click Add.",
			"Cena przy zakupie" : "Applies for",
			"Zaloguj się" : "Sign in",
			"Założ konto w 15 sekund!" : "Sign up in 15 seconds!",
			"Najbliższy termin" : "Soonest available",
			"z dostawą do domu już dziś. Pokochasz je..." : "You will love Frisco premium quality & service.",
			"Ponieważ zamówienie będzie zrealizowane firmą kurierską nie możemy wysłać poniższych produktów:" : "The delivery method you selected is not applicable for products below",
			"Usuń je lub zmień adres dostawy." : "Please remove them or change delivery address.",
			"Usuń wszystkie produkty" : "Remove all products",
			"Zobacz zamówienie" : "View order",
			"Zobacz swoje zamówienie" : "View your order",
			"Kod z Vouchera" : "Voucher code",
			"Rodzaj dostawy" : "Delivery by",
			"Koszyk" : "Your cart",
			"Zaloguj się do Frisco" : "Sign in to Frisco",
			"Pamiętaj mnie" : "Remember me",
			"Resetuj hasło" : "Reset password",
			
            "Wybierz": "Wybierz",
            "Dla kogo": "Dla kogo",
            "Korzyści": "Korzyści",
            "Warunki": "Warunki",
            "Aktywny program": "Aktywny program",

            "Jeszcze lepsze ceny dla każdego.": "Best saving schemes for everyone",
            "Wybierz program dla siebie – i oszczędzaj.": "Choose the one suited for you (you may re-subscribe anytime) and save.",
            "Kliknij ten, z którym zaoszczędzisz najwięcej (możesz zmienić w każdej chwili)": "Kliknij ten, z którym zaoszczędzisz najwięcej (możesz zmienić w każdej chwili)",
            "Wybór do niczego nie zobowiązuje. Można tylko zyskać.": "Wybór do niczego nie zobowiązuje. Można tylko zyskać.",

            "SAVE BIG": "SAVE BIG",
            // "11 zakupy za darmo": "11th order for a penny",
            "Robisz duże zakupy raz w tygodniu?": "Big shopping once a week?",
            "11 zakupy za darmo": "11th shopping is almost free ",
            "Całe 11 zakupy (do średniej wartości Twoich zakupów) będą kosztować 1 gr za każdy artykuł.": "Your 11th order (to your average value) costs 0,01 PLN for an each article.",
            "Taniej niż w supermarkecie, prawda?": "",
            "Zamów w ciągu 6 miesięcy min. 10 zakupów o wartości od 400 zł.": "Make at least 10 orders for more than 400 PLN each in 6 months. ",

            "Po wybraniu tego programu zaczniemy liczyć zamówienia.": "Po wybraniu tego programu zaczniemy liczyć zamówienia.",
            "Zamawiaj często i bez opłat za dostawę": "Frequently & with no costs",
            "Kupujesz często, lubisz mieć świeże?": "You buy often to have fresh goods?",
            "Bezpłatne dostawy w Warszawie i okolicach": "Free delivery in Warsaw area.",
            "Pakiet na 1, 3 lub 6 miesięcy dla osób często robiących niewielkie zakupy.": "1, 3, 6 months pass available for x, y, z PLN.",
            "Działa od razu po zamówieniu!": "",
            "Dotyczy wszystkich zakupów od 150 zł realizowanych przez Frisco Vany.": "Applies to all orders from 150 PLN transported by Frisco Vans.",

            "Ulubione 20% taniej": "Your favorite 20% off",
            "Wszystko dla dzieci 20% taniej": "Baby for less",
            "Potrzebujesz dużo produktów dla dzieci?": "Do you need a lot for the Baby?",
            "20% rabatu na wszystko dla dzieci": "20% off for the Baby category",
            "Za każdym razem na wszystkie artykuły z kategorii Dziecko.": "Everytime. Everything. Up to 30% of the order value.",
            "Najlepsze sposób na artykuły dla dzieci ;-)": "",
            "Zakupy od 300 zł, rabat obejmuje artykuły do 30% wartości całych zakupów.": "Order for more than 300 PLN, discount applies max. to 30% of order value.",

            "Poznaj Frisco" : "Get to know Frisco",
            "Jak pakujemy Twoje zakupy?" : "How we pack your order?",
            "Super świeże owoce, warzywa - jak to robimy?" : "Fresh fruits & vegatables",
            "Codziennie świeże ryby i mięso" : "Everyday fresh fish & meat",
            "Daty ważności produktów" : "Best Before dates",
            "Jak dostarczamy zakupy?" : "How we deliver your order?",
            "Zakupy we Frisco są przyjazne środowisku" : "Frisco is green",

            "Pierwsze zakupy" : "First order in Frisco",
            "Rejestracja i logowanie" : "Sign-Up & Sign-In",
            "Miejsce i koszt dostawy" : "Place & cost delivery",
            "Terminy dostawy, jednogodzinne przedziały" : "One-hour delivery slots",
            "Formy płatności" : "Payment options",
            "Zmiana lub usunięcie zamówienia" : "Edit or delete an order",
            "Reklamacje" : "Complaints",
            "O firmie" : "About us",

            "Oszczędzaj z Frisco" : "Save at Frisco",
            "Programy oszczędzania" : "Saving schemes",
            "Opłaty za dostawę - bezpłatna dostawa" : "Delivery fee - free delivery",
            
            "Skróty" : "Shortcuts",
            "Regulamin" : "Terms & conditions",
            "Moje dane" : "Account details",
            "Faktury" : "Invoices",
            "Prywatność" : "Privacy",
            "Praca" : "Vacancies",

            "Skróty do produktów" : "Product shortcuts",
            "Świeże" : "Fresh",
            "Spożywcze" : "Grocery",
            "Dziecko" : "Baby",
            "Zdrowie" : "Pharma",
            "Dla zwierząt" : "Pets",

            "produkt wycofany" : "withdrawn",
            "chwilowo niedostępny" : "temporarily unavailable",
            "produkt promocyjny" : "promotions only",

            "Jeśli chcesz o coś zapytać, zadzwoń na numer" : "Please call us at",
            "lub" : "or",
            "Napisz do nas na" : "write an email to",
            "Zespół Frisco" : "Frisco",
            "Pierwsza dostawa z Frisco była super. Wszystkie moje obawy zniknęły. Polecam – Marta" : "The first delivery was outstanding. All my concerns are gone. Highly recommendable -  Marta.",

            /* product labels */
            "Produkt zmiennowagowy" : "Variable weight",

            "Nowość" : "New",
            "taniej" : "off",
            "inny gratis" : "free bonus",

            "Kupione wcześniej" : "Bought before",
            "Pozostałe produkty" : "Other from category",

            /* buttons */
            "Zapisz" : "Save",
            "Anuluj" : "Cancel",
            "Użyj tego adresu" : "Use the address",

            "Dodaj nową listę" : "Create new list",

            /* homepage & main template */
            "Witaj" : "Welcome",
            "Jakiego produktu szukasz?" : "Product search",
            "Polecamy" : "Most popular",
			"Jedzmy zdrowo" : "Eat healthy",
			"Warzywa i owoce" : "Fruits and vegetables",
			"Kuchnie świata" : "World Kitchen",
			"Dla najmłodszych" : "For kids",
			"Dla domu" : "Home care",
            "Kod pocztowy" : "Postcode",
            "Najlepsze owoce" : "Best fruits",
            "Najlepsze warzywa" : "Best vegetables",
            "Wypróbuj zakupy" : "Try it now",
            
            "Dla dziecka" : "For kids",
            "Organiczne" : "Organic",
			"Sklep PAMPERS" : "PAMPERS Shop",
			"Wieprzowina PQS" : "PQS Pork",
			"Inspiracje kulinarne" : "Culinary inspirations",
			"zobacz całą kategorię" : "see whole category",

            "jutro" : "tomorrow",
            "dzisiaj" : "today",
            "dziś" : "today",
            "pojutrze" : "day after tomorrow",
            "godz." : " ",
            "Zarezerwowany termin" : "Delivery time",
            "Zmień termin dostawy" : "Change delivery time",
            "Zmień" : "Change",
            "Zwiń" : "Hide",
            "Usuń" : "Cancel",
            "Zmniejsz" : "Decrease",
            "Edytuj" : "Edit",
            "Wróć" : "Back",

            "Twój koszyk" : "Your cart",
            "Pełny widok koszyka" : "View cart",
            "Razem" : "Total",
            "Wyczyść koszyk" : "Clear cart",
			"Utwórz listę zakupową" : "Create shopping list",
			"Wpisz nazwę nowej listy" : "Enter new list name",

            "Szczególnie polecamy" : "Top choice",
            "Wybierz dzień dostawy" : "Pick the delivery date",
            "Poprzedni" : "Previous",
            "Następny" : "Next",
            "Rano" : "Morning",
            "Po południu" : "Afternoon",
            "Wieczorem" : "Evening",

            "Wybierz godzinę dostawy" : "Choose delivery time",

            "W zaznaczonych godzinach dostawa bezpłatna od 150 zł" : "Free delivery from PLN 150 in highlighted slots",
			"Dostawa bezpłatna od 250 zł (w wybranych godzinach od 150 zł)." : "Free delivery from PLN 250 (in selected hours from PLN 150).",

            "Wybrany termin dostawy" : "Choose delivery time",

            "Dzień" : "Day",
            "Godzina" : "Hour",

            "Aktualny adres dostawy" : "Deliver to",

            "dostawa Frisco VAN" : "Frisco VAN",
            "dostawa kurierem" : "courier delivery",
            "dostawa kurierem DPD" : "DPD courier delivery",
            "odbiór w Punkcie Odbioru Osobistego" : "collection in PickUp Point",
            "Płatność " : "Payment",
            "Płatność" : "Payment",
            "Wybierz sposób płatności" : "Choose payment",
            "Zmień datę dostawy" : "Change delivery time",
            "rezerwacja ważna do" : "valid thru",

            "Dodawanie adresu dostawy" : "Add delivery address",
            "Miejscowość" : "City",
            "Ulica" : "Street",
            "Nr budynku / Nr mieszkania" : "No.",
            "Kod pocztowy" : "Postcode",
            "Wskazówki dla kierowcy" : "Information to driver",

            /* saving plans */
            "Trzy innowacyjne programy oszczędzania." : "Three innovative saving plans.",
            "Kupuj wszystko 10% taniej" : "Buy everything 10% off",
            "Bezpłatna wygoda" : "Delivery pass",
            "Wygoda" : "Delivery pass",
            "Częste zakupy, bezpłatna dostawa" : "Frequent orders, free delivery",
            "Dzieci 20%" : "Kids 20% off",
            "Dziecko 20% taniej" : "Kids 20% off",
            "Produkty dla dzieci 20% taniej" : "All for kids 20% off",
            "Plan pracowniczy Nutricia" : "Nutricia Company Plan",
            "Twój plan oszczędnościowy" : "Your saving plan",
            "Program oszczędnościowy" : "Saving plan",
            "Dotychczas zrobiłeś" : "Ordered till now",
            "Średnia wartość zamówienia" : "Average shopping value",
            "Kategoria" : "Category",
            "Minimalne zamówienie" : "Minimal order",
            "Bezpłatna dostawa od" : "Free delivery",
            "Ważność do" : "Valid thru",

            "Dla kogo" : "For",
            "Korzyści" : "Benefits",
            "Warunki" : "Rules",
            "Wybierz" : "Choose",
            "Dla osób robiących regularnie rodzinne zakupy" : "For buyers",
            "Jedenaste zakupy, o średniej wartości poprzednich dziesięciu, otrzymujesz za darmo" : "11th shopping is almost free",
            "W praktyce wszystko kupujesz 10% taniej" : "Your 11th order (to your average value) costs PLN 0,01 for an each article",
            "Z bezpłatną dostawą do domu" : "Free delivery in Warsaw area",
            "W ciągu 6 miesięcy zrób minimum 10 razy zakupy o średniej wartości ponad 400 zł." : "Make add least 10 orders for more than PLN 400 each in 6 months",
            "Dla osób często robiących zakupy za mniejsze kwoty" : "For frequent buyers",
            "Wykupujesz jednorazowo pakiet bezpłatnych dostaw na 1, 3 lub 6 miesięcy" : "Applies to all orders from PLN 150",
            "W wybranym okresie wszystkie dostawy od 150 zł są bezpłatne" : "1, 3, 6 months pass available",
            "Kupujesz tak często jak chcesz nie martwiąc się o koszt dostawy" : "Free delivery in Warsaw area",
            "Pakiet na 1 miesiąc – 29 zł<br> Pakiet na 3 miesiące – 69 zł<br> Pakiet na 6 miesięcy – 99 zł" : "1 month pass - PLN 29<br> 3 month pass - PLN 69<br> 6 month pass - PLN 99 ",
            "Dla rodziców z małymi dziećmi" : "For a family with kids",
            "Wszystkie produkty dla dzieci 20% taniej" : "20% off for the Baby category",
            "Taniej niż w hipermarketach" : "Everytime. Everything. Up to 30% of the order value.",
            "Bezpłatna dostawa do domu" : "Free delivery in Warsaw area",
            "Minimalna wartość zamówienia to 300 zł. Rabat obejmuje produkty dla dzieci o wartości nie większej niż 30% zamówienia." : "Order for more than PLN 300, discount applies max. to 30% of order value. ",
            "Wybierz program dla siebie (możesz zmienić w każdej chwili)." : "Choose your saving plan (can be changed anytime)",
            "Wybór do niczego nie zobowiązuje. Można tylko zyskać." : "Enjoy the benefits",

            /* product items */
            "1 szt." : "1 item",
            "Zgrzewka" : "Multipack",

            "za" : "for",
            "za 1 sztukę" : "for 1 item",
            "za 1 szt." : "for 1 item",
            "szt." : "item(s)",
            "sztukę" : "item",
            "sztuk" : "items",
            "sztuki" : "items",
            "Produktów" : "Products",
            "Cena za 2 produkty:" : "Price for both items",
            "Dodaj do koszyka" : "Add items to cart",
            "Kup" : "Buy",
            "Cena za 1" : "Price for 1",

            /* catalog_shelf & product & templates */
            "Wybierz sortowanie" : "Sort by",
            "Cena" : "Price",
            "Popularność" : "Popularity",
            "Cena przeliczeniowa" : "Price kg/l",
            "Nazwa" : "Name",

            "Pokaż więcej produktów" : "Show more products",
            "Data ważności" : "Expiry date",
            "Inne produkty tej samej marki" : "Other items by this brand.",
            "Inni klienci oglądali również": "Other customers also viewed",
            "Wyniki wyszukiwania dla: " : "Search result: ",
            "Pełny widok" : "Show details",
            "Opis" : "Description",

            "Niestety nic nie znaleźliśmy" : "Unfortunely we found nothing",
            "Powiedz czego brakuje w naszej ofercie" : "What should we add to Frisco",
            "Wyślij" : "Send",

            "Tworzenie konta Frisco" : "Create a new account",
            "Hasło" : "Password",
            "Powtórz hasło" : "Confirm password",
            "Telefon" : "Phone",
            "Tytuł" : " ",
            "Pani" : "Mrs.",
            "Pan" : "Mr.",
            "Będzie służył Ci do logowania się" : "This will be your Frisco login",
            "Minimum 8 znaków" : "Minimum 8 characters",
            "Chcę otrzymywać <b>vouchery zniżkowe na zakupy</b> oraz informacje o nowych produktach i promocjach. W każdej chwili będziesz mógł zmienić te ustawiania." : "Please send me <b>voucher codes</b> and new promotions by email. This setting can be changed anytime.",
			"Wyrażam zgodę na otrzymywanie od Frisco.pl Sp. z o.o. informacji handlowych drogą elektroniczną (vouchery, zakupy zniżkowe, informacje o nowych produktach i promocjach). Zostałem/am poinformowany/na, iż w każdej chwili mogę zrezygnować." : "I agree to receive electronical communication from Frisco.pl Sp. z o.o. including voucher codes, promotional mailings and information about new products. I have been informed that this setting can be changed anytime.",
            "Zapoznałem się z treścią <a href='/stn,regulation'>regulaminu Frisco</a> oraz wyrażam zgodę na zawarte w nim postanowienia." : "I have read and accept <a href='/stn,regulation'>Frisco Terms & Conditions</a>.",
            "Zarejestruj się" : "Sign up",

            "Bezpieczeństwo danych" : "Data security",
            "Twoje dane osobowe są bezpieczne. Rejestracja konta oraz każdorazowe logowanie odbywa się z wykorzystaniem bezpiecznego, szyfrowanego połączenia SSL." : " Your personal data are secure. We use encrypted SSL transmission after your Sign in.",
            "Baza danych jest zarejestrowana w GIODO" : "Personal data is protected in line with Polish Law",
            "Baza danych osobowych Frisco jest zarejestrowana w Głównym Inspektoracie Ochrony Danych Osobowych. Zgodnie z prawem każdy klient Frisco ma dostęp do swoich danych i może je przeglądać i dowolnie modyfikować." : "You can view and edit your date anytime.",

            /* settings tab  */
            "Najczęściej kupowane" : "Top sellers",
            "Listy zakupowe" : "Shopping lists",
            "Moje listy zakupowe" : "Shopping lists",
            "Moje zamówienia" : "My orders",
            "Ustawienia" : "Settings",
            "Moje dane" : "My details",
            "Rozliczenia" : "Settlements",
            "Komunikacja" : "Contacts",
            "Adres dostawy" : "Delivery address",
            "Pomoc" : "Help",
            "Wyloguj się" : "Sign out",
            "Twoje saldo" : "Your balance",

            "produkty" : "products",
            "wartość" : "value",
            "Dodaj wszystko" : "Add all",
            "Zobacz wszystko" : "View",

            "Adres e-mail" : "E-mail",
            "Typ konta" : "Account",
            "Osobiste" : "Personal",
            "Firmowe" : "Company",
            "Zmień hasło do konta" : "Change password",
            "Imię" : "Name",
            "Nazwisko" : "Surname",
            "Telefon kontaktowy" : "Phone number",
            "Telefon dodatkowy" : "Other phone number",
            "Dane do faktury" : "Invoice",
            "Potrzebuję fakturę" : "Required",
            "Nie potrzebuję faktury" : "Not required",
            "Nazwa firmy" : "Company name",
            "Miasto" : "City",
            "Numer domu / mieszkania" : "No.",

            "Data złożenia" : "Date of order",
            "Wartość" : "Value",
            "Adres zamówienia" : "Delivery address",
            "Termin dostawy / Nr zamówienia" : "Delivery time / Order number",

            "Kup ponownie" : "Add to cart",
            "Zobacz" : "View order",

            "Anulowane" : "Canceled",
            "anulowana" : "Canceled",
            "Zrealizowane" : "Delivered",
            "przetwarzanie" : "In progress",
            "W realizacji" : "In progress",
            "Złożone" : "Placed",
            "Nieopłacone" : "Unpaid",
            "dostawa" : "delivery",

            "Dodaj nowy adres" : "Create new address",
            "Anuluj dodawanie adresu" : "Cancel address creation",

            "Główny" : "Main",

            "Płatne do:" : " ",
            "Data" : "Date",
            "Kwota" : "Amount",
            "Rodzaj płatności" : "Payment method",
            "Operacja" : " ",
            "Zapłać teraz" : "Pay now",

            "Jakie wiadomości chcesz otrzymywać z Frisco?" : "What messages you want to receive from Frisco?",
            "Kody rabatowe na zakupy we Frisco" : "Frisco voucher codes",
            "Informacje o promocjach" : "Promotional offers",
            "Przypomnienia" : "Frisco reminder",
            "W wybrany dzień tygodnia wyślemy do Ciebie krótkie przypomnienie o złożeniu zamówienia." : "We can send you the shopping reminder.",
            "Wyślij mi przypomnienie" : "Remind me on",
            "Tak, chcę otrzymywać" : "Yes, please send me",
            "Nie, nie chcę otrzymywać" : "No, don't send it",

            "brak" : "Don't remind",
            "w poniedziałki" : "Monday",
            "we wtorki" : "Thuesday",
            "w środy" : "Wednesday",
            "w czwartki" : "Thursday",
            "w piątki" : "Friday",
            "w soboty" : "Saturday",
            "w niedziele" : "Sunday", 

            "Zrób zakupy we Frisco." : "Shop in Frisco",
            "Dostarczamy je Frisco Vanem" : "Your delivery arrives by Frisco Van",
            "Zamówienie dostarczy kurier. Nie zamawiaj artykułów świeżych, mrożonych ani podatnych na uszkodzenia." : "Your delivery arrives by a courier service. Do not order fresh, frozen nor fragile articles.",
            "Minimalne zamówienie: " : "Spend a minimum of PLN ",
            " zł." : " to check out.",
            "Sprawdź inną lokalizację" : "Check other postcode",
            "Kod pocztowy jest wymagany" : "Postcode is required",
            
            /* checkout */
			"KROK 1: Wybierz adres dostawy" : "STEP 1: Choose delivery date",
			"KROK 2: Wybierz sposób płatności" : "STEP 2: Choose payment method",
            "Dostawa niekompletna - zobacz" : "Incomplete delivery - see details",
            "znaków" : "characters",
            "Zmień sposób płatności" : "Change payment method",

            "Dziękujemy za złożenie zamówienia" : "Your order is placed. Thank you",
            "Zamówienie nr" : "Order number",
            "Godzina i data dostawy" : "Delivery time",
            "Sposób dostawy" : "Way of delivery",
            "Do zapłaty" : "Total amount",
            "Prosimy o przygotowanie równej kwoty." : "Please have the exact cash amount prepared by delivery.",
            "Zmiana zamówienia" : "Would you like to modify your order?",
            "To zamówienie możesz zmienić lub usunąć do" : "You can edit or cancel toy order by",
            "Edytuj zamówienie" : "Edit order",
            "Usuń zamówienie" : "Delete order",

            "Zrezygnuj z vouchera" : "Cancel voucher",
            "Zawartość Twojego zamówienia: " : "Your order: ",
            "Wartość zamówienia" : "Your cart",
            "Wróć do złożonego zamówienia" : "Back to order",
            "Zamówienie zostało anulowane" : "Order was canceled",
            "Edycja adresu dostawy" : "Edit delivery address",
            "Adres ma być głównym?" : "Set address at the main",
            "Minimalne zamówienie od 50 zł" : "Minimal order from PLN 50",
            "Zarezerwuj termin" : "Book delivery time",
            "Kliknij aby wybrać adres dostawy" : "Choose delivery address",
            "Kliknij, żeby wybrać adres dostawy" : "Choose delivery address",
            "Podgląd zamówienia" : "View order",
            "Potrzebujesz" : "View order",

            "Czy na pewno chcesz anulować swoje ostatnie zamówienie?" : "Do you want cancel your last order?",
            "Czy chcesz usunąć adres" : "Do you want delete address",

            /* login tab */
            "Zapomniałem hasła" : "Forgoten password",
            "Resetuj" : "Reset",
            "Resetuj hasło" : "Reset password",
            "Anuluj" : "Cancel",
            "do zapłaty" : "Underpayment",
            "do zwrotu" : "Surcharge",
            "Załóż konto" : "Sign up",
            "Twój email" : "Email",
            "Pierwsza dostawa bezpłatna od" : "First-time delivery from",

			/* popup commons */
			"Potwierdź czynność" : "Please confirm",
			"Czy na pewno usunąć produkt z koszyka?" : "Delete selected product from cart?",
			"Tak, usuń produkt" : "Yes, delete it",
			"Nie, pozostaw go" : "No, keep it",
			"Czy na pewno usunąć wszystkie produkty z koszyka?" : "Remove all products from cart?",
			"Tak, wyczyść koszyk" : "Yes, clear my cart",
			"Nie, pozostaw produkty" : "No, keep all items",
			"Czy na pewno usunąć ten adres?" : "Delete this address?",
			"Tak, usuń adres" : "Yes, delete it",
			"Czy na pewno usunąć wszystkie produkty z tej listy zakupowej?" : "Remove all products from this shopping list?",
			"Tak, wyczyść listę" : "Yes, clear this list",
			"Czy na pewno skasować tą listę zakupową?" : "Delete this shopping list?",
			"Tak, skasuj listę" : "Yes, delete it",
			"Nie, pozostaw ją" : "No, keep it",
			"Czy na pewno anulować to zamówienie?" : "Cancel this order?",
			"Tak, rezygnuję z niego" : "Yes, cancel it",
			"Nie, pozostaw je" : "No, keep it",
			"Czy na pewno odrzucić zmiany?" : "Cancel all order changes?",
			"Tak, odrzucam zmiany" : "Yes, ignore them",
			
			"Przepraszamy, ale ta kampania promocyjna już nie obowiązuje. <br/>Zapraszamy do zapoznania się z naszą obecną ofertą!" : "Our best apologies, but this offer has expired. <br/>Why not take a look at current ones?",

            /* flash attentions */

            "Dane zostały zaktualizowane" : "Data saved",
            "Logowanie nie powiodło się. Sprawdź login oraz hasło." : "Unable to log in. Check your login and password.",
            "Twój koszyk jest pusty. Dokonaj zakupów, aby przejść do edycji zamówienia" : "Cart is empty. Add something to continue.",
			"Twój koszyk jest pusty. Musisz dodać produkty, aby złożyć zamówienie." : "Cart is empty. Add something before proceeding to checkout.",
            "Termin został zarezerwowany" : "Delivery time has been booked.",
            "Trwa dodawanie produktów do koszyka..." : "Adding items to cart.",

			"zapisuję dane, zaczekaj chwilę..." : "saving data, please wait...",
			"ładuję dane, zaczekaj chwilę..." : "loading data, please wait...",
			
            /* shopping_list template */

            "Wartość produktów na liście" : "List items' value",
            "Produktów na liście" : "No. of items",
            "Dodaj wszystkie" : "Add all",
            "produkty z listy do koszyka" : "Items to cart",
            "Nazwa listy" : "List name",
            "Nazwa listy" : "List name",

            /* edit order template */

            "Zamówienie" : "Your cart",
            "Koszt dostawy" : "Delivery",
            "Zamówienie możesz zmienić do" : "This order can be edited by",
            "Edycja zamówienia" : "Edit your order now",
            "Zatwierdź zmiany" : "Change",
            "Zatwierdź" : "Confirm",
            "Odrzuć" : "Cancel",
            "Bezpieczeństwo płatności zapewniają Płatności.pl" : "Secure payment by Płatności.pl",
            "Termin" : "Delivery",
            "Różnice względem pierwotnego zamówienia" : "You have made the following changes to your order:",
            "Nie zmieniła się wartość zamówienia." : "Your order value has not changed.",
            "Nowa data dostawy:" : "Your new delivery date:",
            "Różnica w wartości zamówienia" : "Change of order value",
            "Różnice w zamówionym asortymencie" : "Changes in cart",
            "pomniejszona o" : "decreased by",
            "do dopłaty" : "increased by",
            "Brak zmian w zamówieniu" : "The order remains intact.",
            "Nie zmieniła się wartość zamówienia." : "The order value remains unchanged.",
            "Nie zmieniły się produkty w koszyku." : "The order cart items remain unchanged.",
            "Nie zmieniono daty dostawy." : "Delivery time remains unchanged.",
            "Nie zmieniono adresu dostawy." : "Delivery address remains unchanged.",
            "Akceptuj zmiany" : "Accept changes",
            "Powrót do edycji" : "Continue editing",
            "Odrzuć zmiany" : "Reject changes",

            "dodano sztuk" : "added",
            "odjęto sztuk" : "decreased",

            "Wystąpił problem przy przejściu na ekran potwierdzenia zmian. Spróbuj przeładować stronę." : "An error occured when trying to show order confirmation page. Try refreshing the webpage.",
            "Gratulujemy, Twoje konto zostało założone." : "Congratulations, your account has been created.",
            "Kliknij na niego i zacznij cieszyć się zakupami we Frisco." : "Click it and enjoy Frisco e-grocery service.",
            "Przejdź na" : "Go to the",
            "Stronę Główną" : "homepage",
            "albo zobacz nasze" : "or go to",
            "aktualne promocje" : "Top Offers",
            "Zaznacz jedną odpowiedź" : "Pick one option",

            "Skąd wiesz o Frisco?" : "Tell us how do you learn about Frisco?",
            "Zaznacz jedną odpowiedź:" : "Pick one option",
            "Samochód Frisco" : "FriscoVan",
            "Reklama lub oferta w Internecie" : "Internet ads",
            "Ulotka" : "Leaflet",
            "Gazetka promocyjna" : "Products newsletter",
            "Reklama w prasie" : "Press ad",
            "Od znajomego" : "Friend’s recommendation",
            "W inny sposób" : "Other way",
            "Wyślij" : "Send",
            "Dziękujemy" : "Thank you",
            "W razie dodatkowych pytań prosimy o kontakt z naszym" : "If you have questions, please contact our",

            "Właśnie wysłaliśmy na podany adres e-mail wiadomość z linkiem aktywacyjnym. Kliknij na niego i zacznij cieszyć się zakupami we Frisco." : "We have just sent an activation link to your email address.  Click it and enjoy Frisco e-grocery service. ",

            "Biurem Obsługi Klienta pod tel." : "Customer Service phone number",
            "lub mailem" : "e-mail: ",
            "Życzymy udanych zakupów! Zespół Frisco" : "Enjoy your shopping!",

            "Zespół Frisco" : "Frisco Team",

            "W tym tygodniu do Twojego zamówienia dodamy świeże jabłka w prezencie" : "This week only: fresh apples for free with any order",

            "Pokaż>>Promocje": "Show>>Promotions",
            "Pokaż>>Nowości": "Show>>New",
            "Pokaż>>Z gratisem": "Show>>Has gratis",
            "Pokaż>>Frisco Okazja": "Show>>Frisco Bargain",
            "Jakiego produktu szukasz?": "Search...",
            "Wyniki wyszukiwania dla": "Search results for"


        }
   };

   var pub = {

       bindApi : function(client) {

           api = client;
       },
       loadTranslations : function (lang, entries) {

           return;
           if (!entries) { entries = lang; lang = currentLang; }                     

           if(!lang) {
               console.error('No lang parameter');
               return;
           }
           if(!entries) {
               return;
           }

           $.each(entries, function(index, item) {

               if (translationTable[lang][index] == undefined) {
                   translationTable[lang][index] = item;
               }
           });

       },
       changeLanguage : function(lang) {
         currentLang = lang;
         return true;
       },
       getTranslation : function(string) {

         if (translationTable[currentLang][string] != undefined) {
             return translationTable[currentLang][string].length ? translationTable[currentLang][string] : string;
         }

         if (currentLang == naturalLanguage) { return string; }
           
         translationTable[currentLang][string] = string;
         return string;

         missing.push(string);

         if (missingTimeout) { clearTimeout(missingTimeout); }
         missingTimeout = setTimeout(function() {

            if (api) {
               //api.markTranslationsMissing(missing);
            }
            missingTimeout = null;
         }, 5000);

         translationTable[currentLang][string] = string;

         return string;
       },
       getCurrentLang : function() {
    	   return currentLang;
       }
   };
   return pub;
}();

var __ = function(string) { return lang.getTranslation(string); };

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/compat.js */
if (this.console == undefined|| this.console.log == undefined) { this.console = { log : function() {}, error : function() {}, warn : function() {}}}


if (!Function.prototype.bind) {
   Function.prototype.bind = function (oThis) {
     if (typeof this !== "function") {
         // closest thing possible to the ECMAScript 5 internal IsCallable function
         throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
     }

     var aArgs = Array.prototype.slice.call(arguments, 1),
     fToBind = this,
     fNOP = function () {},
     fBound = function () {
       return fToBind.apply(this instanceof fNOP
                             ? this
                             : oThis || window,
                           aArgs.concat(Array.prototype.slice.call(arguments)));
     };

     fNOP.prototype = this.prototype;
     fBound.prototype = new fNOP();

     return fBound;
   };
}

//pads left
String.prototype.lpad = function(padString, length) {
	var str = this;
    while (str.length < length)
        str = padString + str;
    return str;
};

//pads right
String.prototype.rpad = function(padString, length) {
	var str = this;
    while (str.length < length)
        str = str + padString;
    return str;
};

/**
 * HomeBrew JSON obj comparator
 **/
$.extend(Object, {
	equals: function(obj1, obj2, depth) {
	
		var compare = function(obj1, obj2, depth) {	
			if(depth === 0) {
				return true;
			} else if(typeof depth == 'number') {
				depth--;
			}
			
			if(typeof obj1 !== typeof obj2) {
				return false;
			}
			
			if(!obj1 || !obj2) {
				return false;
			}
			
			var type = typeof obj1;
			var simpleTypes = ["boolean","number","string"];
			for(var i = 0; i < simpleTypes.length; i++) {
				if(simpleTypes[i] == type) {
					return obj1 == obj2;					
				}
			}			
			
			for(var propertyLeft in obj1) {
				if( !compare(obj1[propertyLeft], obj2[propertyLeft], depth)) {
					return false;
				}
			}
			for(var propertyRight in obj2) {
				if( !compare(obj1[propertyRight], obj2[propertyRight], depth)) {
					return false;
				}
			}
			return true;
		}		
		return compare(obj1, obj2, depth);		
	}
});

function strlen (string) {
    // Get string length  
    // 
    // version: 1109.2015
    // discuss at: http://phpjs.org/functions/strlen    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: Sakimori
    // +      input by: Kirk Strobeck
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   bugfixed by: Onno Marsman    // +    revised by: Brett Zamir (http://brett-zamir.me)
    // %        note 1: May look like overkill, but in order to be truly faithful to handling all Unicode
    // %        note 1: characters and to this function in PHP which does not count the number of bytes
    // %        note 1: but counts the number of characters, something like this is really necessary.
    // *     example 1: strlen('Kevin van Zonneveld');    // *     returns 1: 19
    // *     example 2: strlen('A\ud87e\udc04Z');
    // *     returns 2: 3
    var str = string + '';
    var i = 0,        chr = '',
        lgth = 0;
 
    if (!this.php_js || !this.php_js.ini || !this.php_js.ini['unicode.semantics'] || this.php_js.ini['unicode.semantics'].local_value.toLowerCase() !== 'on') {
        return string.length;    }
 
    var getWholeChar = function (str, i) {
        var code = str.charCodeAt(i);
        var next = '',            prev = '';
        if (0xD800 <= code && code <= 0xDBFF) { // High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)
            if (str.length <= (i + 1)) {
                throw 'High surrogate without following low surrogate';
            }            next = str.charCodeAt(i + 1);
            if (0xDC00 > next || next > 0xDFFF) {
                throw 'High surrogate without following low surrogate';
            }
            return str.charAt(i) + str.charAt(i + 1);        } else if (0xDC00 <= code && code <= 0xDFFF) { // Low surrogate
            if (i === 0) {
                throw 'Low surrogate without preceding high surrogate';
            }
            prev = str.charCodeAt(i - 1);            if (0xD800 > prev || prev > 0xDBFF) { //(could change last hex to 0xDB7F to treat high private surrogates as single characters)
                throw 'Low surrogate without preceding high surrogate';
            }
            return false; // We can pass over low surrogates now as the second component in a pair which we have already processed
        }        return str.charAt(i);
    };
 
    for (i = 0, lgth = 0; i < str.length; i++) {
        if ((chr = getWholeChar(str, i)) === false) {            continue;
        } // Adapt this line at the top of any loop, passing in the whole string and the current iteration and returning a variable to represent the individual character; purpose is to treat the first part of a surrogate pair as the whole character and then ignore the second part
        lgth++;
    }
    return lgth;}

Object.keys = Object.keys || (function () {
    var hasOwnProperty = Object.prototype.hasOwnProperty,
        hasDontEnumBug = !{toString:null}.propertyIsEnumerable("toString"),
        DontEnums = [
            'toString',
            'toLocaleString',
            'valueOf',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'constructor'
        ],
        DontEnumsLength = DontEnums.length;
 
    return function (o) {
        if (typeof o != "object" && typeof o != "function" || o === null)
            throw new TypeError("Object.keys called on a non-object");
 
        var result = [];
        for (var name in o) {
            if (hasOwnProperty.call(o, name))
                result.push(name);
        }
 
        if (hasDontEnumBug) {
            for (var i = 0; i < DontEnumsLength; i++) {
                if (hasOwnProperty.call(o, DontEnums[i]))
                    result.push(DontEnums[i]);
            }
        }
 
        return result;
    };
})();

// natural(Height|Width) compatibility for IE8.
(function($){
	var props = ['Width', 'Height'], prop;
	while (prop = props.pop()) {
		(function (natural, prop) {
			$.fn[natural] = (natural in new Image()) ? 
			function () {
				return this[0][natural];
			} : function () {
				var node = this[0], img, value;
				if (node.tagName.toLowerCase() === 'img') {
					img = new Image();
					img.src = node.src,
					value = img[prop];
				}
				return value;
			};
		}('natural' + prop, prop.toLowerCase()));
	}
}(jQuery));

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_frontend_client.js */
var FriscoFrontendClient = function() {

    var STATUS_OK = 0;

	var pub = {
	        getStatus : function(callback) {
	        	
	        	if(callback == undefined || !callback) {
                    console.error('Calling getStatus without defined callback');
	        		return;	
	        	}        

                return $.ajax({
                    type: 'GET',
                    url: '/status',
                    dataType: 'json',
                    success: function() { callback(1) },
                    error: function() { callback(null) },
                    data: {}
                });
            },
            getSession : function() {

                var data = $.ajax({
                    type: 'GET',
                    url: '/session',
                    dataType: 'json',
                    success: function() { },
                    data: {},
                    async: false
                });

                if(data.status != 200) {

                    return null;
                }
                data = JSON.parse(data.responseText);
                if(data.status != STATUS_OK) {

                    return null;
                }
                return data;
            },
            storeSessionValue : function(key, value) {
                $.post('/session', { k : key, v : value }, "json");
            }
    };

    return pub;
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_session.js */
/**
* @author abankowski
* Date: 02.02.12
* Time: 12:32
*/

var friscoSession = function() {
	var friscoClient = new FriscoFrontendClient();    
	var storage = null;

	/**
	* assume that it will success, more bulletproof solution would be to make synchronous get on demand when cache empty _and_
	* @param key
	* @param value
	*/
	var store = function(key, value) {
		storage[key] = value;
		friscoClient.storeSessionValue(key, value);
	};

	var load = function () {
		var data = friscoClient.getSession();

		if (data) {
			storage = data.session;

			if (data.session && data.session.token) {
				$("form").each(function() {
					var form = $(this);
					var action = form.attr('action');
					if (!action) { return; }
					action = action.replace(/xsrf\=[a-z0-9]+/, "xsrf="+data.session.token);
					form.attr('action', action);
				});
			}
		}
	};

	var pub = {
		set : function(key, value) {
			console.log("Setting FRISCO SESSION value", key, value);
			if (!storage) { load(); }
			if (!storage) {
				throw "friscoSession not loaded";
			}

			store(key, value);
			return true;
		},

		get : function(key) {
			console.log("Getting FRISCO SESSION value", key, (storage && undefined !== storage[key] ? storage[key] : undefined));

			if (!storage) { load(); }
			if (!storage) {
				throw "friscoSession not loaded";
			}

			if (undefined !== storage[key]) {
				return storage[key];
			}

			return null;
		}
	};

	jQuery(window).bind("focus", function(event) {
		if (!storage) {
			load();
		}
	});

	jQuery(window).bind("blur", function(event) {
		storage = null;
	});
	
	load();
	return pub;
}();

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_helpers.js */
var friscoHelpers = (function() {

    /* tagi nieprzypisane */
    var TAG_FROZEN          = 0000;
    
    var TAG_AWARD           = 5910;
    var TAG_CONSERVANT_FREE = 5912;
    var TAG_GLUTEN_FREE     = 5916;
    var TAG_GOAT_PROTEIN_AND_LACTOSE_FREE = 5918;
    var TAG_NEW             = 5909;
    var TAG_ORGANIC         = 5913;
    var TAG_PRESENT         = 5907;
    var TAG_SALE            = 5908;
    var TAG_SUGAR_FREE      = 5915;
    var TAG_VEGAN           = 5917;
    var TAG_VEGETARIAN      = 5914;
    var TAG_BEST_PRICE      = 3400836;

    var TAG_PDS          = 3399446;

    var TAG_VAN_ONLY        = 5959;

    var TAG_VARIABLE_WEIGHT = 3397324;

    var TYPE_BRANDS         = 108;
    var TYPE_COMPONENTS     = 121;
    
    // var ICON_TAGS_CLASSES = { frozen : TAG_FROZEN, award : TAG_AWARD , noPreservatives : TAG_CONSERVANT_FREE, glutenFree : TAG_GLUTEN_FREE, goatProteinFree : TAG_GOAT_PROTEIN_AND_LACTOSE_FREE, newProduct: TAG_NEW, organic : TAG_ORGANIC, gift: TAG_PRESENT, sale : TAG_SALE, noSugar : TAG_SUGAR_FREE, vegan : TAG_VEGAN, vegetarian : TAG_VEGETARIAN, vanOnly: TAG_VAN_ONLY };
    var ICON_TAGS_CLASSES = { glutenFree : TAG_GLUTEN_FREE, organic : TAG_ORGANIC, noSugar : TAG_SUGAR_FREE, vegetarian : TAG_VEGETARIAN, vanOnly: TAG_VAN_ONLY /*, variableWeight : TAG_VARIABLE_WEIGHT */};
    
    var stored_domains = null;
    
	var pub = {
		TAG_NEW: TAG_NEW,
		TAG_BEST_PRICE: TAG_BEST_PRICE,
		
		objectSize : function(obj) {
			return null==obj ? 0 : obj.length===+obj.length ? obj.length : Object.keys(obj).length;
		},
		
    	     TAG_TYPE_BRAND : TYPE_BRANDS,

	     lang2id : function (langStr) {
	        switch (langStr) {
	    	    case 'pl': return 1;
	    	    case 'en': return 2;
		    default: return '-1'; // unknown
	        }
	     },

	     validateEmail : function(email) { 
		    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    		    return re.test(email);
	     }, 

             timestamp2day : function (ts) {
                 var date = this.adjustDateToGMT(new Date(ts));
                 return date.getFullYear() + "-" + ("00" + (1+date.getMonth())).slice(-2) + "-" + ("00" + date.getDate()).slice(-2);
             },
			 timestamp2shortDate : function(ts) {
// 				 var date = new Date(ts * 1000);
				 var date = this.adjustDateToGMT(new Date(ts * 1000));
				 if (date.getDay() == (new Date().getDay())) {
					 return __("dziś") + ", "
					 + (date.getHours()) + ":"
					 + String("00" + date.getMinutes()).slice(-2);
				 }
				 
				 if (date.getDay() == 1 + (new Date().getDay())) {
					 return __("jutro") + ", "
					 + (date.getHours()) + ":"
					 + String("00" + date.getMinutes()).slice(-2);
				 }
				 
				 return date.getDay() + "/" + String("00" + date.getMonth()).slice(-2) + ", "
				 + (date.getHours()) + ":"
				 + String("00" + date.getMinutes()).slice(-2);
			},
			savingplanType2Info : function(savingplan_type_id, order) {
					switch (savingplan_type_id) {
						case 10: return __('Save BIG');
						case 11: return __('Bezpłatna wygoda');
						case 12: return __('Bezpłatna pierwsza dostawa');
						case 13: return __('Dzieci 20%');
						case 14: return __('Plan pracowniczy Nutricia');
						
						default: return __('Nowy - Nieznany');
					}
			},
			
			formatIBAN : function(accountNo) {
				//y=/(\d{2})\s?(\d{4})\s?(\d{4})\s?(\d{4})\s?(\d{4})\s?(\d{4})\s?(\d{4})/
				//x.value=x.value.replace(y,"$1 $2 $3 $4 $5 $6 $7")
				if (accountNo.length == 26)
					accountNo = "PL"+accountNo;
				
				y=accountNo.replace(/.{4}/g,function(s){return s+' '});
				return y.replace('PL', '');
			},
			
			quantity2strForPromo : function(quantity) {
				if (quantity==1) 
					return __('sztukę');
				else if ((quantity>1)&&(quantity<5))
					return __('sztuki');
				if ((quantity>4)||(quantity==0))
					return __('sztuk');
			},
			
			formatWeight : function(weight) {
				return (weight/1000)+' '+__('kg');
			}, // formatWeight : function(wieght)

	     timestamp2str : function(unixTimeStamp, langId, short) {
		 /* Polish names */
    		 var DayName_1   = new Array("Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota");
		 var MonthName_1 = new Array("Stycznia", "Lutego", "Marca", "Kwietnia", "Maja", "Czerwca", "Lipca", "Sierpnia", "Września", "Października", "Listopada", "Grudnia");
                 
                 /* English names */
    		 var DayName_2   = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
		 var MonthName_2 = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
                 
		 jsTimeStamp = new Date().getTime();
		 if (typeof unixTimeStamp != "undefined")
		   jsTimeStamp = unixTimeStamp * 1000;
	        else
		   jsTimeStamp = new Date().getTime();


		var Today = new Date(jsTimeStamp);
		var WeekDay = Today.getDay();
    		var Month = Today.getMonth();
		var Day = Today.getDate();
		var Year = Today.getFullYear();

		if(Year <= 99) Year += 1900;
		var curDateStr;
		
	        if (langId == 2) {
	    	    // English form 
	    	    var suffix = "";
	    	    switch (Day) {
	    		case 1: suffix = "st"; break;
	    		case 2: suffix = "nd"; break;
	    		case 3: suffix = "rd"; break;
	    		case 4: 
	    		default: suffix = "th"; break;	    		
	    	    }
	    	
	    	    curDateStr =  DayName_2[WeekDay] + "," + " " + Day + suffix +" of " + MonthName_2[Month] + ", " + Year;
	        } else {
		    // Below polish form 
		    curDateStr =  DayName_1[WeekDay] + "," + " " + Day + " " + MonthName_1[Month] + ", " + Year;
		}
		
		if (short) {
		    if (langId == 2)
			return Day + " " + MonthName_2[Month].toLowerCase() + " " + Year;
		    else
			return Day + " " + MonthName_1[Month].toLowerCase() + " " + Year+' r.';
		}
				
		var now         = new Date();		
		now 		= new Date(now.getFullYear(), now.getMonth(), now.getDate());
		jsTimeStampDay  = new Date(Today.getFullYear(), Today.getMonth(), Today.getDate());
		
                if(jsTimeStampDay <= Math.floor(now.getTime() + (2*24*3600*1000)) ) {            	    		             	    
            	    var diff = Math.floor( ( (jsTimeStamp / 1000) - Math.ceil(now.getTime() / 1000)) / (24 * 3600));		
            	    curDateStr = this.getRelativeDaysTerm(diff, false)+', '+curDateStr;
		}
		
		return curDateStr;
		
	     }, // function date2PolishForm(unixTimeStamp)
	     
	     bcTrimName : function(name) {
	        var intLength = 17;
                if (strlen(name) > intLength) {                
                        name = name.toString().substr(0, 11)+'...'+name.toString().substr(-5);
		}
                return name;
    	    }, 

	formatDateTimeFromUnixTimestamp : function (timestamp, time) {
		var date = new Date(timestamp * 1000);
		var day = date.getDate().toString().lpad(0,2);
		var month = date.getMonth();
		month = month + 1;
		month = month.toString().lpad(0,2);
		    
		var hours = (this.adjustDateToGMT(date).getHours()).toString().lpad(0,2);
		var mins  = date.getMinutes().toString().lpad(0,2);
		if (time)
		    return day+'-'+month+'-'+date.getFullYear()+' '+hours+':'+mins;
		else
		    return day+'-'+month+'-'+date.getFullYear();
		}, 

        buildBreadCrumbsFromProductCategories : function(product) {
            if (!product || !product.Categories) {
                return null;
            }
            var categories = product.Categories;
            var cat = 0;
            var breadCrumbsArray = [];

            for(i=0; i<8; i++) {
                var res = null;
                $.each(categories, function(idx, obj) {
                    if (obj.parent_id == cat) {
                        res = obj;
                        cat = res.category_id;
                        return false;
                    }
                });
                if(res) {
                    breadCrumbsArray.push(res);
                } else {
                    break;
                }
            }
            return breadCrumbsArray;
        },

	    prefixesInput : function(curPrefix) {
		    var prefixes = new Array(1,20,48,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,27,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,30,31,32,33,350,351,352,353,354,355,356,357,358,36,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,39,40,420,421,422,423,424,425,426,427,428,43,44,45,46,47,47,500,501,502,503,504,505,506,507,508,51,52,53,54,55,56,57,590,591,592,593,594,595,596,597,598,60,61,62,63,64,65,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,7,800,801,802,803,804,805,806,807,808,81,830,831,832,833,834,835,836,837,838,84,850,851,852,853,854,855,856,857,858,86,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,90,91,92,93,94,960,
961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,98,990,991,992,993,994,995,996,997,998,998);
		    var input = $('<select />').attr('class', 'regprefixes').attr('id', 'regPrefixes').attr('name', 'telephonePrefix');
		    $.each(prefixes, function(index, item) {
			if ( (curPrefix && curPrefix == item) || (!curPrefix && item == 48) )
				$(input).append( '<option value="'+item+'" selected="selected">+'+item+'</option>' );
			else
				$(input).append( '<option value="'+item+'">+'+item+'</option>' );
		    });
		    return $('<div />').append(input).html();
	    },

	    orderTextForm : function (count) {
  		var properForm = __('zamówień'); 
  		if (!count)
  		    return properForm;

  		switch (count) {
                                case 1:  properForm  = __('zamówienie'); break;
                                case 2:  properForm  = __('zamówienia'); break;
                                case 3:  properForm  = __('zamówienia'); break;
                                case 4:  properForm  = __('zamówienia'); break;
                                case 5:  properForm  = __('zamówienień'); break;
                                default: properForm  = __('zamówienień'); break;
                }

  		    return properForm;                 
	
	    }, // orderTextForm : function (count)
            getIconTagsString : function(product) {

                var product_tags = product.tag_ids;                
                var tags = '';

                $.each(ICON_TAGS_CLASSES, function(index, item) {

                     if (jQuery.inArray(item, product_tags) != -1 ) {
                         tags += "<li class=\"" + index + "\" ><a title=\""+ __(index) + "\" href=\"#\">"+ __(index) +"</a></li>";
                    } 
                });

                return tags.length > 0 ? "<ul class=\"dietTags\">" + tags + "</ul>" : '';
            },
            getIconTagsStringNew : function(product) {
                var product_tags = product.tag_ids;                
                var tags = '';

                $.each(ICON_TAGS_CLASSES, function(index, item) {
                     if (jQuery.inArray(item, product_tags) != -1 ) {
                         tags += "<li class=\"" + index + "\" ><a href=\"#\"></a>"+ __(index) +"</li>";
                    } 
                });

                return tags;
            },
            checkIsVariableWeight : function(product) {

                var product_tags = product.tag_ids;
                var string = "";                
				// 
                $.each(product_tags, function(index, item) {
                	if(item == TAG_VARIABLE_WEIGHT) {
                		string = "<span class=\"variableWeightIcon\" title=\""+ __("Produkt zmiennowagowy") +"\">"+ __("Produkt zmiennowagowy") +"</span>";
                	}
                });

                return string;
            },
            checkIsPDStag : function(product) {

                var product_tags = product.tag_ids;
                var string = "";                
				// 
                $.each(product_tags, function(index, item) {
                	if(item == TAG_PDS) {
                		string = "<span class=\"PDSLabel\" title=\""+ __("Podaruj dzieciom słońce") +"\">"+ __("Podaruj dzieciom słońce") +"</span>";
                	}
                });

                return string;
            },

            getPromotionLabel : function(promotion) {

                var promotionString = '';
                var promotionDetailsString = '';

                switch(promotion.type_id){

                    case 1:
                    case 6:
                    case 8:
                        promotionString = '<p><span>' + promotion.discount + '%</span><em>' + __('taniej') + '</em></p>'; break;
                    case 2:
                    case 7:
                    case 9:
                        promotionString = '<p>' + friscoHelpers.parsePrice(promotion.humanDiscount ? promotion.humanDiscount : 0) + '</p><em>' + __('taniej') + '</em>'; break;
                    case 3:
                        promotionString = '<p><span>' + promotion.productNeed + '+' + promotion.productFree + '</span><em>' + __('gratis') + '</em></p>'; break;
                    case 4:
                        promotionString = '<p class="other" data-product_id="' + promotion.freeProductId + '" ><span class="otherContainer" style="display:none"></span><em>' + __('inny gratis') + '</em></p>'; break;
                    case 5:
                        if (promotion.percentageDiscount)
                            promotionString = '<p><span>' + promotion.percentageDiscount + '%</span><em>' + __('taniej') + '</em></p>';
                        else
                            promotionString = '<p><span class="percent">%</span></p>';
                        break;
					case 16:
						var pids = "";
						$.each(promotion.gifts, function(i,e) { pids += (e+','); });
						pids = pids.slice(0, -1);
                        promotionString = '<p class="other" data-product_ids="' + pids + '" ><span class="otherContainer" style="display:none"></span><em>' + __('inny gratis') + '</em></p>'; break;
                }

                return '<div class="promotionLabel">' + promotionString + (promotionDetailsString.length > 0 ? '<div class="details">'  + promotionDetailsString + '</div>' : '') + '</div>';
            },
            getPromotionDetails : function (promotion,is_multipack) {

                if (!promotion) { return ''; }
                var info = "";

                if (promotion.minOrderPrice && promotion.minOrderPrice > 0) {
                     info += __('Minimalna wartość zamówienia') + " " + promotion.humanMinOrderPrice+ "zł";

                }

                if (promotion.freeProductId) {

                    if (promotion.productNeed > 1) {
                        info += ((promotion.freeProductAmount>1)?promotion.freeProductAmount + __('inne produkty') : __('inny produkt')) + ' ' +__('gratis przy zakupie') + " " + promotion.productNeed + " " + ((is_multipack)? __('zgrzewek') : __('sztuk'));
                    } else {
                        info += ((promotion.freeProductAmount>1)?promotion.freeProductAmount + __('inne produkty') : __('inny produkt')) + ' ' + ' '+((is_multipack) ? __('gratis do każdej zgrzewki') : __('gratis do każdej sztuki'));
                    }
		} else if (promotion.type_id == 3) {
		    info += __('Przy zakupie') + " " + promotion.productNeed + " " + __("sztuk") + " " + promotion.productFree + " "+__("gratis");
                } else {
                    if (promotion.type_id != 16 && promotion.productNeed && promotion.productNeed > 1) {
                        info += __('Cena przy zakupie') + " " + promotion.productNeed + " " + __("sztuk");
                    }
                }
                
                return info;
            },
            getProductLabels : function(product) {
                var labelString = '';

                if (jQuery.inArray(TAG_BEST_PRICE, product.tag_ids) != -1) {
                    labelString += '<a class="best-priceLabel" href="/stn,taniej-niz-myslisz"></a>';
                }
                
                if (product.current_promotion) {
                    labelString += this.getPromotionLabel(product.promotions[product.current_promotion]);
                }

                if (jQuery.inArray(TAG_NEW, product.tag_ids) != -1) {
                    labelString += '<div class="newLabel"><span>' + __('Nowość') + '</span></div>';
                }
    
                return labelString;
            },

			isProductAvailable : function (product) {
				return ((product.status == FRISCO.PRODUCT_STATUS_AVAILABLE || product.status == FRISCO.PRODUCT_STATUS_UPDATED) && !product.is_promoonly); 
			},
			
			filterNutrition : function (list) {
				if (!list || _.isEmpty(list))
					return [];
				return _.filter(list, function(ingredient){ return ingredient.value != "" && ingredient.value != 0; });
			},
			
			nl2br : function(str) {
				return str.replace("\n", "<br>");
			},
			
			getNamedDayOfWeek : function(dayNo, full) {
                if(!full) {
				    switch(dayNo) {
					    case 1:
						    return __("Pn");
					    case 2:
						    return __("Wt");
					    case 3:
						    return __("Śr");
					    case 4:
						    return __("Czw");
					    case 5:
						    return __("Pt");
					    case 6:
						    return __("Sb");
					    case 0:
						    return __("Nd");
				    }
                } else {
				    switch(dayNo) {
					    case 1:
						    return __("Poniedziałek");
					    case 2:
						    return __("Wtorek");
					    case 3:
						    return __("Środa");
					    case 4:
						    return __("Czwartek");
					    case 5:
						    return __("Piątek");
					    case 6:
						    return __("Sobota");
					    case 0:
						    return __("Niedziela");
				    }
                }
				return dayNo;
			},
			getNamedMonth : function(monthNo, detailedDay) {
			    switch(monthNo) {
				    case 1:
					    return __("Styczeń");
				    case 2:
					    return __("Luty");
				    case 3:
					    return __("Marzec");
				    case 4:
					    return __("Kwiecień");
				    case 5:
					    return __("Maj");
				    case 6:
					    return __("Czerwiec");
				    case 7:
					    return __("Lipiec");
				    case 8:
					    return __("Sierpień");
				    case 9:
					    return __("Wrzesień");
				    case 10:
					    return __("Październik");
				    case 11:
					    return __("Listopad");
				    case 12:
					    return __("Grudzień");
			    }

				return monthNo.toString();
			},
			numCplTo2 : function(string, short) {
                if(typeof string !== 'string') {
                    string = new String(string);
                }  
				if(string.length == 1) {
                    if(short && string[0] == "0") {
                        return "";
                    }
					return "0" + string;
				}

                if(short && string[1] == "0") {
                    if(string[0] != "0") {
                        return string[0];
                    } 
                    return "";
                }
				return string;
			},
			getRelativeDaysTerm: function(daysDifference, full) {                

                var extendedHandling = function(daysDifference, full) {
                    var newDateOffset = (new Date()).getTime() + daysDifference * 3600 * 24 * 1000;
                    var dmStamp = new Date(newDateOffset);

                    return this.getNamedDayOfWeek(dmStamp.getDay(), full) + 
                           ' (' + this.numCplTo2(dmStamp.getDate()) + (full ? (' '  + this.getNamedMonth(dmStamp.getMonth() + 1, dmStamp.getDate())) : ('.' + (dmStamp.getMonth() + 1))) + 
				(full ? (' ' +  dmStamp.getFullYear()) : '')  + ')';
                }.bind(this);

                if(full) {
                    return extendedHandling(daysDifference, full);
                }

				switch(daysDifference) {
					case 0:
						return __("dzisiaj");
					case 1:
						return __("jutro");
					case 2:
						return __("pojutrze");
					default:
						if(daysDifference < 7) {
                            return this.getNamedDayOfWeek(((new Date()).getDay() + daysDifference) % 7);
                        } else {
                            return extendedHandling(daysDifference);
                        }
				}
			},
			
			translateDeliveryMethod: function(deliveryMethod) {
				if(!deliveryMethod) {
					return __("brak informacji");
				}
				if(typeof deliveryMethod != 'object') {
					deliveryMethod = {delivery_method_id: deliveryMethod};
				}
				if(typeof deliveryMethod == 'object') {
					switch(parseInt(deliveryMethod.delivery_method_id, 10)) {
						case 1:
							return "<span class=\"icon friscoVan\"></span>" + __("dostawa Frisco VAN");
							break;
						case 2:
							return __("dostawa kurierem DPD");
							break;
						case 4:
							return __("odbiór w Punkcie Odbioru Osobistego");
							break;
						default:
							return __("dostawa kurierem");
							break;
					}		
				}
				return __("Brak informacji");
			},
			
			formatPostCode : function(postcode) {
				if(!postcode) {
					return '';
				}

                postcode = new String(postcode);
				
				if(postcode.length == 6) {
					return postcode;
				}
				
				if(postcode.length != 5) {
					for(var i = 0; i < 5 - postcode.length; i++) {
						postcode = '0' + postcode;
					}
				}
				return postcode.substr(0, 2) + '-' + postcode.substr(2);
			},
			
			flattenPostCode: function(postcode) {
				if(!postcode) {
					return postcode;
				}
				return postcode.replace(/-/g, '');
			},

            isDateInFuture : function(timestamp) {
                if((new Date()).getTime() < timestamp * 1000) {
                    return true;
                }
                return false;
            },

            getProductComponentsArray : function(product) {

                var compontentTags = [];

                if (typeof product.tags == "object" ) {


                    for (i in product.tags) {

                        if (typeof product.tags[i] == "object" && product.tags[i].tag_type_id == TYPE_COMPONENTS) {
                            compontentTags.push(product.tags[i]);
                        }
                    }
                }
                return compontentTags;
            },
			
			adjustDateToGMT : function(dateObj) {

                if (!(dateObj instanceof Date)) { return null; }

				var parsedDate = Date.parse(dateObj) - dateObj.getTimezoneOffset() * 60000;
				var shift = (parsedDate > CONFIG.DST_START && parsedDate < CONFIG.DST_END) ? 2 : 1;
				
				var utc = dateObj.getTime() + (dateObj.getTimezoneOffset() * 60000);
				return new Date(utc + (3600000 * shift)); 
			},
			
            timeWindowToDayPart: function(timeWindow, full) {              
// 				console.log(timeWindow, full);
                var date = timeWindow;
                var dateN = friscoHelpers.adjustDateToGMT(new Date(timeWindow*1000));
                var now = friscoHelpers.adjustDateToGMT(new Date());
// 				console.log(dateN, now);

                if (dateN.getTime() <= now.getTime()) {
                    return this.dateToYMD(timeWindow);
                }

                now = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                var diff = Math.floor( (dateN.getTime() - now.getTime()) / (24 * 3600 * 1000) );
// 				console.log("calculating relative for: ", now, diff);
                return this.getRelativeDaysTerm(diff, full);
            },

            timeWindowToHourPart: function(timeWindow) {
				var dateObj = new Date(timeWindow * 1000);
				var dateN = this.adjustDateToGMT(dateObj);
				var baseHour = (dateN.getHours());
				return baseHour + '<span>00</span> - ' + (baseHour + 1) + '<span>00</span>';
            },

			formatTimeWindow: function(timeWindowUnixTimestamp) {
				var date = this.adjustDateToGMT(new Date(timeWindowUnixTimestamp * 1000));
				var hour = date.getHours();
				var hoursInterval = hour + '<span>00</span> - ' + (hour + 1) +'<span>00</span>';
				
				var day = friscoHelpers.getNamedDayOfWeek( date.getDay(), 1);
				var month = friscoHelpers.getNamedMonth( date.getMonth(), 1);
				var year = ("" + date.getFullYear()).substr(2);
				var pad = function(x) { return String("00" + x).slice(-2); };
				var full_date = "(" + pad(date.getDate()) + "." + pad(date.getMonth() + 1) + "." + year + ")";
// 				return [day, pad(date.getDate()), month, hoursInterval].join(" ");
				return [pub.timeWindowToDayPart(timeWindowUnixTimestamp, 1), hoursInterval].join(", ");
			},

			dateToYMD : function (dateObj) {
				if(typeof dateObj != 'object') {
					dateObj = new Date(dateObj * 1000); // from php timestamp
				}
		    	return friscoHelpers.numCplTo2(dateObj.getDate().toString())
				 + " " + friscoHelpers.getNamedMonth(dateObj.getMonth() + 1) + " " + dateObj.getFullYear();				
			},

            isOrderCancelled: function(order) {

                var orderStatus = order.status;
                return orderStatus == 30 || orderStatus == 32;
            },
            isOrderCompleted : function(order) {

                var orderStatus = order.status;
                return orderStatus == 31;
            },

            isOrderSealed : function(order) {
                var orderStatus = order.status;
                return orderStatus == 10 || orderStatus == 11 || orderStatus == 12 || orderStatus == 30;
            },

	    isOrderActive : function(order) {
                var orderStatus = order.status;
                return (orderStatus != 30 && orderStatus != 31 && orderStatus != 32);
	    
	    },
	
            isOrderEditable : function(order) {
                var orderStatus = order.status;
                return orderStatus == 0 || orderStatus == 1 || orderStatus == 2 || orderStatus == 3;
            },
			
			isPaymentCompleted : function(paymentStatus) {
				if(paymentStatus == 31 || paymentStatus == 29 || paymentStatus == 2) {
					return true;
				}
				return false;
			},
			
			isPaymentRejected : function(paymentStatus) {
				if(paymentStatus == 4) {
					return true;
				}
				return false;
			},

			isPaymentBroken : function(paymentStatus) {
				if(paymentStatus == 30) {
					return true;
				}
				return false;				
			},					
			
			isPaymentProcessed : function(paymentStatus) {
				if(paymentStatus == 1) {
					return true;
				}
				return false;				
			},
			
			isPaymentPayable : function(paymentStatus) {
				if(paymentStatus === null || paymentStatus == 0 || paymentStatus == 1) {
					return true;
				}
				return false;
			},			

            isPaymentCancelled : function(paymentStatus) {
                if(paymentStatus == 3) {
                    return true;
                }
                return false;
            },

            isPaymentDeferred : function(paymentStatus) {
                if(paymentStatus == 2) {
                    return true;
                }
                return false;
            },

            isPaymentRefunded : function(paymentStatus) {
                if(paymentStatus == 29) {
                    return true;
                }
                return false;
            },
			translatePaymentMethod : function(paymentMethod, fullNameGiven) {
				switch(paymentMethod) {
					case 't':
						return __('płatność testowa');
					case 'deferred':
						return __('płatność odroczona');
					case 'bzwbk':
						return __('przelewem na konto Frisco');
					case 'PayPal':
						return __('płatność PayPal');
					default:
						return __((fullNameGiven ? '' : 'PAYM_') + paymentMethod);
				}
			},

			isPaymentPostpaid: function(paymentMethod) {
				if(paymentMethod == 'delivery' || paymentMethod == 'deliveryCash') {
					return true;
				}
				return false;
			},
			
			translatePaymentStatus : function(paymentStatus) {
				var msg = '';
				if(this.isPaymentProcessed(paymentStatus)) {
					msg = __("przetwarzanie");
				} 
				else if(this.isPaymentCompleted(paymentStatus)) {
					msg = __("zakończona");
				}
				else if(this.isPaymentRejected(paymentStatus)) {
					msg = __("odrzucona");
				}
				else if(this.isPaymentBroken(paymentStatus)) {
					msg = __("błąd");
				}
				else if(this.isPaymentPayable(paymentStatus)) {
					msg = __("do zapłacenia")
                }
                else if(this.isPaymentCancelled(paymentStatus)) {
                    msg = __("anulowana");
                }
                else if(this.isPaymentDeferred(paymentStatus)) {
                    msg = __("odroczona");
                }
                else if(this.isPaymentRefunded(paymentStatus)) {
                    msg = __("refundowana");
				} else {
                    msg = "-";
					console.error("Unknown paymentStatus", paymentStatus);
				}
				return msg;
			},

            formatOrderLeftTime : function(leftTime) {
                return Math.round(leftTime / 3600) + ' ' + __("godz.");
            },
            priceToString: function(price) {
                var numPrice = +price;
                if($.isNumeric(numPrice)) {
                    return numPrice.toFixed(2).replace('.', ',');
                } else {
                    return price;
                }
            },
            parsePriceWithNoCents : function(price) {
                if(!price) {
                    return '';
                }
                return this.priceToString(price).split(',')[0];
            },
            parsePrice : function(price, params) {
                if(!price) {
                    return '';
                }
                var price = this.priceToString(price).split(',');
                return "<strong>" + price[0] + "</strong><span class='cents'>" + price[1] + "</span>" + (params && params.currency ? "<span>zł</span>" : "");
            },
            parsePrice4Itemprop : function(price) {
                if(!price) {
                    return '';
                }
                var price = this.priceToString(price).split(',');
                return  price[0] + "<span class='cents'><span style=\"display:none;\">,</span>" + price[1] + "</span>";
            },
            parseHumanUnitPrice : function(price) {
                if(!price) {
                    return '';
                }
                return price.replace(/^([0-9,.]+)\s*\/\s*(kg|l)$/, __("Cena za 1") + " $2: $1 zł");
            },
            parseHour : function(hour) {
                if(!hour) {
                    return '';
                }
                
                var pattern = /\d\d/g;
                var hours = [];
                var m = pattern.exec(hour);
                while(m != null) {

                    hours.push(m[0]);
                    m = pattern.exec(hour);

                }
                return  hours[0] + "<span>00</span> - " + hours[2] + "<span>00</span>";
								


            },

            price2HumanPrice : function(price, shortest) {
                if (price === 0) return '0';
                if (price == null) return '-';

                if(typeof price == 'string') {
                    price = price.replace('.', ',');
                    if(price.indexOf(',')) {
                        return price;
                    }
                }

                price = new Number(price);

                if(price < 100) {
            	    var completion = this.numCplTo2(price, true);
            	    if (completion<10)
            		completion = completion * 10;
                    return '0,' + this.numCplTo2(price, true);
                }
                var completion = this.numCplTo2(price % 100, false);
                return Math.floor(price / 100) + (completion ? (',' + completion) : "");
            },

            // TODO: finish ..
            compareAddresses: function(lAddress, rAddress) {
                if(typeof lAddress != "object" || typeof rAddress != 'object') {
                    return false;
                }

                if(!lAddress || !rAddress) {
                    return false;
                }
    
                if(lAddress.street != rAddress.street) {
                    return false;
                }

                return true;
            },

	    priceFormat: function(amount) {
                    var amountFixed = (amount/100).toFixed(2);
                    return (amountFixed.replace('.', ','));
            }, // priceFormat()
	    
	    getRemainingOrderEditionHours: function(orderObj) {
		return "123123";
	    },
        getEmailDomains: function(callback) {
            if (stored_domains)
                return callback(stored_domains);
            $.getJSON('/js/frisco_domains.js', function(data){
                stored_domains = data;
                callback(stored_domains);
            }).fail(function(){
                callback([]);
            });
        }
	};
	
	return pub;
})();

/** ofc non blocking * */
var friscoMutex = (function() {
	
	var mutexes = {};
	
	var pub = {
			reserve : function(mutexName) {
				if(typeof mutexes[mutexName] != 'undefined') {
					return null;
				}
				mutexes[mutexName] = 1;
				return true;
			},
			release : function(mutexName) {
				if(typeof mutexes[mutexName] == 'undefined') {
					return null;
				}
				delete mutexes[mutexName];
				return true;
			}
	};
	
	return pub;
})();

function DBG(tag, msg) {

    if (CONFIG.DEV == undefined || !CONFIG.DEV) {
        return;
    }

    if (!console.log.apply) {
        return false;
    }

	if(typeof DEBUG == 'undefined' || !DEBUG) {
		return false;
	}
	
    if(arguments.length == 1) {
        msg = tag;
        delete tag;
    }
    var filler;
    if(arguments.length == 1) {
        filler = msg;
    } else {
        filler = arguments;
        delete filler[0];
    }
    if(typeof tag == 'undefined') {
        tag = 'common';
    }
    
    if(typeof DEBUG_EXCLUDED_TAGS != 'undefined') {
    	for(i in DEBUG_EXCLUDED_TAGS) {
    		if(tag == DEBUG_EXCLUDED_TAGS[i]) {
    			return;
    		}
    	}
    }
    
    var args = Array('[DBG][' + tag + ']');
    for(i in filler) {
        args.push(filler[i]);
    }
        
    console.log.apply(console, args);
}

// data types asserts helpers
var ANZ = function(object) {
    if(typeof object === 'undefined' || object === null || object === false) {
        console.error('Object is null, undefined or false');
        console.trace();
        var hangUpProcessing = 'unexistingFuncHangProcessing';
        hangUpProcessing();
    }
};

var ANU = function(object) {
    if(typeof object === 'undefined') {
        console.error('Object is undefined');
        console.trace();
        var hangUpProcessing = 'unexistingFuncHangProcessing';
        hangUpProcessing();
    }
};

var ANN = function(object) {
    if(object === null) {
        console.error('Object is undefined');
        console.trace();
        var hangUpProcessing = 'unexistingFuncHangProcessing';
        hangUpProcessing();
    }
};

var AN = function(object) {
    if(object !== null) {
        console.error('Object is not null');
        console.trace();
        var hangUpProcessing = 'unexistingFuncHangProcessing';
        hangUpProcessing();
    }
};

var AIO = function(object) {
   if(typeof object !== 'object') {
        console.error('Object is not type of object');
        console.trace();
        var hangUpProcessing = 'unexistingFuncHangProcessing';
        hangUpProcessing();
    }
};

var AIS = function(object) {
   if(typeof object !== 'string') {
        console.error('Object is not string');
        console.trace();
        var hangUpProcessing = 'unexistingFuncHangProcessing';
        hangUpProcessing();
    }
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_storage.js */
var friscoStorage = (function() {
	
	var storage = {};
	
	var dataSourceGetters = {};
	var dataSourceSetters = {};
	
	var pub = {
			PARAM_TYPE	: 'type',
			TYPE_SYNC 	: 'sync',
			TYPE_ASYNC	: 'async',
			TYPE_SHALLOW: 'shallow',
			PARAM_FOLLOWER_CALLBACK : 'followerCbk',
			PARAM_EVENT_SENDER : 'eventSender',
			PARAM_OTHER_DATA : 'otherData',
			
			'set' : function(key, value) {
				DBG('FRISCO_STORAGE', 'SET', 'Checking for data source handling routine', key);
				if(typeof dataSourceSetters[key] == 'function') {
					DBG('FRISCO_STORAGE', 'SET', 'Found callback', key);
					var func = dataSourceSetters[key];
					func(key, value);
				} else {
					this.setShallow(key, value);
				}
				return this;
			},
			
			'setShallow' : function(key, value) {
				DBG('FRISCO_STORAGE', 'SET', 'Setting value', key, value);
				storage[key] = value;
				return this;
			},
			
			'getShallow' : function(key) {
				var params = {};
				params[this.PARAM_TYPE] = this.TYPE_SHALLOW;
				return this.get(key, params);
			},
			
			'get' : function(key, params) {
				if (params == undefined) params = {};
				
				var cbk = null;
				if (params[this.PARAM_FOLLOWER_CALLBACK] && params[this.PARAM_FOLLOWER_CALLBACK] instanceof Function)
					cbk = params[this.PARAM_FOLLOWER_CALLBACK];
					
				DBG('FRISCO_STORAGE', 'GET', 'Getting value for', key, params);
				if (typeof storage[key] == 'undefined') {
					DBG('FRISCO_STORAGE', 'GET', 'Value absent, checking for data source handling routine', key);
					if (params && params[this.PARAM_TYPE] == this.TYPE_SHALLOW) {
						if (cbk) cbk(null);
						return null;
					} 
					
					if (typeof dataSourceGetters[key] != 'undefined' && params && params[this.PARAM_TYPE] != this.TYPE_SHALLOW) {
						DBG('FRISCO_STORAGE', 'GET', 'Found refreshing procedure', key);
						
						if (params[this.PARAM_TYPE] == undefined) {
							if (params[this.PARAM_FOLLOWER_CALLBACK] == undefined) {
								params[this.PARAM_TYPE] = this.TYPE_SYNC;
							}
						}
						return this.getFresh(key, params);
					}
				} else {
					if (cbk) cbk(storage[key]);
					return storage[key];
					
// 					if (params[this.PARAM_TYPE] == this.TYPE_ASYNC)
// 						if (params[this.PARAM_FOLLOWER_CALLBACK] && params[this.PARAM_FOLLOWER_CALLBACK] instanceof Function)
// 							params[this.PARAM_FOLLOWER_CALLBACK]( storage[key] );
				}
			},
			
			'getFresh' : function(key, params) {
				DBG('FRISCO_STORAGE', 'GET_FRESH', 'Getting fresh value for', key);
				if(typeof dataSourceGetters[key] != 'function') {
					throw "No getter!";
				}
				
				// remember, if you want to bind async ajax getter, use event hooking mechanism 
				// to catch incoming traffic
				DBG('FRISCO_STORAGE', 'GET_FRESH', 'Running callback for', key);
				var func = dataSourceGetters[key];
				
				var type = this.TYPE_ASYNC;
				var followerCbk = null;
				var eventSender = undefined;
				var otherData = null;
				
				if (typeof params == 'object') { 
					if (params[this.PARAM_TYPE] != undefined) {
						type = params[this.PARAM_TYPE];
					}
					if (params[this.PARAM_FOLLOWER_CALLBACK] != undefined) {
						followerCbk = params[this.PARAM_FOLLOWER_CALLBACK];
					}
					if (params[this.PARAM_EVENT_SENDER] != undefined) {
						eventSender = params[this.PARAM_EVENT_SENDER];
					}
					if (params[this.PARAM_OTHER_DATA] != undefined) {
						otherData = params[this.PARAM_OTHER_DATA];
					}
				} else {
					type = this.TYPE_SYNC;
				}
				
				if (type == this.TYPE_SYNC) {
					type = 1;
				} else {
					type = 0;
				}
				
				if (otherData)
					return func(type, followerCbk, eventSender, otherData);
	    		else
					return func(type, followerCbk, eventSender);
			},
			
			// overwritting old one
			//
			// delegate for callback:
			//
			//     mixed func(isSynchronousCall, followerCallback);
			//			
			'bindDataSourceGetter' : function(key, funcDataSourceGettter) {
				DBG('FRISCO_STORAGE', 'BIND', 'Binding data source getter', key, funcDataSourceGettter);
				dataSourceGetters[key] = funcDataSourceGettter;
				return this;
			},
			
			// overwritting old one
			//
			// delegate for callback:
			//
			//     mixed func(key, setValue);
			//			
			'bindDataSourceSetter' : function(key, funcDataSourceSettter) {
				DBG('FRISCO_STORAGE', 'BIND', 'Binding data source setter', key, funcDataSourceSettter);
				dataSourceSetters[key] = funcDataSourceSettter;
				return this;
			},
			
			'del' : function(key) {
				DBG('FRISCO_STORAGE', 'DELETE', 'Deleting value by', key);
				if(typeof storage[key] != 'undefined') {
					delete storage[key];
				}
				return this;
			},
			
			'isset' : function(key) {
				DBG('FRISCO_STORAGE', 'ISSET', 'Checking value presence for', key);
				return typeof storage[key] != 'undefined';
			}
	};
	
	return pub;
})();

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_events.js */
var friscoEvents = function() {
	var tmpSubscribers = {};
	var subscribers = {};
	
	var pub = {
			FEV_STATE_CHANGED                  : "FEV_STATE_CHANGED",
			FEV_ON_STATE_ENTER                 : "FEV_ON_STATE_ENTER",
			FEV_LOAD_MORE                      : "FEV_LOAD_MORE",
			FEV_CATALOG_DATA_CHANGED           : "FEV_CATALOG_DATA_CHANGED",
			FEV_CART_PRODUCT_AMOUNT_CHANGED    : 'FEV_CART_PRODUCT_AMOUNT_CHANGED',
			FEV_CART_PRODUCT_DELETED           : 'FEV_CART_PRODUCT_DELETED',
			FEV_CART_PRODUCT_ADDED             : 'FEV_CART_PRODUCT_ADDED',
			FEV_CART_DATA_ARRIVED              : 'FEV_CART_DATA_ARRIVED',
			FEV_CART_DATA_CHANGED              : 'FEV_CART_DATA_CHANGED',
			FEV_USER_DATA_CHANGED              : 'FEV_USER_DATA_CHANGED',
			FEV_NEAREST_DELIVERY_DATE_CHANGED  : 'FEV_NEAREST_DELIVERY_DATE_CHANGED',
			FEV_RESERVED_DELIVERY_DATE_EXPIRED : 'FEV_RESERVED_DELIVERY_DATE_EXPIRED',
			FEV_WINDOWS_DATA_CHANGED           : 'FEV_WINDOWS_DATA_CHANGED',
			FEV_RESERVED_DELIVERY_DATE_CHANGED : 'FEV_RESERVED_DELIVERY_DATE_CHANGED',
			FEV_DELIVERY_ADDRESSES_CHANGED     : 'FEV_DELIVERY_ADDRESSES_CHANGED',
			FEV_CHECKOUT_ORDER_CREATED         : 'FEV_CHECKOUT_ORDER_CREATED',
			FEV_UNAUTHORIZED_ACTION_MADE       : 'FEV_UNAUTHORIZED_ACTION_MADE',
			FEV_DELIVERY_PRICES_CHANGED        : 'FEV_DELIVERY_PRICES_CHANGED',
			FEV_ORDER_DELIVERY_PRICE_CHANGED   : 'FEV_ORDER_DELIVERY_PRICE_CHANGED',
			FEV_ORDER_MINIMAL_VALUE_CHANGED    : 'FEV_ORDER_MINIMAL_VALUE_CHANGED',
			FEV_SAVINGPLAN_CHANGED             : 'FEV_SAVINGPLAN_CHANGED',
			FEV_CART_INVALIDATED               : 'FEV_CART_INVALIDATED',
			FEV_ORDER_STATUS_CHANGED           : 'FEV_ORDER_STATUS_CHANGED',
			FEV_PARALLAX_SCROLL                : 'FEV_PARALLAX_SCROLL',
			FEV_ROTATOR                        : 'FEV_ROTATOR',
			FEV_LOAD_PRODUCT_PAGE              : 'FEV_LOAD_PRODUCT_PAGE',
			FEV_ORDER_COMPLETED                : 'FEV_ORDER_COMPLETED',
			FEV_LOAD_HOMEPAGE                  : 'FEV_LOAD_HOMEPAGE',
			FEV_LOAD_TD_LP                     : 'FEV_LOAD_TD_LP',
			
			// event types
			FEV_TYPE_NORMAL   : 'FEV_TYPE_NORMAL', // regular event, this is default
			FEV_TYPE_VOLATILE : 'FEV_TYPE_VOLATILE', // unhooked automatically after leaving current state
			FEV_TYPE_ONETIME  : 'FEV_TYPE_ONETIME', // fired only once
			
			/**
			 * callback function provided with obj: { 'eventObj' : { 'sender':
			 * sender_obj_tag, 'target': target_obj_tag, ..}, 'eventData' :
			 * place for custom data }
			 * @param params object accepting following fields:
			 * 	type: enum, one of available FEV_TYPE_* modes
			 * 	activeStates object, { 'state1':true, 'stateN':true } a list of states for which event will be fired
			 */
			hook: function(receiverName, eventName, callbackFunction, params) {
				if (params && (params.type == pub.FEV_TYPE_VOLATILE || params.type == pub.FEV_TYPE_ONETIME)) {
					if (tmpSubscribers[eventName] == undefined) {
						tmpSubscribers[eventName] = {};
					}
					DBG('EVENT_SYSTEM', 'Hooking volatile ', eventName, ' by ', receiverName);
					tmpSubscribers[eventName][receiverName] = { 
						'func': callbackFunction, 
						'type': params.type,
						'states': (params && params.states ? params.states : null)
					};
				} else {
					if (subscribers[eventName] == undefined) {
						subscribers[eventName] = {};
					}
					DBG('EVENT_SYSTEM', 'Hooking ', eventName, ' by ', receiverName);
					subscribers[eventName][receiverName] = { 
						'func':callbackFunction, 
						'type': pub.FEV_TYPE_NORMAL,
						'states': (params && params.states ? params.states : null)
					};
				}
			},
			
			unhook: function(receiverName, eventName) {
				DBG('EVENT_SYSTEM', 'Unhooking ', eventName, ' by ', receiverName);
				try {
					delete subscribers[eventName][receiverName];
				} catch(e){}
				try {
					delete tmpSubscribers[eventName][receiverName];
				} catch(e){}
			},
			
			clear : function(eventName) {
				if (typeof eventName == undefined) {
					throw "No eventName. Its required";
				}
				delete subscribers[eventName];
			},
			
			clean : function() {
				tmpSubscribers = {};
			},
			
			fire: function(senderName, eventName, eventData, receivers) {
				if (typeof eventName == undefined) {
					throw "No eventName. Its required";
				}
				
				if (typeof eventData == undefined) {
					var eventData = {};
				}
				
				if (receivers == undefined) {
					var receivers = null;
				} else if (typeof receivers == 'string') {
					var tmpObj = receivers;
					receivers = {};
					receivers[tmpObj] = tmpObj;
					delete tmpObj;
				} else if(typeof receivers != 'object') {
					throw "receivers must be an obj -> {}";
				}
				
				DBG('EVENT_SYSTEM', 'Firing procedure started for ', eventName);
				var receiverName;
				var callback = function(evObject) {
// 					var evObject = volatileEvent ? tmpSubscribers[eventName][receiverName] : subscribers[eventName][receiverName];
					if (evObject.states && evObject.states != undefined) {
						if (!(core.getCurrentState() in evObject.states)) {
							DBG('EVENT_SYSTEM', 'Event not fired for', receiverName, event, ' - not in a proper state');
							return;
						}
					}
					var func = evObject.func;
					var event = {'eventObj': { 'sender': senderName }, 'eventData': eventData};
					if (receivers) {
						event.eventObj["target"] = receivers;
					}
					DBG('EVENT_SYSTEM', 'Event fired for', receiverName, event);
					func(event);
					
					if (evObject.type == pub.FEV_TYPE_ONETIME)
						delete tmpSubscribers[eventName][receiverName];
				};
				for (receiverName in subscribers[eventName]) {
					if (null == receivers || typeof receivers[receiverName] != 'undefined') {
						callback(subscribers[eventName][receiverName]);
					}
				}
				for (receiverName in tmpSubscribers[eventName]) {
					if (null == receivers || typeof receivers[receiverName] != 'undefined') {
						callback(tmpSubscribers[eventName][receiverName]);
					}
				}
				DBG('EVENT_SYSTEM', 'Firing procedure finished for ', eventName);
			}
	};
	
	return pub;
}();


/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_timer.js */
var _friscoInternalTimer = function(params) {

	if(typeof params !== 'object') {
		params = {};
	}

	return {
		isOneShot : function() {
			return params['type'] == friscoTimer.FTT_ONE_SHOT;
		},

		isCyclic : function() {
			return params['type'] == friscoTimer.FTT_CYCLIC;
		},

		stop : function() {
			if (this.isOneShot()) {
				if (params['handler'] != undefined) {
					clearTimeout(params['handler']);
					params['handler'] = undefined;	
				}
				return;
			} else if (this.isCyclic()) {
				if (params['handler'] != undefined) {
					clearInterval(params['handler']);
					params['handler'] = undefined;	
				}
				return;
			}
			throw "friscoTimer type not handled atm " + params['type'];
		},

		start : function() {
			if (this.isOneShot()) {
				params['handler'] = setTimeout(params['callback'], params['fireAfter']);
				return;
			} else if (this.isCyclic()) {
				params['handler'] = setInterval(params['callback'], params['fireEvery']);
				return;
			}
			throw "friscoTimer type not handled atm " + params['type'];
		},

		getContext : function() {
			return params['context'];
		}

	};
} 

var friscoTimer = {

	FTT_ONE_SHOT : 'one-shot',
	FTT_CYCLIC   : 'cyclic',
	
	timers : {},

	stop : function(timerId) {
		if(this.isTimerRunning(timerId)) {
			this.timers[timerId].stop();
			delete this.timers[timerId];
		}	
	},

	_getCallback : function(timerId, callback) {
		return function() {
			if (this.timers[timerId].isOneShot())
				this.stop(timerId);
			callback();
		}.bind(this);
	},
	
	initAfter : function(timerId, fireAfter, callback, context) {
		this.stop(timerId);
		this.timers[timerId] = new _friscoInternalTimer({type: friscoTimer.FTT_ONE_SHOT,
								 fireAfter: fireAfter,
								 callback: this._getCallback(timerId, callback),
								 context: context});
		this.timers[timerId].start();
	},

	initAt : function(timerId, fireAt, callback) {
	},


	initEvery : function(timerId, fireEvery, callback, context) {
		this.stop(timerId);
		this.timers[timerId] = new _friscoInternalTimer({type: friscoTimer.FTT_CYCLIC,
								 fireEvery: fireEvery,
								 callback: this._getCallback(timerId, callback),
								 context: context});
		this.timers[timerId].start();
	},

	isTimerRunning : function(timerId) {
		return typeof this.timers[timerId] !== 'undefined';
	},

	getTimerContext : function(timerId) {
		if(this.isTimerRunning(timerId)) {
			return this.timers[timerId].getContext();
		}
		return null;
	}
}

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/component_popup.js */
/**
 * Popup module
 * @author kroszak@frisco.pl
 */

var Popup = function() {
	var loaded = false;
	
	var contentWrapper = "div#wrapper";
	var headWrapper = "div#wrapper div.head.main";
	
	var dimmer = "div#dimmer";
	var contentHandler = "div#popup_wrapper";
	var closeButton = "div#popup_close_button";
		
	var closeCallback = null;
			
	var handleClick = function() {
		$(dimmer).bind("click", function(e){
//			if( $(e.target).is($(dimmer)) ) $(dimmer).remove();
//			else return; 
//			Popup.hide();
		});
		$(closeButton).bind("click", Popup.hide);
	};
	
	var pub = {
		MESSAGES : {
			POPUP_EMPTY : 400,
			REMOVE_PRODUCT : 401,
			CLEAR_CART : 402,
			DELETE_ADDRESS : 403,
			ADD_ADDRESS : 404,
			CLEAR_USER_LIST : 405,
			DELETE_USER_LIST : 406,
			CANCEL_ORDER : 407,
			CANCEL_ORDER_EDIT : 408,
			SAME_DAY_ORDER : 409,
			UNSUBSCRIBE_MAILINGS : 410,
			
			FLASH_EMPTY : 500,
			REGISTRATION_FAILED : 501,
			SESSION_EXPIRED: 502,
			CHANGE_LANG_FAILED: 503,
			PASSWORD_RESET_MAIL_SENT: 504,
			PASSWORD_RESET_ERROR: 505,
			PASSWORD_RESET_LINK_SENT: 506,
			NEW_PASSWORD_REQUIRED: 507,
			ADDRESS_ADD_ERROR: 508,
			WINDOW_LIST_UPDATED : 509,
			ORDER_GET_ERROR: 510,
			LEAVE_ORDER_EDITION_ERROR: 511,
			SAVE_CHECKOUT_LOAD_ERROR: 512,
			ORDER_CANCEL_ERROR: 513,
			ORDER_CANCELLED: 514,
			ORDER_EDITION_CANCELLED: 5141,
			ORDER_PLACE_ERROR: 515,
			ORDER_PLACED_TO_PAYMENT: 516,
			ORDER_PLACED_TO_LIST: 517,
			ORDER_NOT_EDITABLE: 518,
			CART_PREVIEW_LOCKED: 519,
			CHECKOUT_NO_RSV: 520,
			RSV_EXPIRED: 521,
			EMPTY_CART: 522,
			MIMIMUM_ORDER_VAL_GETTER_ERROR: 523,
			RSV_PLACE_ERROR: 524,
			RSV_PLACED: 525,
			RSV_UNAVAILABLE: 526,
			CALENDAR_NOT_AVAILABLE : 527,
			TD_NOT_AVAILABLE_FOR_LOGGED : 528,
			VOUCHER_GET_ERROR: 529,
			NO_PRODUCT: 530,
			UNDELIVERABLE_PRODUCTS : 531,
			SHIPMENT_TARGET_GETTER_ERROR: 532,
			ADDING_TO_CART : 533,
// 			: 534,
			PAYMENT_ABORTED: 540,
			PAYMENT_SUPPORT_ERROR: 541,
			PAYMENT_PAY_ERROR: 542,
// 			: 543,
			IMPROPER_BRAND : 550,
			NO_SUCH_SURVEY : 551,
			SURVEY_FINAL: 552,
			SURVEY_SUBMIT_ERROR: 553,
			SURVEY_INCOMPLETE: 554,
			SURVEY_NO_INPUT: 555,
			SURVEY_ABOUT_FRISCO: 556,
// 			: 557,
			ACCOUNT_CREATED : 558,
// 			ACCOUNT_CREATION_FAILED : 559,
			NO_PROFILE : 560,
			NO_PROFILE_DATA : 561,
			PROFILE_DATA_SAVE_ERROR : 562,
			PROFILE_SETTINGS_UPDATED : 563,
			PROFILE_SETTINGS_UPDATE_ERROR : 564,
			SAVINGPLAN_SET_ERROR: 565,
			INVALID_SAVINGPLAN: 566,
// 			: 567,
			TD_UNKNOWN_ERROR: 579,
			TD_EMAIL_ERROR: 580,
			TD_ACCOUNT_ACTIVATION_ERROR: 581,
			TD_ACCOUNT_VERIFIED: 582,
			TD_ACCOUNT_ALREADY_VERIFIED: 5821,
			TD_ACCOUNT_VERIFY_ERROR: 583,
			MAILER_UNSUBSCRIBE_ERROR: 584,
			MAILER_UNSUBSCRIBED: 585,
			MAILER_RESUBSCRIBED: 5851,
			ACCOUNT_ACTIVATED: 586,
			ACCOUNT_ACTIVATION_ERROR: 587,
			ACCOUNT_UPDATED: 588,
			ACCOUNT_UPDATE_ERROR: 589,
			ERROR: 590,
			CRITICAL_ERROR: 591,
			IMPROPER_PARAMS : 592,
			FORBIDDEN : 593,
			NOT_AUTHORIZED : 594,
			SERVER_ERROR : 595,
			NO_INTERNET : 596,
			FRISCO_NOT_REACHABLE : 597,
			REFRESHING_SESSION : 598,
			INACTIVE_LP : 599,
			
			FLASH_TEST : 999,
		},
		
		SIZE : {
			NORMAL : '',
			FLASH : 'flash',
			FULLSIZE : 'fullWidth',
		},
		
		TYPE : {
			MESSAGE : '',
			WARNING : 'warning',
			ERROR : 'error'
		},
		
		TIMEOUT : {
			NORMAL : 3000,
			LONG : 7000,
		},
		
		init : function() { },
			
		/**
		 * generic load function for showing custom message and buttons
		 */ 
		load : function(params) {
			if (loaded) return;
			if (!params) 
				params = {'content' : messages[pub.MESSAGES.POPUP_EMPTY].content}; 
			
			if (!params.content || params.content == undefined)
				params.content = messages[pub.MESSAGES.POPUP_EMPTY].content;
			
			if (!params.size || params.size == undefined)
				params.size = pub.SIZE.NORMAL;
			
			if (!params.type || params.type == undefined)
				params.type = pub.TYPE.MESSAGE;
			
			var popup = $.jqote(frisco.getTemplate('popup'), {
				'title' : params.title, 
				'content': params.content,
				'size' : params.size,
				'close': params.close,
				'type' : params.type
			});
			
			
			$("body").append("<div id='dimmer'></div>");
			$("div#popup_wrapper").addClass(params.size);
			
			if (params.size == pub.SIZE.FLASH) {
				$(headWrapper).addClass("dimmed");
				var heightOfHead = $(headWrapper).outerHeight();
				$("div#dimmer").addClass('flash').css({"height" : heightOfHead });
			} else if (params.size == pub.SIZE.NORMAL) {
				$(contentWrapper).addClass("dimmed");
				var heightOfContent = $("div#popup div.content").outerHeight();
				$("div#popup").css({"marginTop" : -heightOfContent/2 });
			}
			
			$("body").append(popup).slideDown();
			
			loaded = true;
			
			if (params.callbacks)
				for (c in params.callbacks) {
					var ccb = params.callbacks[c];
					$(c).bind("click", ccb);
				}
			
			if (!isNaN(params.timeout))
				setTimeout(function (e) { 
					Popup.hide(); 
				}, params.timeout);
				
			handleClick();
		},
		
		/**
		 * load predefined message with custom callbacks
		 * @param callbacks Object hash map with structure { "buttonId" : callbackFunc } where default popup buttons ids are: "popupYes", "popupNo", "popupCancel"
		 */
		loadMessage : function(params) {
			if (!params.messageId || params.messageId == undefined) {
				console.log("[POPUP] No messageId, dont know what to show, so will show nothing!");
				return;
			}
			
			pub.load({
				'content' : messages[params.messageId].content, 
				'title' : messages[params.messageId].title, 
				'callbacks' : params.callbacks,
				'size' : params.size || messages[params.messageId].size || (params.messageId >= 500 ? pub.SIZE.FLASH : pub.SIZE.NORMAL),
				'type' :  params.type || messages[params.messageId].type || pub.TYPE.MESSAGE,
				'timeout' : params.timeout || messages[params.messageId].timeout,
			});
		},
		
		hide : function(cbk) {
			loaded = false;
			$(contentWrapper).removeClass("dimmed");
			$(headWrapper).removeClass("dimmed");
			$(contentHandler).slideUp({ 
				'complete' : function() {
					if (loaded) // Popup was shown again in the meantime
						return;
					$(dimmer).remove();
					$(contentHandler).remove();
					if (cbk && cbk instanceof Function) 
						cbk();
					if (closeCallback && closeCallback instanceof Function) {
						closeCallback();
						closeCallback = null;
					}
				}
			});
		},
		
		bindCloseCallback : function(cbk) {
			closeCallback = cbk;
		}
	};
	
	var messages = {
		/*** popup messages ***/
		400 : { title:'', content:"<div class='text'></div><div class='popup_buttons'></div>" },
		401 : {  content:"<div class='text'>" + __("Czy na pewno usunąć produkt z koszyka?") + "</div><div class='popup_buttons'><div class='button green' id='popupYes'>"+__("Tak, usuń produkt")+"</div> <div class='button red' id='popupNo'>"+__("Nie, pozostaw go")+"</div></div>" },
		402 : {  content:"<div class='text'>" + __("Czy na pewno usunąć wszystkie produkty z koszyka?") + "</div><div class='popup_buttons'><div class='button green' id='popupYes'>"+__("Tak, wyczyść koszyk")+"</div> <div class='button red' id='popupNo'>"+__("Nie, pozostaw produkty")+"</div></div>" },
		403 : {  content:"<div class='text'>" + __("Czy na pewno usunąć ten adres?") + "</div><div class='popup_buttons'><div class='button green' id='popupYes'>"+__("Tak, usuń adres")+"</div> <div class='button red' id='popupNo'>"+__("Nie, pozostaw go")+"</div></div>" },
		404 : {  content:"<div class='text'>" + __("Taki adres znajduje się już na Twojej liście adresów. Czy na pewno chcesz go dodać ponownie?") + "</div><div class='popup_buttons'><div class='button green' id='popupYes'>"+__("Tak, dodaj go")+"</div> <div class='button red' id='popupNo'>"+__("Nie, poprawię dane")+"</div></div>" },
		405 : {  content:"<div class='text'>" + __("Czy na pewno usunąć wszystkie produkty z tej listy zakupowej?") + "</div><div class='popup_buttons'><div class='button green' id='popupYes'>"+__("Tak, wyczyść listę")+"</div> <div class='button red' id='popupNo'>"+__("Nie, pozostaw produkty")+"</div></div>" },
		406 : {  content:"<div class='text'>" + __("Czy na pewno skasować tą listę zakupową?") + "</div><div class='popup_buttons'><div class='button green' id='popupYes'>"+__("Tak, skasuj listę")+"</div> <div class='button red' id='popupNo'>"+__("Nie, pozostaw ją")+"</div></div>" },
		407 : {  content:"<div class='text'>" + __("Czy na pewno anulować to zamówienie?") + "</div><div class='popup_buttons'><div class='button green' id='popupYes'>"+__("Tak, rezygnuję z niego")+"</div> <div class='button red' id='popupNo'>"+__("Nie, pozostaw je")+"</div></div>" },
		408 : {  content:"<div class='text'>" + __("Czy na pewno odrzucić zmiany?") + "</div><div class='popup_buttons'><div class='button green' id='popupYes'>"+__("Tak, odrzucam zmiany")+"</div> <div class='button red' id='popupNo'>"+__("Nie, pozostaw je")+"</div></div>" },
		409 : {  content:"<div class='text'>" + __("Masz już złożone zamówienie na ten dzień, czy na pewno chcesz złożyć kolejne?") + "</div><div class='popup_buttons'><div class='button green' id='popupYes'>"+__("Tak, składam zamówienie")+"</div> <div class='button red' id='popupNo'>"+__("Nie, zmienię datę dostawy")+"</div></div>" },
		410 : {  content:"<div class='text'>" + __("Czy na pewno chcesz się wypisać z naszych mailingów ?") + "</div><div class='popup_buttons'><div class='button green' id='popupYes'>"+__("Tak, wypisz mnie")+"</div> <div class='button red' id='popupNo'>"+__("Nie, pozostaw mnie na liście")+"</div></div>" },
		
		/*** flash messages ***/
		500: { title:'', content:"<div class='text'></div>" },
		501: { content:"<div class='text'>"+__("Rejestracja nie udała się, proszę spróbować ponownie później. Zadzwoń do Biura Obsługi Klienta, tel. (22) 331 50 00.")+"</div>", type:pub.TYPE.ERROR },
		502: { content:"<div class='text'>"+__("Sesja wygasła, odświeżanie strony.")+"</div>", type:pub.TYPE.WARNING },
		503: { content:"<div class='text'>"+__('Wystąpił problem podczas zmiany języka, spróbuj ponownie.')+"</div>", type:pub.TYPE.ERROR },
		504: { content:"<div class='text'>"+__("Mail z nowym hasłem został wysłany. Trwa przeładowywanie strony.")+"</div>" },
		505: { content:"<div class='text'>"+__("Link do wygenerowania nowego hasła został wysłany na podany adres email")+"</div>" },
		506: { content:"<div class='text'>"+__("Mail z linkiem do resetu hasła został wysłany.")+"</div>" },
		507: { content:"<div class='text'>"+__("Proszę ustawić nowe hasło po zresetowaniu")+"</div>" },
		508: { content:"<div class='text'>"+__("Wystąpił błąd podczas dodawania adresu. Zadzwoń do Biura Obsługi Klienta, tel. (22) 331 50 00.")+"</div>", type:pub.TYPE.ERROR },
		509: { content:"<div class='text'>"+__("Uaktualniono listę dostępnych terminów dostaw")+"</div>" },
		510: { content:"<div class='text'>"+__("Błąd pobierania zamówienia.")+"</div>", type:pub.TYPE.ERROR },
		511: { content:"<div class='text'>"+__("Wystąpił błąd przy opuszczaniu edycji zamówienia")+"</div>", type:pub.TYPE.ERROR },
		512: { content:"<div class='text'>"+__("Wystąpił problem przy przejściu na ekran potwierdzenia zmian. Spróbuj przeładować stronę.")+"</div>", type:pub.TYPE.ERROR },
		513: { content:"<div class='text'>"+__("Wystąpił problem podczas próby anulowania zamówienia. Zamówienie nie może być już anulowane.")+"</div>", type:pub.TYPE.ERROR  },
		514: { content:"<div class='text'>"+__("Zamówienie zostało anulowane.")+"</div>" },
		5141: { content:"<div class='text'>"+__("Zmiany w zamówieniu zostały anulowane.")+"</div>" },
		515: { content:"<div class='text'>"+__('Nie udało się zapisać zamówienia')+"</div>", type:pub.TYPE.ERROR },
		516: { content:"<div class='text'>"+__('Zamówienie zostało zapisane. Przekierowywanie do strony płatności...')+"</div>" },
		517: { content:"<div class='text'>"+__('Zamówienie zostało zapisane, trwa przekierowywanie do listy zamówień...')+"</div>" },
		518: { content:"<div class='text'>"+__("Zamówienie nie może być edytowane")+"</div>" , type:pub.TYPE.ERROR},
		519: { content:"<div class='text'>"+__("Podgląd koszyka jest zablokowany w finalizacji zamówienia")+"</div>", type:pub.TYPE.WARNING },
		520: { content:"<div class='text'>"+__('Nie udało się zapisać zamówienia. Popraw dane: wybierz datę dostawy')+"</div>", type:pub.TYPE.WARNING },
		521: { content:"<div class='text'>"+__('Wygasł termin rezerwacji dostawy. Prosimy o ponowne wybranie terminu.')+"</div>", type:pub.TYPE.WARNING },
		522: { content:"<div class='text'>"+__("Twój koszyk jest pusty. Musisz dodać produkty, aby złożyć zamówienie.")+"</div>", type:pub.TYPE.WARNING },
		523: { content:"<div class='text'>"+__("Wystąpił błąd przy pobieraniu minimalnej wartości zamówienia")+"</div>", type:pub.TYPE.ERROR },
		524: { content:"<div class='text'>"+__("Wystąpił problem podczas rezerwowania terminu. Spróbuj ponownie lub wybierz inny termin.")+"</div>" , type:pub.TYPE.ERROR},
		525: { content:"<div class='text'>"+__("Termin został zarezerwowany")+"</div>" },
		526: { content:"<div class='text'>"+__('Niestety wybrany termin dostawy nie jest już dostępny, zmień termin dostawy')+"</div>", type:pub.TYPE.WARNING },
		527: { content:"<div class='text'>"+__("Zaloguj się, aby skorzystać z kalendarza")+"</div>", type:pub.TYPE.WARNING  },
		528: { content:"<div class='text'>"+__("Nie możesz pobrać kuponu rabatowego. Ale możesz polecić nasz sklep. Dziękujemy!")+"</div>", type:pub.TYPE.WARNING },
		529: { content:"<div class='text'>"+__("Błąd pobierania informacji o kodzie rabatowym. Sprawdź kod.")+"</div>", type:pub.TYPE.WARNING },
		530: { content:"<div class='text'>"+__('Wybrany produkt nie istnieje w bazie danych Frisco.')+"</div>", type:pub.TYPE.WARNING },
		531: { content:"<div class='text'>"+__('W Twoim koszyku znajdują się produkty, których nie można dostarczyć za pośrednictwem kuriera')+"</div>", type:pub.TYPE.ERROR },
		532: { content:"<div class='text'>"+__("Błąd pobierania informacji o lokalizacji dostawy. Wybierz adres.")+"</div>", type:pub.TYPE.ERROR },
		533: { content:"<div class='text'>"+__("Trwa dodawanie produktów do koszyka...")+"</div>" },
		540: { title:'' ,content:"<div class='text'>"+__('Proces płatności przerwany. Zadzwoń do Biura Obsługi Klienta, tel. (22) 331 50 00.')+"</div>", type:pub.TYPE.ERROR },
		541: { content:"<div class='text'>"+__('Wystąpił błąd z obsługą płatności. Zadzwoń do Biura Obsługi Klienta, tel. (22) 331 50 00.')+"</div>", type:pub.TYPE.ERROR },
		542: { content:"<div class='text'>"+__('Nie udało się wykonać operacji')+"</div>" },
// 		543: { content:"<div class='text'>"++"</div>" },
		550: { content:"<div class='text'>"+__('Podany brand nie jest prawdiłowy.')+"</div>", type:pub.TYPE.ERROR },
		551: { content:"<div class='text'>"+__('Niestety taka ankieta nie istnieje w naszym systemie. Popraw dane i spróbuj ponownie.')+"</div>", type:pub.TYPE.WARNING },
		552: { content:"<div class='text'>"+__('Dziękujemy za wypełnienie ankiety!')+"</div>" },
		553: { content:"<div class='text'>"+__('Wystąpił problem podczas zapisywania danych. Spróbuj ponownie')+"</div>", type:pub.TYPE.ERROR },
		554: { content:"<div class='text'>"+__('Proszę odpowiedzieć na wszystkie pytania.')+"</div>", type:pub.TYPE.WARNING },
		555: { content:"<div class='text'>"+__('Zaznacz jakąś odpowiedź.')+"</div>" },
		556: { content:"<div class='text'>"+__('Wpisz inny sposób, w jaki dowiedziałeś się o Frisco w odpowiednie pole tekstowe.')+"</div>", type:pub.TYPE.WARNING },
// 		557: { content:"<div class='text'>"++"</div>" },
		558: { content:"<div class='text'>"+__('Dziękujemy, konto zostało założone. Możesz już złożyć swoje pierwsze zamówienie :-)')+"</div>" },
// 		559: { content:"<div class='text'>"++"</div>" },
		560: { content:"<div class='text'>"+__("Brak profilu użytkownika")+"</div>", type:pub.TYPE.ERROR },
		561: { content:"<div class='text'>"+__("Brak danych w profilu użytkownika")+"</div>", type:pub.TYPE.ERROR },
		562: { content:"<div class='text'>"+__('Wystąpił problem podczas zapisu danych. Sprawdź poprawność wszystkich pól i spróbuj ponownie')+"</div>", type:pub.TYPE.ERROR },
		563: { content:"<div class='text'>"+__('Ustawienia uaktualnione')+"</div>" },
		564: { content:"<div class='text'>"+__('Nie udało się uaktualnić ustawień. Zadzwoń do Biura Obsługi Klienta, tel. (22) 331 50 00"')+"</div>", type:pub.TYPE.ERROR },
		565: { content:"<div class='text'>"+__('Wystąpił problem podczas ustawiania planu oszczędnościowego. Proszę spróbować ponownie.')+"</div>", type:pub.TYPE.ERROR },
		566: { content:"<div class='text'>"+__('Wybran plan oszczędnościowy jest nieprawidłowy.')+"</div>", type:pub.TYPE.ERROR },
// 		567: { content:"<div class='text'>"++"</div>" },
		579: { content:"<div class='text'>"+__('Wystąpił problem podczas przetwarzania danych.')+"</div>", type:pub.TYPE.ERROR },
// 		580: { content:"<div class='text'>"+__('Wystąpił problem podczas przetwarzania danych. Adres email znajduje się już w bazie danych.')+"</div>", type:pub.TYPE.ERROR },
		580: { content:"<div class='text'>"+__("Już odebrałeś/-aś kupon. Zapraszamy do zakupów.")+"</div>", type:pub.TYPE.ERROR },
		581: { content:"<div class='text'>"+__("Wystąpił problem podczas aktywacji konta. Zadzwoń do Biura Obsługi Klienta, tel. (22) 331 50 00.")+"</div>", type:pub.TYPE.ERROR },
		582: { content:"<div class='text'>"+__("Konto zostało potwierdzone, na Twój adres email został wysłany kod rabatowy")+"</div>" },
		5821: { content:"<div class='text'>"+__("Konto zostało potwierdzone już wcześniej.")+"</div>" },
		583: { content:"<div class='text'>"+__("Wystąpił problem podczas aktywacji konta")+"</div>", type:pub.TYPE.ERROR },
		584: { content:"<div class='text'>"+__("Wystąpił problem podczas wypisywania z listy mailowej. Jeśli problem się powtórzy, zadzwoń do Biura Obsługi Klienta, tel. (22) 331 50 00.")+"</div>", type:pub.TYPE.ERROR },
		585: { content:"<div class='text'>"+__("Twoje konto zostało wypisane z naszej listy mailingowej")+"</div>" },
		5851:{ content:"<div class='text'>"+__("Zostałeś przywrócony na listę mailingową. Dziękujemy.")+"</div>" },
		586: { content:"<div class='text'>"+__("Twoje konto zostało aktywowane")+"</div>" },
		587: { content:"<div class='text'>"+__("Nie udało się aktywować konta. Zadzwoń do Biura Obsługi Klienta, tel. (22) 331 50 00.")+"</div>", type:pub.TYPE.ERROR },
		588: { content:"<div class='text'>"+__("Dane zostały zaktualizowane")+"</div>" },
		589: { content:"<div class='text'>"+__("Nie udało się uaktualnić danych. Zadzwoń do Biura Obsługi Klienta, tel. (22) 331 50 00")+"</div>", type:pub.TYPE.ERROR },
		590: { content:"<div class='text'>"+__("Wystąpił błąd")+"</div>", type:pub.TYPE.ERROR },
		591: { content:"<div class='text'>"+__("Wystąpił krytyczny błąd")+"</div>", type:pub.TYPE.ERROR },
		592: { content:"<div class='text'>"+__('Niepoprawne wywołanie parametrów')+"</div>", type:pub.TYPE.ERROR },
		593: { content:"<div class='text'>"+__("Nie masz uprawnień do wykonania tej operacji")+"</div>", type:pub.TYPE.ERROR },
		594: { content:"<div class='text'>"+__("Zaloguj się aby wykonać tę operację")+"</div>", type:pub.TYPE.ERROR },
		595: { content:"<div class='text'>"+__("Błąd komunikacji z serwerem. Przetwarzanie zostało zatrzymane. Spróbuj ponownie za chwilę.")+"</div>", type:pub.TYPE.ERROR },
		596: { content:"<div class='text'>"+__("Stwierdzono brak połączenia z siecią internet. Sprawdź połączenie!")+"</div>", type:pub.TYPE.ERROR },
		597: { content:"<div class='text'>"+__("Witryna Frisco jest nieosiągalna!")+"</div>", type:pub.TYPE.ERROR },
		598: { content:"<div class='text'>"+__("Sesja strony zostaje odświeżona")+"</div>" },
		599: { content:"<div class='text'>"+__("Przepraszamy, ale ta kampania promocyjna już nie obowiązuje. <br/>Zapraszamy do zapoznania się z naszą obecną ofertą!")+"</div>" },
		999: { content:"<div class='text'>Łojojoj, wiadomość testowa dostarczona do twoich rąk, oczu i nóg. Happy now?</div>" },
	};
	
	$(pub.init);
	return pub;
}();
/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/component_loader.js */
/**
 * Loader/spinner module
 * @author kroszak@frisco.pl
 */

var Loader = function() {
	// see config.js for loader type defs/constants
	var loaded = false;
	
	var blocker = null;
	var anchor = null;
	var loaderObj = null;
	var type = null;
	
	var blockCallback = null;
	
	var handleClick = function(cbk) {
		if (cbk && cbk instanceof Function) {
			blockCallback = cbk;
			$(blocker).bind("click", blockCallback);
		} else { 
			// TODO: do nothing? add some special button?
			$(blocker).bind("click", function(e){
				Loader.hide();
			});
		}
	};
	
	var pub = {
		TYPE : {
			COVER : 'cover',
			APPEND : 'append',
		},
/* 		SIZE : {
			INLINE : 'inline',
			FULLSIZE : 'fullsize',
		},*/
		
		init : function() { },
		
		load : function(type, parent, title, blockCbk) {
			if (loaded) return;
			if (parent==null && type==pub.TYPE.APPEND) return;
			
			console.log("[DBG][LOADER] Showing loader....");
			loaderObj = $( $.jqote(frisco.getTemplate('loader'), {'type' : type, 'content' : title}) );
			
			anchor = (parent != null ? parent : "div#wrapper");
			if (type == pub.TYPE.COVER) {
				$(anchor).addClass("opacity")
				loaderObj.insertBefore(anchor);
				
				blocker = $("<div id='elemBlocker' style='width:100%; height:100%;'></div>");
// 				$(blocker).insertBefore(anchor);
				$(anchor).append(blocker);
			} else if (type == pub.TYPE.APPEND) { 
				$(anchor).append(loaderObj);
			}
			
			//handleClick(blockCbk);
			loaded = true;
		},
		
		hide : function(cbk) {
			if (!loaded) return;
			
			console.log("[DBG][LOADER] Hiding loader....");
			loaded = false;
			$(anchor).removeClass("opacity");
			loaderObj.remove();
			$(blocker).remove();
			
			loaderObj = null;
			type = null;
			blockCallback = null;
		},
		
		bindBlockCallback : function(cbk) {
			handleClick(cbk);
		}
	};
	
	$(pub.init);
	return pub;
}();

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/api_client.js */
var apiClient = function(url) {
	var HEADER_SESSION_ID = "X_SESSION_ID";
	var HEADER_REQUEST_LANG = "X-Request-Lang";
	var SESSION_COOKIE_NAME = "fid";
	var STATUS_OK   = 0; 
	var STATUS_SERVER_ERROR = 500;
	var ERROR_FIELD = 'error';
	
	var OS_NAME              = 'X-OS-Name';
	var OS_VERSION           = 'X-OS-Version';
	var APP_VERSION          = 'X-App-Version';
	
	var api_url = url;

	/* Recognize which function to use in order to handle both IE and other browser */    
	function stopTheWindow() {
	// if(navigator.appName == "Microsoft Internet Explorer")
	if (BrowserDetect.browser == "Explorer")
		document.execCommand("Stop");
	else
		window.stop();
	}

	function parseUrl(url) {
		var e=/^((http|https):\/\/)([^\/]+)/;

		if (url.match(e)) {
			return  {url: RegExp['$&'],
				protocol: RegExp.$2,
				host:RegExp.$3};
		}
		else {
			return  {url: null, protocol: null, host: null};
		}
	};

	var isJSONP = function(url) {
		var urlData = parseUrl(url);
		return urlData.host && urlData.protocol && (location.protocol != urlData.protocol || location.hostname != urlData.hostname) ? true : false;
	};

	var useJSONP = isJSONP(url);

	var buildUriParametersString = function(parameters) {
		var parametersString = "";
		$.each(parameters, function(index, value) { 
			parametersString += "/" + index + "," + value;
		});
		
		return parametersString;
	};
	
	var getResourceUrl = function(resourceName, resourceId, resourceParams) {
		return api_url + "/" + resourceName + (resourceId != null ? resourceId + "/" : "") + buildUriParametersString(resourceParams);
	};

	/**
	* this is shit
	* @param c_name
	*/
	var getCookie = function (c_name) {
		var i,x,y,ARRcookies=document.cookie.split(";");
		for (i=0;i<ARRcookies.length;i++)
		{
		x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
		y=ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
		x=x.replace(/^\s+|\s+$/g,"");
		if (x==c_name)
			{
			return unescape(y);
			}
		}
	};

	var _getJSON = function(params) {
		if (typeof params == "undefined") {
			params = {};
		}
		if (typeof params != 'object') {
			throw "[API] Params should be object not " + typeof params;
		}
		params.method = 'get';
		return _makeRequest(params);
	};

	var _postJSON = function(params) {
		if (typeof params == "undefined") {
			params = {};
		}
		if (typeof params != 'object') {
			throw "[API] Params should be object not " + typeof params;
		}
		params.method = 'post';
		return _makeRequest(params);
	};
	
	var _putJSON = function(params) {
		if (typeof params == "undefined") {
			params = {};
		}
		if (typeof params != 'object') {
			throw "[API] Params should be object not " + typeof params;
		}
		params.method = 'put';
		return _makeRequest(params);
	};
	
	var _deleteJSON = function(params) {
		if (typeof params == "undefined") {
			params = {};
		}
		if (typeof params != 'object') {
			throw "[API] Params should be object not " + typeof params;
		}
		params.method = 'delete';
		return _makeRequest(params);
	};

	var _makeRequestJSONP = function(params) {
		params["dataType"] = "jsonp";
		return _makeRequestXHR(params);
	}
	
	var _makeRequestXHR = function(params) {
		
		if (typeof params["url"] == 'undefined') {
			throw "[AJAX] Lack of url definition"; 
		}
		var url = params["url"];
		
		if (typeof params["method"] == 'undefined') {
			throw "[AJAX] Lack of method definition"; 
		}
		var method = params["method"];
		
		if(typeof params["url"] == 'undefined') {
			throw "[AJAX] Lack of url definition"; 
		}
		
		var uriParams = {};
		if (typeof params["uriParams"] != 'undefined') {
			uriParams = params["uriParams"];
		}

		var reqData = {};
		if (typeof params["reqData"] != 'undefined') {
			reqData = params["reqData"];
		}
		
		var async = true;
		if (typeof params["sync"] != "undefined") {
			async = !params["sync"];
		}
	
		if (async) {
			if(typeof params["onSuccess"] == 'undefined') {
				throw "[AJAX] Lack of onSuccess definition"; 
			} 
			var onSuccess = params["onSuccess"];
			
			if (typeof params["onFailure"] != 'undefined') {
				var onFailure = params["onFailure"]; 
			}
		}
		
		var dataType = 'json';
		if (typeof params["dataType"] != 'undefined') {
			dataType = params["dataType"]; 
		}

		$.each(reqData,  function(i, v) { if (v == null || v.length == 0) { delete reqData[i]; }});
		$.each(uriParams,  function(i, v) { if (v == null || v.length == 0) { delete uriParams[i]; }});
		var call_url = getResourceUrl(url, null, uriParams);

		var successCbk = function (result, textStatus, respObj)  {
			if (respObj.status == 403) {
				// forbidden
				Popup.loadMessage({ messageId: Popup.MESSAGES.FORBIDDEN, timeout: Popup.TIMEOUT.NORMAL });
				return;
			}
			if (respObj.status == 401) {
				// not authorized
				Popup.loadMessage({ messageId: Popup.MESSAGES.NOT_AUTHORIZED, timeout: Popup.TIMEOUT.NORMAL });
				return;
			}

			// havent seen >= 600 but .. ;p
			if (respObj.status >= 500 && respObj.status < 600) {
				// not authorized
				$("#page_content.opacity").removeClass("opacity");
				$("#page_content_loader").hide();
// 				Popup.loadMessage({ messageId: Popup.MESSAGES.SERVER_ERROR, timeout: Popup.TIMEOUT.NORMAL });
				//window.stop();
				stopTheWindow();
				return;
			}

			if (!result) {
				// empty response body
				console.log('Empty response body for req', call_url);
				if (onSuccess != undefined) { onSuccess(""); }
				return;
			}

			if (result.status != undefined && result.status == STATUS_OK) {
				var resultData = result.data; 
				if (onSuccess != undefined) { onSuccess(resultData); }
				return;
			}
			
			if (!result.status && respObj.status < 400) {
				if (onSuccess != undefined) { onSuccess(result); }
				return;
			}
			
			if (onFailure != undefined) {
				if(result.status != undefined ) { 
					onFailure(result.status, result.errors || result.message);
				} else {
					onFailure(STATUS_SERVER_ERROR);
				}
			}

			var data = result.data;
			if (!result.errors && !result.message && (typeof data == "undefined" || !data || data.error == undefined)) { 
				throw "Respose error and no message given"; 
			}

			if (data && data.error) {
				throw data.error;
			}
		};

		var errorCbk = function(respObj, textStatus, errorThrown) {
			if (!respObj) {
				$("#page_content.opacity").removeClass("opacity");
				$("#page_content_loader").hide();

// 				Popup.loadMessage({ messageId: Popup.MESSAGES.SERVER_ERROR, timeout: Popup.TIMEOUT.NORMAL });
				if (onFailure != undefined) { onFailure(STATUS_SERVER_ERROR); }
				//window.stop();
				stopTheWindow();
				return;
			}
			if (respObj.status == 403) {
				// forbidden
				Popup.loadMessage({ messageId: Popup.MESSAGES.FORBIDDEN, timeout: Popup.TIMEOUT.NORMAL });
				return;
			}
			if (respObj.status == 401) {
				// not authorized
				Popup.loadMessage({ messageId: Popup.MESSAGES.NOT_AUTHORIZED, timeout: Popup.TIMEOUT.NORMAL });
				friscoEvents.fire('apiClientCore', friscoEvents.FEV_UNAUTHORIZED_ACTION_MADE);
				return;
			}
			// havent seen >= 600 but .. ;p
			if (respObj.status >= 500 && respObj.status < 600) {
				// not authorized
				$("#page_content.opacity").removeClass("opacity");
				$("#page_content_loader").hide();

// 				Popup.loadMessage({ messageId: Popup.MESSAGES.SERVER_ERROR, timeout: Popup.TIMEOUT.NORMAL });
				//window.stop();
				stopTheWindow();
				return;
			}
			
			var respText;
			try { 
				respText = JSON.parse(respObj.responseText);
				respText.message && (respText = respText.message);
			} catch(e) {
				var m = respObj.responseText && respObj.responseText.match(/message\":\s*\"(.*)\"/);
				if (m)
					respText = m[1];
			}
			
			if (onFailure != undefined) { onFailure(respObj.status, respText || respObj.responseText); }
		};

		var callObj = {
			url: call_url,
			data : reqData,
			success : successCbk,
			error : errorCbk,
			type : method,
			dataType : dataType,
			async: async
		};

		if (params.headers) {
			callObj.headers = params.headers;
		}

		if (!params.useJSONP && !params.noCustomHeaders)
		callObj["beforeSend"] = function(xhr) {
			xhr.setRequestHeader(HEADER_SESSION_ID, getCookie(SESSION_COOKIE_NAME));
			xhr.setRequestHeader(HEADER_REQUEST_LANG, core.getCurrentLang());
			
			xhr.setRequestHeader(OS_NAME, "www");
			xhr.setRequestHeader(OS_VERSION, BrowserDetect.OS + ", " + BrowserDetect.browser + "/" + BrowserDetect.version);
			xhr.setRequestHeader(APP_VERSION, "1.2");
// 			xhr.setRequestHeader(APP_VERSION, "1.2/" + experimentId + ':' + AB_variant); // use this for A/B tests
		};

		if (!async) {
			// get rid of async calls
			delete callObj.error; delete callObj.success;
			var result = $.ajax(callObj);
			if (result.readyState == 4) {
				if (result.status == 403) {
					// forbidden
					Popup.loadMessage({ messageId: Popup.MESSAGES.FORBIDDEN, timeout: Popup.TIMEOUT.NORMAL });
					return;
				}
				if (result.status == 401) {
					// not authorized
					Popup.loadMessage({ messageId: Popup.MESSAGES.NOT_AUTHORIZED, timeout: Popup.TIMEOUT.NORMAL });
					friscoEvents.fire('apiClientCore', friscoEvents.FEV_UNAUTHORIZED_ACTION_MADE);
					// workaround for logged/not logged user
					if (session.user_id) {
						$('#logout').submit();
					}
					return;
				}
				
				result = JSON.parse(result.responseText);
				if (result.status != undefined && result.status == STATUS_OK) {
					return result.data;
				}
			} else {
				return null;
			}
		}
		$.ajax(callObj);
	};

	var _makeRequest  = function(params) {
		if (params.useJSONP && params.method != 'get') {
			throw "Cannot do other crossdomain request than get";
		}
		return params.useJSONP ? _makeRequestJSONP(params) : _makeRequestXHR(params);
	};
	
	var pub = {

		get : function(params) {
			return _getJSON(params);
		},
		post : function(params) {
			return _postJSON(params);
		},
		put : function(params) {
			return _putJSON(params);
		},
		del : function(params) {
			return _deleteJSON(params);
		}
	};
	
	return pub;
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_reservations_api_client.js */
var FriscoReservationsApi = function(url) {

	var api = new apiClient(url);
		
	var pub = {
			/** various consts **/
			WINDOW_STATUS_OPEN          : 1,
			WINDOW_STATUS_CLOSED        : 2,
			WINDOW_STATUS_CANCELLED     : 3,
			WINDOW_STATUS_DELAYED       : 4,			
			
	        /** reservations api **/

            getImmediateAvailable : function (shopId, callback, blocking) {

                if(callback == undefined && !blocking) {
	        		return;
	        	}

	            if (shopId == undefined) { 
	            		callback(0, []); return;
	            }
	            var uriParams = {
	            		"shop_id": shopId
	            };
	            var queryParams = {
	            		"immediate": true
	            };
                
                if(!blocking) {
				    api.get({
					    "url": 'window',
					    "uriParams":  uriParams,
					    "reqData":  queryParams,
					    "onSuccess":  function(data) { callback(data && data.window ? data.window : null) },
					    "onFailure": function(data) { callback(null) }
				    });
                } else {
                    var data = api.get({
					    "url": 'window',
					    "uriParams":  uriParams,
					    "reqData":  queryParams,
                        "sync" : true
					});
                    if(data && data.window) {
                        return data.window;
                    }
                    return null;
                }
            },
            getDayList : function (shopId, tsStart, tsEnd, callback, blocking) {
                
                if(callback == undefined && !blocking) {
                    return;
                }
                if (shopId == undefined ||
                    tsStart == undefined || !tsStart ||
                    tsEnd == undefined || !tsEnd
                    ) {
                        callback(0, []); return;
                }

                var uriParams = {
                        "shop_id": shopId
                };
                var queryParams = {
                        "date_start": tsStart,
                        "date_end": tsEnd,
                        "brief" : true
                };
                if(!blocking) {
                    api.get({
                        "url": 'day',
                        "uriParams":  uriParams,
                        "reqData":  queryParams,
                        "onSuccess":  function(data) { callback(data) },
                        "onFailure": function(data) { callback(null) }
                    });
                } else {
                    var data = api.get({
                        "url": 'day',
                        "uriParams":  uriParams,
                        "reqData":  queryParams,
                        "sync" : true
                    });
                    if(data) {
                        return data;
                    }
                    return null;
                }
            },
	        getWindowList : function(shopId, tsStart, tsEnd, callback, blocking) {

                if(callback == undefined && !blocking) {
                    return;
                }

                if (shopId == undefined ||
                    tsStart == undefined || !tsStart ||
                    tsEnd == undefined || !tsEnd
                    ) {
                        if (blocking) return null;
                        callback(0, []); return;
                }

                var uriParams = {
                        "shop_id": shopId
                };
                var queryParams = {
                        "date_start": tsStart,
                        "date_end": tsEnd,
                        "brief" : true
                };
                if(!blocking) {
                    api.get({
                        "url": 'window',
                        "uriParams":  uriParams,
                        "reqData":  queryParams,
                        "onSuccess":  function(data) { callback(data) },
                        "onFailure": function(data) { callback(null) }
                    });
                } else {
                    var data = api.get({
                        "url": 'window',
                        "uriParams":  uriParams,
                        "reqData":  queryParams,
                        "sync" : true
                    });
                    if(data) {
                        return data;
                    }
                    return null;
                }
	        },
	        
	        getSystemSettings : function(callback) {
	        	
	        	if (callback == undefined || !callback) {
	        		return;
	        	}
	        	
	        	var uriParams = {};
	        	var queryParams = {};
	        	api.get({
					"url": 'settings',
					"uriParams":  uriParams,
					"reqData":  queryParams,
					"onSuccess":  function(data) { callback(data) } 
				});
	        },        
	        
	        confirmReservation : function(userId, reservationId, orderId, callback) {

	        	if(callback == undefined || !callback) {
	        		return;	
	        	}        	
	            if (reservationId == undefined || !reservationId ||
	            		orderId == undefined || !orderId     	
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
                        "user_id": userId,
	            		"reservation_id": reservationId            		
	            };
	            var bodyParams = {
	            		"order_id": orderId       		
	            };
	            // TODO: pass reservation as an cbk arg??
				api.put({
					"url": 'reservation',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"onSuccess":  function(data) { callback(data) } 
				});       	        	
	        },
	        
	        prolongReservation : function(userId, reservationId, callback) {

	        	if(callback == undefined || !callback) {
	        		return;	
	        	}        	
	            if (reservationId == undefined || !reservationId
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
                        "user_id": userId,
	            		"reservation_id": reservationId            		
	            };
	            var bodyParams = {
	            };
	            // TODO: pass reservation as an cbk arg??
				api.put({
					"url": 'reservation',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"onSuccess":  function(data) { callback(data.reservation); },
					"onFailure":  function(data) { callback(null) }
				});
	        },
	        	        
	        // shopId from client side hmm, its ok NOT
	        createReservation : function(curUserId, shopId, windowId, callback) {
	
	        	var sync = callback == undefined || !callback; 
	            if (shopId == undefined ||
	            	windowId == undefined || !windowId 
	            	) { 
	            		if(!sync) {
	            			callback(0, []); return;
	            		} else {
	            			return false;
	            		}
	            }
	            
	            var uriParams = {
	        	    'user_id': curUserId
	            };

                var bodyParams = {
                        "shop_id": shopId,
                        "window_id": windowId
	            };

	            var params = {
					"url": 'reservation',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"onSuccess":  function(data) { callback(data.reservation) },
					"onFailure":  function(data) { callback(null) }
				};
	            if(sync) {
	            	params['sync'] = true;
	            	var result = api.post(params);
	            	if(result) {
	            		return result.reservation;
	            	} else {
	            		return null;
	            	}
	            }
				api.post(params);          	
	        },
	        
	        getReservation : function(userId, reservationId, callback) {

	        	if(callback == undefined || !callback) {
	        		return;	
	        	}        	
	            if (reservationId == undefined || !reservationId
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
                        "user_id": userId,
	            		"reservation_id": reservationId            		
	            };
	            var bodyParams = {
	            }; 
				api.get({
					"url": 'reservation',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"onSuccess":  function(data) { callback(data) } 
				});          	
	        },
	        
	        getActiveUserReservation : function(userId, callback, blocking) {

	        	if(callback == undefined && !blocking) {
	        		return;	
	        	}        	
	            if (userId == undefined || !userId
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
	            		"user_id": userId
	            };
	            var queryParams = {
	            }; 

                if(!blocking) {
				    api.get({
					    "url": 'reservation',
					    "uriParams":  uriParams,
					    "reqData":  queryParams,
					    "onSuccess":  function(data) { callback(data.reservation) },
					    "onFailure": function(data) { callback(null) }
				    });          	
                } else {
                    var data = api.get({
					    "url": 'reservation',
					    "uriParams":  uriParams,
					    "reqData":  queryParams,
                        "sync" : true
                    });
                    if(data && data.reservation) {
                        return data.reservation;
                    }
                    return null;
                }
	        },

	        setActiveUserReservation : function(userId, reservationId, callback, blocking) {

	        	if(!blocking && (callback == undefined || !callback)) {
	        		return;	
	        	}
	            if (userId == undefined || !userId
	            	) { 
                        if(!blocking) {
    	            		callback(0, []); return; 
                        } else {
                            return;
                        }
	            }
	            
	            var uriParams = {
	            		"user_id": userId
	            };
	            var bodyParams = {
                        "reservation_id": reservationId
	            }; 


                var params = {
					"url": 'reservation',
					"uriParams":  uriParams,
					"reqData":  bodyParams
				};

			    if(blocking != undefined && blocking) {
				    params["sync"] = true;
				    var result = api.put(params);
				    if(!result) {
					    return null;
				    }
				    return result;
                } else {
					params["onSuccess"] = function(data) { callback(data.reservation) };
					params["onFailure"] = function(data) { callback(null) };
                }

				api.put(params);          	
	        },
	        
	        deleteReservation : function(user_id, reservationId, callback) {
	        	
	        	if(callback == undefined || !callback) {
	        		return;	
	        	}        	
	            if (reservationId == undefined || !reservationId
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
	            		"reservation_id": reservationId,
	            		"user_id": user_id
	            };
	            var bodyParams = {
	            };
				api.del({
					"url": 'reservation',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"onSuccess":  function(data) { callback(data) } 
				});            	
	        },
	        
	        createWindow : function(dateStart, dateEnd, reservationLimit, reservationCount, callback){

	        	
	        	if(callback == undefined || !callback) {
	        		return;	
	        	}        	
	            if (dateStart == undefined || !dateStart ||
	            	dateEnd == undefined || !dateEnd ||
	            	reservationLimit == undefined || !reservationLimit ||
	            	reservationCount == undefined || !reservationCount 
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
	            };
	            var bodyParams = {
	            		"date_start": dateStart,
	            		"date_end": dateEnd,
	            		"reservationLimit": reservationLimit,
	            		"reservationCount": reservationCount
	            };
				api.post({
					"url": 'window',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"onSuccess":  function(data) { callback(data) } 
				});            	
	        },
	        
	        deleteWindow : function(windowId, callback) {
	        	
	        	if(callback == undefined || !callback) {
	        		return;	
	        	}        	
	            if (windowId == undefined || !windowId
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
	            		"window_id": windowId            		
	            };
	            var queryParams = {
	            		"timestamp": windowId
	            };
				api.del({
					"url": 'window',
					"uriParams":  uriParams,
					"reqData":  queryParams,
					"onSuccess":  function(data) { callback(data) } 
				});
	        },
	        
	        updateWindow : function(windowId, reservationLimit, reservationCount, status, callback) {
	        	
	        	if(callback == undefined || !callback) {
	        		return;	
	        	}        	
	            if (dateStart == undefined || !dateStart ||
	            	dateEnd == undefined || !dateEnd ||
	            	reservationLimit == undefined || !reservationLimit ||
	            	reservationCount == undefined || !reservationCount ||
	            	status == undefined || !status
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
	            		"window_id": windowId
	            };
	            var bodyParams = {
	            		"timestamp": windowId,
	            		"status": status,
	            		"reservationLimit": reservationLimit,
	            		"reservationCount": reservationCount
	            };
				api.put({
					"url": 'window',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"onSuccess":  function(data) { callback(data) } 
				});                	
	        },
	        
	        updateWindowStatus : function(windowId, status, callback) {
	        	
	        	if(callback == undefined || !callback) {
	        		return;	
	        	}        	
	            if (windowId == undefined || !windowId ||
	            	status == undefined || !status
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
	            		"window_id": windowId
	            };
	            var bodyParams = {
	            		"timestamp": windowId,
	            		"status": status
	            };
				api.put({
					"url": 'window',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"onSuccess":  function(data) { callback(data) } 
				});           	
	        },
	        
	        updateWindowLimit : function(windowId, reservationLimit, status, callback) {
	        	
	        	if(callback == undefined || !callback) {
	        		return;	
	        	}        	
	            if (dateStart == undefined || !dateStart ||
	            	dateEnd == undefined || !dateEnd ||
	            	reservationLimit == undefined || !reservationLimit ||
	            	status == undefined || !status
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
	            		"window_id": windowId
	            };
	            var bodyParams = {
	            		"timestamp": windowId,
	            		"status": status,
	            		"reservationLimit": reservationLimit
	            };
				api.put({
					"url": 'window',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"onSuccess":  function(data) { callback(data) } 
				});               	
	        },
	        
	        getWindow : function(windowId, callback) {
	        	
	        	if(callback == undefined || !callback) {
	        		return;	
	        	}        	
	            if (status == undefined || !status
	            	) { 
	            		callback(0, []); return; 
	            }
	            
	            var uriParams = {
	            		"window_id": windowId
	            };
	            var queryParams = {
	            		"timestamp": windowId
	            };
				api.get({
					"url": 'window',
					"uriParams":  uriParams,
					"reqData":  queryParams,
					"onSuccess":  function(data) { callback(data) } 
				});               	
	        }           	        			
	};
	
	return pub;
}		

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_users_api_client.js */
var FriscoUsersApi = function(url) {

	var api = new apiClient(url);

	var pub = {			
		/** various consts **/

        /* Switch password_reminder to false */
        setUserLang : function(userId, langId, callback) {
            if(callback == undefined || !callback) {
                return;
            }
	
            if (userId == undefined || !userId) {
        	callback({});
                return;
            }

            var uriParams = {
                "user_id": userId
            };
            var queryParams = { langId: langId};
            api.post({
                url: 'lang',
                uriParams:  uriParams,
                reqData:  queryParams,
                onSuccess:  function (data) { callback(data) } ,
                onFailure : function (datA) { callback(null) }
            });

        },

		/** users api **/
		getUser : function(userId, callback, failureCallback, blocking) {
			if ((callback == undefined || !callback) && !blocking) {
				return;
			}
			
			if (userId == undefined || !userId) {
				if (typeof failureCallback == "function")
					failureCallback({});
				else
					callback({});
				return;
			}

			var uriParams = {
				"user_id": userId
			};
			var queryParams = {};
			
			if (!blocking) {
				api.get({
					url: 'user',
					uriParams: uriParams,
					reqData:  queryParams,
					onSuccess:  function(data) {  callback(data.user); },
					onFailure:  function(data) {  failureCallback(null); }
				});
			} else {
				var data = api.get({
					url: 'user',
					uriParams: uriParams,
					reqData:  queryParams,
					sync : true
				});
				if (data && data.user) {
					return data.user;
				}
				return null;
			}
		},

        /* Switch password_reminder to false */
        userNotifiedAfterPasswordReset : function(userId, callback) {
            if(callback == undefined || !callback) {
                return;
            }
	
            if (userId == undefined || !userId) {
        	callback({});
                return;
            }

            var uriParams = {
                "user_id": userId
            };
            var queryParams = {password_reset_reminder: 0};
            api.post({
                url: 'usernotify',
                uriParams:  uriParams,
                reqData:  queryParams,
                onSuccess:  function (data) { callback(data) } ,
                onFailure : function (datA) { callback(null) }
            });

        },

        getUserByEmail : function(email, successCallback, failureCallback) {

            if(successCallback == undefined || !successCallback) {
                return;
            }
            if (email == undefined || !email) {
                if (typeof failureCallback == "function")
                    failureCallback({});
                else
                    successCallback({});
                return;
            }

            var uriParams = {
                "email": email
            };
            var queryParams = {};

            api.get({
                "url": 'user',
                "uriParams":  uriParams,
                "reqData":  queryParams,
                "onSuccess":  successCallback,
                'onFailure' : failureCallback
            });
        },

		/**
		 * Checks if given email is taken. successCallback is called in case correct response is presented and email
		 * is taken, failureCallback otherwise.
		 */
		isEmailTaken : function(email, isTakenCallback, isNotTakenCallback) {
			if (typeof isTakenCallback !== "function" || typeof isNotTakenCallback !== "function")
				return;
			
			if (!email || typeof email !== "string")
				return;
			
			api.get({
				url       : 'email',
				uriParams : {},
				reqData   : { email : email },
				onSuccess : function(data) {
					if (data && data.email && data.email !== '')
						isTakenCallback();
					else
						isNotTakenCallback();
				},
				onFailure : function(status, text) {
					if (status > 400)
						isTakenCallback(text);
					else
						isNotTakenCallback(text);
				}
			})
		},

		resetPasswordRequest : function(email, callback) {
			
	    	if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (email == undefined || !email      	
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {            		
                'email' : 1
	        };
            var reqBody = {
                'email' : email
            };

			api.put({
	    		url: 'password',
                uriParams: uriParams,
                reqData : reqBody,
				onSuccess:  function(data) { callback(data) },
                onFailure: function(data) { callback(null) }
			});				
		},

		resetPassword : function(hash, callback) {
			
	    	if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (hash == undefined || !hash      	
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {            		
                'password' : 1,
                'hash': hash
	        };
            var reqBody = {
            };

			api.put({
	    		url: 'password',
                uriParams: uriParams,
                reqData : reqBody,
				onSuccess:  function(data) { callback(data) },
                onFailure: function(data) { callback(null) }
			});				
		},

		
		updateUser : function(userId, userData, callback) {
		
	    	if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (userId == undefined || !userId ||
	        	userData == undefined || !userData
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {   
	        		"user_id": userId
	        };
	        var bodyParams = {
	        		"user": userData	        		
	        };
			api.put({
				"url": 'user',
				"uriParams":  uriParams,
				"reqData":  bodyParams,
				"onSuccess":  function(data) { callback(data.user) },
				"onFailure":  function(data) { callback(undefined) }
			});				
		},

        activateUser : function(hash, successCallback, failureCallback) {

            if (typeof successCallback != 'function') {
                return;
            }

            if (!hash) {
                failureCallback({});
                return;
            }

            var uriParams = {
                hash   : hash
            };

            var bodyParams = {};

            api.put({
                url       : 'password',
                uriParams : uriParams,
                reqData   : bodyParams,
                onSuccess : successCallback,
                onFailure : failureCallback
            });
        },


		getUsers : function(users, callback) {
			
	    	if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (users == undefined || !users
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {   
	        		"user_id": users
	        };
	        var queryParams = {	        			        		
	        };
	        
	        // TODO: extract and format?
			api.get({
				"url": 'user',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});
		},
		
		deleteUser : function(userId, callback) {
			
	    	if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (userId == undefined || !userId
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {   
	        		"user_id": userId
	        };
	        var queryParams = {	        			        		
	        };    

			api.del({
				"url": 'user',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});
	    },	     

        addUser : function(userData, address_data, callback, failed) {

            if(callback == undefined || !callback) {
                return;
            }

            if (userData == undefined || !userData) {
                callback(0, []); return;
            }

            var uriParams = {};
            var bodyParams = {
                user: userData
            };
            if (address_data)
                bodyParams["address"] = address_data;

            api.post({
                url : 'user',
                uriParams : uriParams,
                reqData   : bodyParams,
                onSuccess : callback,
                onFailure : failed
            });
        },

		getUserRoles : function(userId, callback) {
	    	
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (users == undefined || !users
				) { 
					callback(0, []); return; 
			}
			
			var uriParams = { 
				"user_id": userId
			};
			var queryParams = {							        		
			};	        
			
			// TODO: parse and format?
			api.get({
				"url": 'role',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});	    		    	
		},
	    
		getUserRole : function(userId, serviceId, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (userId == undefined || !userId ||
				serviceId == undefined || !serviceId
				) { 
					callback(0, []); return; 
			}
			
			var uriParams = { 
				"user_id": userId,
				"serviceId": serviceId
			};
			var queryParams = {							        		
			};	        
			
			// TODO: parse and format?
			api.get({
				"url": 'role',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});				
		},
		
		updateUserRole : function(userId, serviceId, roleId, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (userId == undefined || !userId ||
				serviceId == undefined || !serviceId ||
				roleId == undefined || !roleId
				) { 
					callback(0, []); return; 
			}
			
			var uriParams = {  
				"user_id": userId,
				"serviceId": serviceId
			};
			var bodyParams = {	
				"roleId": roleId		        		
			};        			

			api.put({
				"url": 'user',
				"uriParams":  uriParams,
				"reqData":  bodyParams,
				"onSuccess":  function(data) { callback(data) } 
			});	    				
		},
		
		addMessage : function(senderId, recipientId, subject, body, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (senderId == undefined || !senderId ||
				recipientId == undefined || !recipientId ||
				subject == undefined || !subject ||
				body == undefined || !body 					
				) { 
					callback(0, []); return; 
			}
			
			var uriParams = {  
			};
			var bodyParams = {	
				"senderId": senderId,
				"recipientId": recipientId,
				"subject": subject,
				"body": body
			};        			

			api.post({
				"url": 'message',
				"uriParams":  uriParams,
				"reqData":  bodyParams,
				"onSuccess":  function(data) { callback(data) } 
			});	    			
		},
		
		deleteMessage : function(messageId, callback) {
			
	    	if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (messageId == undefined || !messageId
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {   
	        		"messageId": messageId
	        };
	        var queryParams = {	        			        		
	        };      

			api.del({
				"url": 'message',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});			
		},
		
		getMessage : function(messageId, callback) {
			
	    	if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (messageId == undefined || !messageId      	
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {
	        		"messageId": messageId
	        };
	        var queryParams = {
	        };
	        
			api.get({
				"url": 'message',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});  			
		},
		
		updateMessageStatus : function(messageId, status, userId, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (messageId == undefined || !messageId ||
				status == undefined || !status ||
				userId == undefined || !userId 					
				) { 
					callback(0, []); return; 
			}
			
			var uriParams = {
				"messageId": messageId					
			};
			var bodyParams = {
				"status": status,
				"user_id": userId,
				"body": body
			};        			

			api.put({
				"url": 'message',
				"uriParams":  uriParams,
				"reqData":  bodyParams,
				"onSuccess":  function(data) { callback(data) } 
			});				
		},
		
		getMessages : function(userId, page, limit, callback) {
	    	
			if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (userId == undefined || !userId ||
	        	limit == undefined || !limit ||
	        	page == undefined || !page
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {
	        	"user_id": userId
	        };
	        var queryParams = {
	        	"limit": limit,
	        	"page": page
	        };
	        
			api.get({
				"url": 'message',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});  				
		},
		
		getUnreadMessages : function(userId, page, limit, callback) {
			if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (userId == undefined || !userId ||
	        	limit == undefined || !limit ||
	        	page == undefined || !page
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {
	        	"user_id": userId,
	        	"unread": true
	        };
	        
	        var queryParams = {
	        	"limit": limit,
	        	"page": page
	        };
	        
			api.get({
				"url": 'message',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});  		
		},
		
		getSentMessages : function(senderId, page, limit, callback) {
			if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (senderId == undefined || !senderId ||
	        	limit == undefined || !limit ||
	        	page == undefined || !page
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {
	        	"senderId": senderId
	        };
	        
	        var queryParams = {
	        	"limit": limit,
	        	"page": page
	        };
	        
	        // TODO: format?
			api.get({
				"url": 'message',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});  				
		},
		
		getFriendList : function(userId, page, limit, callback) {
			if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (userId == undefined || !userId ||
	        	limit == undefined || !limit ||
	        	page == undefined || !page
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {
	        	"user_id": userId
	        };
	        
	        var queryParams = {
	        	"limit": limit,
	        	"page": page
	        };
	        
			api.get({
				"url": 'friendslist',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});  				
		},
		
		removeFriendFromFriendList : function(userId, friendId, callback) {
			
			if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (userId == undefined || !userId ||
        		friendId == undefined || !friendId
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {
	        	"user_id": userId,
	        	"friendId": friendId
	        };
	        
	        var queryParams = {
	        };
	        
			api.del({
				"url": 'friendslist',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});  				
		},
		
		getFriendsQueue : function(userId, page, limit, callback) {
			if(callback == undefined || !callback) {
	    		return;	
	    	}        	
	        if (userId == undefined || !userId ||
	        	limit == undefined || !limit ||
	        	page == undefined || !page
	        	) { 
	        		callback(0, []); return; 
	        }
	        
	        var uriParams = {
	        	"user_id": userId
	        };
	        
	        var queryParams = {
	        	"limit": limit,
	        	"page": page
	        };
	        
	        // TODO: format?	        
			api.get({
				"url": 'friendsqueue',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			}); 			
		},
/*		
		getReceivedInvitations(userId, page, limit, callback) {
			
		},
		
addFriendToFriendsQueue($userId, $friendId) {
}
observeUser($observerId, $userId) {
}
unobserveUser($observerId, $userId) {
}
getObservedUsers($observerId) {
}
getObservingUsers($observedId) {
}
confirmRequest($userId, $friendId) {
}
rejectRequest($userId, $friendId) {
}
getModules($page, $limit) {
}
getServiceModules($serviceId) {
}
addModule($serviceId, $app, $name) {
}
updateModule($moduleId, $serviceId, $app, $name) {
}
getPermissions($userId, $serviceId) {
}
*/
		addUserAddress : function(userId, addressData, callback, sync) {
			
			if(!sync && (callback == undefined || !callback)) {
				return;	
			}
            
			if (userId == undefined || !userId ||
				addressData == undefined || !addressData 					
				) { 
					callback(0, []); return; 
			}
			
			var uriParams = {  
	                    "user_id": userId
			};
			
			var bodyParams = {	
				"user_id": userId,
				"address":	addressData["address"],
			    "address_no":	addressData["address_no"],
			    "address_name":	addressData["address_name"],
			    "is_private":	addressData["is_private"],			    
			    "country_code":	addressData["country_code"],
			    "visible_name":	addressData["visible_name"],
			    "street":	addressData["street"],
			    "city":	addressData["city"],
			    "postcode":	addressData["postcode"],
			    "nip":	addressData["nip"],
			    "has_lift":	addressData["has_lift"],
			    "street_no":	addressData["street_no"],
			    "flat_no":	addressData["flat_no"],			    
			    "stairway_no":	addressData["stairway_no"],
			    "latitude":	addressData["latitude"],
			    "longitude":	addressData["longitude"],
			    "description":	addressData["description"]
			};
			
			if(addressData["is_main"]) {
				bodyParams["is_main"] = addressData["is_main"];
			}

			if(addressData["custom_street"]) {
				bodyParams["custom_street"] = addressData["custom_street"];
			}

			if(!sync) {
				api.post({
					"url": 'address',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"onSuccess":  function(data) { callback(data) },
					"onFailure":  function(data) { callback(null) }
				});
			} else {
				var result = api.post({
					"url": 'address',
					"uriParams":  uriParams,
					"reqData":  bodyParams,
					"sync" : true
				});
                if(result) {
                    return result;
                }
                return null;
			}
		},
		
		updateUserAddress : function(userId, addressNo, addressData, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (userId == undefined || !userId ||
				addressNo == undefined || !addressNo ||
				addressData == undefined || !addressData 					
				) { 
					callback(0, []); return; 
			}
			
			var uriParams = {
					"user_id": userId,
				    "address_no":	addressNo					
			};
			
			var bodyParams = {				
				"address":	addressData["address"],
			    "address_name":	addressData["address_name"],
			    "is_private":	addressData["is_private"],
			    "country_code":	addressData["country_code"],
			    "visible_name":	addressData["visible_name"],
			    "street":	addressData["street"],
			    "city":	addressData["city"],
			    "postcode":	addressData["postcode"],
			    "nip":	addressData["nip"],
			    "has_lift":	addressData["has_lift"],
			    "stairway_no":	addressData["stairway_no"],
			    "street_no":	addressData["street_no"],
			    "flat_no":	(addressData["flat_no"]=='')?0:addressData["flat_no"],
			    "latitude":	addressData["latitude"],
			    "longitude":	addressData["longitude"],
			    "description":	addressData["description"] || ' '
			};
			
			if(addressData["is_main"]) {
				bodyParams["is_main"] = addressData["is_main"];
			}			
			api.put({
				"url": 'address',
				"uriParams":  uriParams,
				"reqData":  bodyParams,
				"onSuccess":  function(data) { callback(data) }, 
				"onFailure":  function(data) { callback(null) }
			});				
		},
		
		deleteUserAddress : function(userId, addressNo, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (userId == undefined || !userId ||
				addressNo == undefined || !addressNo
				) { 
					callback(0, []); return; 
			}
			
			var uriParams = {
					"user_id": userId,
				    "address_no":	addressNo					
			};
			
			var queryParams = {				
			};

			api.del({
				"url": 'address',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) },
				"onFailure":  function(data) { callback(null) }
			});			
		},
		
		getUserAddress : function(userId, addressNo, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (userId == undefined || !userId ||
				addressNo == undefined || !addressNo ||
				addressData == undefined || !addressData 					
				) { 
					callback(0, []); return; 
			}
			
			var uriParams = {
					"user_id": userId,
				    "address_no":	addressNo					
			};
			
			var queryParams = {				
			};

			api.get({
				"url": 'address',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data) } 
			});				
		},
		
		getUserAddresses : function(userId, callback, sync) {
			
			if (!sync && (callback == undefined || !callback)) {
				return;
			}
			if (userId == undefined || !userId) {
				if (sync) {
					return null;
				}
				callback(0, []); return;
			}
			
			var uriParams = {
				"user_id": userId
			};
			
			var queryParams = {
				"limit" : 50
			};

			if (!sync) {
				api.get({
					"url": 'address',
					"uriParams":  uriParams,
					"reqData":  queryParams,
					"onSuccess":  function(data) { callback(data.address) },
					"onFailure": function(data) { callback(null) }
				});
			} else {
				var result = api.get({
					"url": 'address',
					"uriParams":  uriParams,
					"reqData":  queryParams,
					"sync" : true
				}); 
		
				if (result && result.address) {
					return result.address;
				}

				return null;
			}
		},
		
		getPostcode : function(city, street, no, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (city == undefined || !city ||
				street == undefined || !street ||
				no == undefined || !no 					
				) { 
					callback(0, []); return; 
			}
			
			var queryParams = {
					"city": city,
				    "street":	street,
				    "no":	no
			};
			
			var uriParams = {				
			};

			api.get({
				"url": 'postcode',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data.postcode) },
				"onFailure":  function(data) { callback(null) }
			});			
		},
		
		getPostcodeHint : function(postcode, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (postcode == undefined)			
				 { 
					callback(0, []); return; 
			}			
						
			var uriParams = {
					'postcodePart': postcode
			};
			var queryParams = {};

			api.get({
				"url": 'postcode',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data.postcodes) },
				"onFailure":  function(data) { callback(null) }
			});			
		},		
		
		getStreetHint : function(street, city, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (street == undefined)			
				 { 
					callback(0, []); return; 
			}			
						
			var uriParams = {
					'street': street
			};
			
			var queryParams = {					
			};
			
			if(city) {
				queryParams.city = city;
			}

			api.get({
				"url": 'address_info',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data.addresses) },
				"onFailure":  function(data) { callback(null) }
			});			
		},
		
		getCityHint : function(city, callback) {
			
			if(callback == undefined || !callback) {
				return;	
			}        	
			if (city == undefined)			
				 { 
					callback(0, []); return; 
			}			
						
			var uriParams = {
					'city': city
			};
			var queryParams = {};

			api.get({
				"url": 'address_info',
				"uriParams":  uriParams,
				"reqData":  queryParams,
				"onSuccess":  function(data) { callback(data.addresses) },
				"onFailure":  function(data) { callback(null) }
			});			
		},			
		
		getAddresses : function(postcode, callback, sync) {
			
			if(!sync && (callback == undefined || !callback)) {
				return;	
			}        	
			if (postcode == undefined || !postcode 					
				) { 
                    if(sync) {
                        return null;
                    }
					callback(0, []); return; 
			}
			
            var queryParams = {
            };
			
			var uriParams = {
                "postcode": postcode
			};

            if(!sync) {
                api.get({
                    "url": 'postcode',
                    "uriParams":  uriParams,
                    "reqData":  queryParams,
                    "onSuccess":  function(data) { callback(data.postcode) },
                    "onFailure":  function(data) { callback(null) }
                });
            } else {
                var result = api.get({
                    "url": 'postcode',
                    "uriParams":  uriParams,
                    "reqData":  queryParams
                });

                if(result) {
                    return result;
                }
                return null;
			}				
		}
	};
	
	return pub;
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_api_client.js */

var FriscoApi = function(url) {

	var api = new apiClient(url);
    
    var category_cache = {};
    var category_pending = {};
    
	var pub = {
        /* Rum */
        rumSendLog : function (logFid, logUser, logType, logDomain, logLocation, logTime, logExtra) {
            api.get({
                "url": 'rumgroups',
                "uriParams":  {},
                "reqData": {fid : logFid, user : logUser, type : logType, domain : logDomain, location : logLocation,  time : logTime, extra : logExtra},
                "onSuccess": function() {},
                "onFailure": function() {}});
        },
        /* Sales Manago API */
        smCancelSale : function (userId, year, orderId, cbk) {
            api.del({
                "url": 'smanago',
                "uriParams":  { userId: userId, year: year, orderId: orderId },
                "reqData": {},
                "onSuccess": function(data) { cbk(data); },
                "onFailure": function(data) { cbk(null) }});
        },

        smReportSale : function (userId, year, orderId, cbk) {
            api.post({
                "url": 'smanago',
                "uriParams":  { userId: userId, year: year, orderId: orderId },
                "reqData": {},
                "onSuccess": function(data) { cbk(data); },
                "onFailure": function(data) { cbk(null) }});
        },

        smReinitCart : function (userId, products, cbk) {
	    if (!products)
		products = [];
	    
            api.put({
                "url": 'smanago',
                "uriParams":  {userId: userId},
                "reqData": {products: products},
                "onSuccess": function(data) { cbk(data); },
                "onFailure": function(data) { cbk(null) }});
        },

        smUpdateCart : function (userId, products, cbk) {
            api.post({
                "url": 'smanago',
                "uriParams":  {userId: userId},
                "reqData": {products: products},
                "onSuccess": function(data) { cbk(data); },
                "onFailure": function(data) { cbk(null) }});
        },


        unsubscribeFromMailing : function (userId, hash, email, source, cbk) {
            api.post({
                "url": 'mailing',
                "uriParams":  {userId: userId, hash: hash, email: encodeURIComponent(email), source: source},
                "reqData": {},
                "onSuccess": function(data) { cbk(data); },
                "onFailure": function(data) { cbk(null) }});
        },


        getOrderReview : function (orderUserid, orderYear, orderId, hashacc, cbk) {
            api.get({
                "url": 'orderreview',
                "uriParams":  {orderUserId: orderUserid, orderYear: orderYear, orderId: orderId, hashacc: hashacc},
                "reqData": {},
                "onSuccess": function(data) { cbk(data); },
                "onFailure": function(data) { cbk(null) }});
        },


        fillOrderReview : function (orderUserid, orderYear, orderId, hashacc, data, cbk) {
            api.post({
                "url": 'orderreview',
                "uriParams":  {orderUserId: orderUserid, orderYear: orderYear, orderId: orderId, hashacc: hashacc},
                "reqData": data,
                "onSuccess": function(data) { cbk(data); },
                "onFailure": function(data) { cbk(null) }});
        },

		getPromoProductsConfig : function (callback, blocking) {
			if (!callback && !blocking) 
				return false;

			var params = { 
				"url": 'promoproducts',
				"uriParams":  {},
				"reqData": {},
			};

			if (blocking != undefined && blocking) {
				params["sync"] = true;
				var data = api.get(params);
				if (!result) 
					return null;
				return data;
			} else {
				params["onSuccess"] =  function(data) {  callback(data); };
				params["onFailure"] =  function(data) {  callback(); };
				api.get(params);
			}
		},

        addPollVote : function (votedataid, votedata, email, cbk) {
            api.post({
                "url": 'pollvote',
                "uriParams":  {},
                "reqData": { pollvotedataid : votedataid, pollvotedata: votedata, email: email},
                "onSuccess": function(data) {
                    cbk(data);
                },
                "onFailure": function(data) { cbk(null) }});
        },


		activateTdEmail : function (email, hash, cbk) {
			api.put({
				"url": 'tdemail',
				"uriParams":  {email: encodeURIComponent(email), hash: hash},
				"reqData": { putactivation: 1},
				"onSuccess": function(data) { cbk(data); },
				"onFailure": function(data, resp) { cbk({ data:data, response:resp }); }
			});
		},

        addTdEmail : function (source, email, postcode, cbk) {
            api.post({
                "url": 'tdemail',
                "uriParams":  {},
                "reqData": { source: source, email : email, postcode: postcode},
                "onSuccess": function(data) {
                    cbk(data);
                },
                "onFailure": function(data) { cbk(null) }});
        },

		setUserAddressNo : function (user_id, addressNo, cbk, force) {
			if (!force) force = 0;
			else force = 1;
			
			var queryData = {force : force};
			if (friscoStorage.getShallow('pouId'))
				queryData['pickupPointId'] = friscoStorage.getShallow('pouId');
		
			api.post({
				"url": 'user',
				"uriParams":  { user_id : user_id, addressNo: addressNo},
				"reqData": queryData,
				"onSuccess": function(data) {
					cbk(data);
				},
				"onFailure": function(data) { cbk(null) }});
		},

		getUserSavingPlanDetails : function (userId, cbk) {
			var params = {
				"url": 'savingplan',
				"uriParams": { user_id: userId },
			};
			
			if (cbk) {
				params["onSuccess"] = function(data) { cbk(data); };
				params["onFailure"] = function(data) { cbk(null) };
				api.get(params);
			} else {
				params["sync"] = true;
				var res = api.get(params);
				if (res instanceof Array && res.length == 0) return null;
				else return res;
			}
		},


	chooseSavingPlan: function (userId, params, cbk) {

            api.put({
                "url": 'savingplan',
                "uriParams": { user_id: userId },
                "reqData":  params,
                "onSuccess": function(data) {
                    cbk(data);
                },
                "onFailure": function(data) { cbk(null) }});
        },

        checkupDeliveryAddress : function (queryAddress, cbk) {

            api.get({
                "url": 'delivery',
                "reqData":  {
            			addressgeo : queryAddress
            		    },

                "onSuccess": function(data) {
                    cbk(data);
                },
                "onFailure": function(data) { cbk(null) }});
        },

        loadAllTranslations : function(cbk) {

            api.get({
                "url": 'translation',
                "onSuccess": function(data) {
                    cbk(data.entries);
                },
                "onFailure": function(data) { cbk(null) }});
        },

        markTranslationsMissing : function(missingStrs) {

            api.put({
                "url": 'translation',
                "reqData":  { strs : missingStrs},

                "onSuccess": function() {
                },
                "onFailure": function(data) {}});
        },

        markTranslationMissing : function(missingStr) {

            api.put({
                "url": 'translation',
                "uriParams":  { str : missingStr},

                "onSuccess": function() {
                },
                "onFailure": function(data) {}});
        },

		getUserShoppingLists : function (user_id, page, limit, params, cbk) {
			api.get({
				"url": 'shopping_list',
				"uriParams":  { user_id : user_id },
				"reqData": { 
					page : page || 1, 
					limit: limit || 25, 
					products: (params && params.products ? 1 : null) 
				},

				"onSuccess": function(data) {
					cbk(data.shopping_lists);
				},
				"onFailure": function(data) { cbk(null) }
			});
		},

        createUserShoppingList : function (user_id, list_name, productsList, cbk) {

            if (!cbk) {
                cbk = productsList;
                productsList = null;
            }

            api.post({
                "url": 'shopping_list',
                "uriParams":  { user_id : user_id},
                "reqData": { name : list_name, products : productsList },
                "onSuccess": function(data) {
                    cbk(data.shopping_list);
                },
                "onFailure": function(data) { cbk(null) }});
        },

        updateUserShoppingList : function (user_id, list_id, list_name, cbk) {

            if (!list_id || !user_id || !list_name) {
                throw "Cannot delete user list without id";
            }

            api.put({
                "url": 'shopping_list',
                "uriParams":  { user_id : user_id, shopping_list_id : list_id},
                "reqData": { name : list_name},
                "onSuccess": function(data) {
                    cbk(data.shopping_list);
                },
                "onFailure": function(data) { cbk(null) }});
        },

        getUserShoppingList : function (user_id, list_id, cbk) {

            api.get({
                "url": 'shopping_list',
                "uriParams":  { user_id : user_id, shopping_list_id : list_id},

                "onSuccess": function(data) {
                    cbk(data.shopping_list);
                },
                "onFailure": function(data) { cbk(null) }});
        },

        deleteUserShoppingList : function (user_id, list_id, cbk) {

            if (!list_id || !user_id) {
                throw "Cannot delete user list without id";
            }

            api.del({
                "url": 'shopping_list',
                "uriParams":  { user_id : user_id, shopping_list_id : list_id},

                "onSuccess": function(data) {
                    cbk(true);
                },
                "onFailure": function(data) { cbk(false) }});
        },

        addProduct2ShoppingList : function (user_id, list_id, product_id, product_amount, cbk) {

            if (!user_id || !list_id || !product_id) {
                throw "We cannot work on nulls " + user_id + " " + list_id  + " " + product_id;
            }
            api.post({
                "url": 'shopping_list',
                "uriParams":  { user_id : user_id, shopping_list_id : list_id, productId : product_id},
                "reqData": { amount: product_amount },
                "onSuccess": function(data) {
                    cbk(true);
                },
                "onFailure": function(data) { cbk(false) }});

        },

        deleteProduct2ShoppingList : function(user_id, list_id, product_id, cbk) {

           if (!list_id || !user_id || !product_id) {
                throw "Cannot delete user product from list without id";
            }

            api.del({
                "url": 'shopping_list',
                "uriParams":  { user_id : user_id, shopping_list_id : list_id, productId : product_id},

                "onSuccess": function(data) {
                    if (typeof cbk == "function") cbk(true);
                },
                "onFailure": function(data) { if (typeof cbk == "function") cbk(false) }});
        },

        updateProductInShoppingList : function(user_id, list_id, product_id, product_amount, cbk) {

           if (!list_id || !user_id || !product_id) {
                throw "Cannot delete user product from list without id";
            }

            api.put({
                "url": 'shopping_list',
                "uriParams":  { user_id : user_id, shopping_list_id : list_id, productId : product_id},
                "reqData": { amount: product_amount },
                "onSuccess": function(data) {
                    cbk(true);
                },
                "onFailure": function(data) { cbk(false) }});
        },

		getProfiledBoughtProducts : function(user_id, page, limit, sortArray, filters, cbk) {
			api.get({
				"url": 'product',
				"uriParams":  { user_id : user_id},
				"reqData": { profiled_bought : true , page : page, limit: limit, sort: sortArray || null, filter: filters },
				"onSuccess":  function(data) {
					cbk(data.products);
				},
				"onFailure": function(data) { cbk(null) }});
		},

		getUserBalance : function(user_id, cbk) {
			api.get({
				"url": 'userbalance',
				"uriParams":  { user_id : user_id},
				"onSuccess":  function(data) {
					if (data.balance && data.balance.value != undefined)
					    friscoStorage.setShallow('userBalance', data.balance.value);
					    
					cbk(data.balance);
				},
				"onFailure": function(data) { cbk(null) }});
		},

		getRelatedProducts : function (parent_product_id, callback) {
			api.get({
				"url": 'product',
				"reqData": { parent_product_id : parent_product_id },
				"onSuccess":  function(data) {
					callback(data.products);
				},
				"onFailure": function(data) { callback(null) }});
		},
		
		/** products api **/
		searchProducts : function (search_phrase, categoryIdentifiers, tag_ids, callback, resultLimit, resultPage, sortingArray, fullSearch, no_promo, userId)  {

            if (resultLimit == null || resultLimit == undefined) { resultLimit = 20; }
            
            var queryData = {
				phrase : search_phrase, 
				category_ids : categoryIdentifiers, 
				limit: resultLimit, page: resultPage, 
				sort : sortingArray == undefined ? null : sortingArray,
				dataLimit : fullSearch ? ['categories', 'tags'] : null, 
				tag_ids : (typeof tag_ids == 'object') ? tag_ids: null
			};
			
			var filters = {};
			if (no_promo) {
				filters['promoonly'] = 1;
			}
			queryData['filter'] = filters;
			
			if (userId) {
				queryData['user_id'] = userId;
			}
			
			api.get({
				"url": 'product',
				"reqData": queryData,
				"onSuccess":  function(data) { 
					callback(data.total_found,
							data.products, 
							data.tags ? data.tags[0] : {},
							data.tags ? data.tags[1] : {},
							data.categories,
							data.bought_products ? data.bought_products : [],
                            data.includes_promotions ? true : false);
				},
				"onFailure": function(data) { callback(null) }
			});                
        },
		getCategory : function(categoryId, callback, path, children) {
			api.get({
				"url": 'category',
				"uriParams":  { categoryId : categoryId},
				"reqData":  { children : !!children, path: !!path },
				"onSuccess":  function(data) { callback(data.category); }
			});
        },
        getCachedCategory: function (categoryId, callback) {
            if (category_cache[categoryId])
                return callback(category_cache[categoryId]);
            if (category_pending[categoryId])
                return category_pending[categoryId].push(callback);
            category_pending[categoryId] = [callback];
            pub.getCategory(categoryId, function(data){
                category_cache[categoryId] = data;
                while (callback = category_pending[categoryId].shift())
                    callback(data);
                delete category_pending[categoryId];
            }, true);
        },
        getProduct : function(productId, callback, user_id) {

            var queryData = {};

            if (user_id) {
                queryData['user_id'] = user_id;
            }

            api.get({
				"url": 'product',
                "reqData" : queryData,
				"uriParams":  { productId : productId},
				"onSuccess":  function(data) { callback(data.product); },
				"onFailure":  function(data) { callback(null) }
			});       				
		},
		getProducts : function(productIds, callback, user_id, page, limit, sort, descriptions, shelf_id, multipacks) {

            var queryData = {
                product_id : productIds
            };

            if (page && limit) {

                queryData['page'] = page;
                queryData['limit'] = limit;
            }

            if (user_id) {
                queryData['user_id'] = user_id;
            }

            if (sort) {
                queryData['sort'] = (sort == "exact" ? sort : 1);
            }
            
            if (multipacks)
                queryData['multipacks'] = 1;
            
            if (descriptions)
                queryData['full_desc'] = 1;

            api.get({
				"url": 'product',
				"reqData":  queryData,
				"onSuccess":  function(data) {  callback(data.products,shelf_id); }
			});
		},
		getTags : function(callback) {
	
			return [{name : "tag1"}, {name : "tag2"}];
	
			get('tags', null, {}, callback);
		},


        clearCart : function(callback, blocking) {

            if(!callback && !blocking) {
                return false;
            }

            var params = {
                    "url": 'cart'
            };

            if(blocking != undefined && blocking) {
                params["sync"] = true;
                var result = api.del(params);
                if(!result) {
                    return null;
                }
                return true;
            } else {
                params["onSuccess"] =  function(data) {  callback(true); };
                params["onFailure"] =  function(data) {  callback(); };
                api.del(params);
            }
        },
		getCart : function(callback, blocking) {
			if (!callback && !blocking) {
				return false;
			}
			
			var params = {
				"url": 'cart'
			};
			
			if (blocking != undefined && blocking) {
				params["sync"] = true;
				var result = api.get(params);
				if (!result) {
					return null;
				}
				return result.cart;
			} else {
				params["onSuccess"] =  function(data) {  callback(data.cart); };
				params["onFailure"] =  function(data) {  callback(); };
				api.get(params);
			}
		},
		
		getOrderCart : function(userId, orderId, orderYearId, callback, blocking) {
			if (orderId === undefined || orderYearId === undefined) {
				return undefined;
			}
			
			var uriParams = {
				user_id: userId,
				orderId: orderId,
				year: orderYearId
			};

			var params = {
				"url": 'cart',
				"uriParams": uriParams
			};
			
			if (blocking || callback == undefined) { // treat calls without blocking and cbk set as sync
				params["sync"] = true;
				var result = api.get(params);
				if (!result) {
					return null;
				}
				return result.cart;
			} else {
				params["onSuccess"] =  function(data) {  callback(data.cart); };
				params["onFailure"] =  function(data) {  callback(null); };
				api.get(params);
			}
		},
		
		loadOrderAgain : function(userId, orderId, orderYearId, callback) {
			if (orderId === undefined || orderYearId === undefined) {
				return undefined;
			}
			
			var putParams = {
				user_id: userId,
				orderId: orderId,
				year: orderYearId
			};
			
			var params = {
				"url": 'cart',
				"uriParams": putParams,
// 				"putParams": putParams
			};
			
			if (callback && callback instanceof Function) {
				params["onSuccess"] = function(data) {  callback(data.cart); };
				params["onFailure"] = function(data) {  callback(null); };
				api.put(params);
			} else {
				params["sync"] = true;
				var result = api.put(params);
				if (!result) return null;
				return result.cart;
			}
		},
		
		// SYNC ONLY
		getOrderCartComparison : function(userId, orderId, orderYearId, callback, blocking) {
			if (orderId === undefined) {
				return undefined;
			}
			
			var uriParams = {
				user_id: userId,
				orderId: orderId,
				year: orderYearId,
				compareWithOrder : 1
			};
			
			var params = {
				"url": 'cart',
				"uriParams": uriParams
			};
			
			if (blocking || callback == undefined) {
				params["sync"] = true;
				var result = api.get(params);
				if (!result) {
					return null;
				}
				return result;
			} else {
				params["onSuccess"] =  function(data) {  callback(data); };
				params["onFailure"] =  function(data) {  callback(null); };
				api.get(params);
			}
		},

        addProductAmount2Cart : function(product_id, product_amount, callback) {

            if (product_amount == undefined) { product_amount = 1; }
            
            api.put({
				"url": 'cart',
				"reqData": { type : 'inc', productId : product_id, amount : product_amount },
				"onSuccess":  function(data) {  callback(data.amount, data.cart); }
			});            
        },
        removeProductAmountFromCart : function(product_id, product_amount,  callback) {

            if (product_amount == undefined) { product_amount = 1; }
            api.put({
				"url": 'cart',
				"reqData": { type : 'dec', productId : product_id, amount : product_amount },
				"onSuccess":  function(data) {  callback(data.amount, data.cart); }
			});            
        },
        /**
         * wrong name, its replace
         * @param product_id
         * @param product_amount
         * @param callback
         */
        updateProductInCart : function(product_id, product_amount, callback) {

            api.post({
				"url": 'cart',
				"reqData": { productId : product_id, amount : product_amount },
				"onSuccess":  function(data) {  callback(data.amount, data.cart); }
			});        	
        },
		
		updateProductsInCart : function(products, diffMode, callback) {
			var reqData = { products : products };
			if (diffMode == true)
				reqData['differential'] = true;
			 
			api.put({
				"url": 'cart',
				"reqData": reqData,
				"onSuccess":  function(data) {  callback(data.cart); }
			});
		},

        removeProductFromCart : function (product_id, callback) {

            api.del({
				"url": 'cart',
				"uriParams":  { productId : product_id },
				"onSuccess":  function(data) {  callback(data.amount, data.cart); }
			});        	
        },

        fastsearchTags : function (search_phrase, callback) {

            if (search_phrase == undefined || search_phrase.length == 0) { callback(0, []); return; }

            api.get({
				"url": 'tag',
				"reqData": {phrase : search_phrase, page : 1, limit: 10, type: 101},
				"onSuccess":  function(data) {  callback(null, data.tags); }				
			});            
        },

        /**
         * Searches for categories that have categoryId as it's parent_id, their subcategories, and so on until maxDepth generation are collected.
         * @param categoryId id of category that should be parent to oldest returned categories
         * @param maxDepth how many generations should be returned at max
         * @param callback function(foundCategories)
         */
        getCategoriesTree : function(categoryIds, maxDepth, callback, userId) {

            // if user is not logged in, passed userId will be null - let's make this zero (0)
            console.log('category uid: ', userId);
            if (typeof userId === 'undefined' || !userId || userId === null) {
                userId = 0;
            }

            var depth = maxDepth || 1;
            
            api.get({
				"url": 'category',
				"reqData": { parent_id : categoryIds, depth : depth, user_id: userId },
				"onSuccess":  function(data) {  callback(data.categories); }
			});                  
        },
        
        getDeliveryMethodByPostCode: function(postCode, callback) {
            if(callback == undefined || postCode == undefined) {
            	return false;
            }
        	
        	api.get({
				"url": 'delivery',
				"uriParams": { "postcode": postCode },
				"onSuccess":  function(data) {  callback(data.method); },
				"onFailure":  function(data) {  callback(null); }
			});        	
        },

        getLatelyBoughtProducts: function(userId, callback) {
            if(callback == undefined || userId == undefined) {
            	return false;
            }
        	
        	api.get({
				"url": 'user_products',
				"uriParams": { "user_id": userId },
				"onSuccess":  function(data) {  callback(data.products); },
				"onFailure":  function(data) {  callback(null); }
			});        	
        },
        
        getPaymentsTypesForUser: function(callback, blocking) {
            if(callback == undefined && !blocking) {
            	return false;
            }
        	
            if(!blocking) {
            	api.get({
				    "url": 'payment',
				    "onSuccess":  function(data) {  callback(data.payment_types); },
				    "onFailure":  function(data) {  callback(null); }
			    });        	
            } else {
                var data = api.get({
				    "url": 'payment',
                    "sync": true
			    }); 
                if(data && data.payment_types) {
                    return data.payment_types;
                }       
                return null;
            }
        },
        
		createOrder: function(paymentType, address, pouId, reservationId, voucherId, callback) {
			if (callback == undefined || address == undefined ||
				reservationId == undefined || voucherId === undefined) {
				
				return false;
			}
			
			var bodyData = {
				reservationId: reservationId,
				paymentType: paymentType,
				voucherId: voucherId
			};
			
			if (address === 0 && pouId != null) {
				bodyData['pickupPointId'] = pouId;
				bodyData['pickupPointTs'] = reservationId/1000;
				bodyData['reservationId'] = 0;
			}
			
			if (typeof address == 'object') {
				bodyData['addressNo'] = 0;
				bodyData['addressData'] = address;
			} else {
				bodyData['addressNo'] = address;
			}
			
			api.post({
				"url": 'order',
				"reqData": bodyData,
				"onSuccess":  function(data) { callback(data); },
				"onFailure":  function(data, errors) {  callback(null, errors); }
			});
		},

        payOrder: function(userId, orderId, orderYear, paymentType, callback, blocking) {
        	
            if((!blocking && callback == undefined) || orderId == undefined ||
            	orderYear === undefined) {            	
            	return false;
            }        	
       	
            var uriParams = {
                user_id: userId,
        		orderId: orderId,
                year: orderYear
            };
            
            var reqData = {
                paymentType: paymentType
            };
            
            if(!blocking) {
                api.post({
				    "url": 'payment',
				    "uriParams": uriParams,
                    "reqData" : reqData,
				    "onSuccess":  function(data) {  callback(data); },
				    "onFailure":  function(data) {  callback(null); }
			    });            	
            } else {
                var data = api.post({
				    "url": 'payment',
				    "uriParams": uriParams,
                    "reqData": reqData,
                    "sync" : true
			    });            	
                if(data) {
                    return data;
                }
                return null;

            }
        },

		updateOrder: function(userId, orderId, orderYear, paymentType, address, pouId, reservationId, voucherId, callback) {
			
			if (callback == undefined) {
				return false;
			} 
			
			var bodyData = {};
			var uriParams = {
				user_id: userId,
				orderId : orderId,
				year : orderYear
			};
			
			if (reservationId !== undefined)
				bodyData.reservationId = reservationId;
			
			if (paymentType !== undefined)
				bodyData.paymentType = paymentType;
			
			if (voucherId !== undefined)
				bodyData.voucherId = voucherId;
			
			if (address === 0 && pouId != null) {
				bodyData['pickupPointId'] = pouId;
				bodyData['pickupPointTs'] = reservationId/1000;
				bodyData['reservationId'] = 0;
			}
			
			if (typeof address == 'object') {
				bodyData['addressNo'] = 0;
				bodyData['addressData'] = address;
			} else {
				bodyData['addressNo'] = address;
			}
			
			api.put({
				"url": 'order',
				"uriParams": uriParams,
				"reqData": bodyData,
				"onSuccess":  function(data) {  callback(data); },
				"onFailure":  function(data, errors) {  callback(null, errors); }
			});
		},

		updateOrderStatus: function(userId, orderId, orderYear, status, callback) {
			if (callback == undefined) {
				return false;
			}
			
			var bodyData = {status: status};
			var uriParams = {
				user_id: userId,
				orderId : orderId,
				year : orderYear
			};
			
			api.post({
				"url": 'order',
				"uriParams": uriParams,
				"reqData": bodyData,
				"onSuccess":  function(data) {  callback(data); },
				"onFailure":  function(data) {  callback(null); }
			}); 
		},

		getOrder: function(userId, orderId, orderYear, callback, blocking, fields) {
			if (!fields) {
				fields = null;
			}

			if (!userId  || !orderId || !orderYear) {
				throw "Cannot load order without all parameters";
			}
			
			if (callback == undefined && !blocking) {
				return false;
			}
				
			var uriParams = {
				'user_id': userId,
				'orderId': orderId,
				'year': orderYear
			};

			var params = {
				url: 'order',
				uriParams: uriParams,
				reqData : { fields : fields }
			};

			if (blocking != undefined && blocking) {
				params["sync"] = true;
				var result = api.get(params);
				if (!result) {
					return null;
				}
				result.order.octoberContest = result.octoberContest;
				return result.order;
			} else {
				params["onSuccess"] = function(data) {  callback(data.order); };
				params["onFailure"] = function(data) {  callback(null); };
				api.get(params);
			}
		},

		getLastEditableOrder : function(userId, callback, blocking) {
			if (callback == undefined && !blocking) {
				return false;
			}

			var queryData = {
				'last' : true
			};

			if (!blocking) {
				api.get({
					"url": 'order',
					"uriParams" : { user_id : userId },
					"reqData": queryData,
					"onSuccess":  function(data) {  callback(data.order); },
					"onFailure":  function(data) {  callback(null); }
				});
			} else {
				var data = api.get({
					"url": 'order',
					"uriParams" : { user_id : userId },
					"reqData": queryData,
					"sync": true
				});
				if(data && data.order) {
					return data.order;
				}
				return null;
			}
		},
		
		getOrderList: function(userId, page, limit, callback, blocking) {
			if (callback == undefined && !blocking) {
				return false;
			}
				
			var queryData = {};
			
			if (page) {
				queryData['page'] = page;
			}
			if (limit) {
				queryData['limit'] = limit;
			}
			
			if (!blocking) {
				api.get({
					"url": 'order',
					"uriParams" : { user_id : userId },
					"reqData": queryData,
					"onSuccess":  function(data) {  callback(data.orders); },
					"onFailure":  function(data) {  callback(null); }
				});
			} else {
				var data = api.get({
					"url": 'order',
					"uriParams" : { user_id : userId },
					"reqData": queryData,
					"sync": true
				});
				if (data && data.orders) {
					return data.orders;
				}
				return null;
			}
		},

		createUser : function(userData, callback, failed) {
			if (callback == undefined || !callback) {
				return;
			}

			if (userData == undefined || !userData) {
				callback(0, []); return;
			}

			var uriParams = {};
			var bodyParams = {
				user: userData
			};

			if (bodyParams.user.regtype) {
				bodyParams.regtype = bodyParams.user.regtype;
				delete bodyParams.user.regtype;
			}

			api.post({
				url : 'user',
				uriParams : uriParams,
				reqData   : bodyParams,
				onSuccess : callback,
				onFailure : failed
			});
		},
		
		getUser: function(userId, callback, blocking) {
			if ((callback == undefined && !blocking) || userId == undefined) {
				return false;
			}

			if (!blocking) {
				api.get({
					"url": 'user',
					"uriParams": { "user_id": userId },
					"onSuccess":  function(data) {  callback(data.user); },
					"onFailure":  function(data) {  callback(null); }
				});
			} else {
				var data = api.get({
					"url": 'user',
					"uriParams": { "user_id": userId },
					"sync" : true
				});
				if (data && data.user) {
					return data.user;
				}
				return null;
			}
		},
		
		updateUser : function(userId, userData, callback) {
			if (callback == undefined || !callback || !userId) {
				return;
			}

			if (userData == undefined || !userData) {
				callback(0, []); return;
			}

			var uriParams = {
				user_id: userId
			};
			var bodyParams = {
				user: userData
			};

			api.put({
				url : 'user',
				uriParams : uriParams,
				reqData   : bodyParams,
				onSuccess : function(data) { callback(data.user); },
				onFailure : function(data) { callback(null); }
			});
		},
		
		getOrderDeliveryPrice : function(userId, address_no, callback) {
			if (callback == undefined || !userId || address_no === undefined || address_no === null) {
				return false;
			}
				
			var queryData = {};
			if (friscoStorage.getShallow('pouId'))
				queryData['pickupPointId'] = friscoStorage.getShallow('pouId');
			
			var uriParams = {
				'user_id' : userId,
				'addressNo' : address_no
			};
			
			api.get({
				"url": 'delivery',
				"reqData": queryData,
				"uriParams": uriParams,
				"onSuccess":  function(data) {  callback(data.price); },
				"onFailure":  function(data) {  callback(null); }
			});
		},

		getMinimalOrderValueForUser : function(userId, address_no, callback) {
			if(callback == undefined || !userId || address_no === undefined || address_no === null) {
				return false;
			} 
				
			var queryData = {
				minval: 1
			};
			
			if (friscoStorage.getShallow('pouId'))
				queryData['pickupPointId'] = friscoStorage.getShallow('pouId');
			
			var uriParams = {
					'user_id' : userId,
					'addressNo' : address_no
			};
			
			api.get({
				"url": 'delivery',
				"reqData": queryData,
				"uriParams": uriParams,
				"onSuccess":  function(data) {  callback(data.price); },
				"onFailure":  function(data) {  callback(null); }
			});          	
		},

        getDeliveryPrices : function(curUserId, callback, sync) {
            if ((callback == undefined)&&(!sync)) {
            	return false;
            }        	
                        
            var queryData = {            		
            };

            var uriParams = {
            		'prices' : 1,
            		'user_id' : curUserId,
            };
            
            if (!sync) {
        	api.get({
				"url": 'delivery',
				"reqData": queryData,
				"uriParams": uriParams,
				"onSuccess":  function(data) {  callback(data.prices); },
				"onFailure":  function(data) {  callback(null); }
			});             	
	    } else {

        	result = api.get({
				"url": 'delivery',
				"reqData": queryData,
				"uriParams": uriParams,
                		"sync" : true
		});
		
                if(result && typeof result == 'object') {
    	            return result.prices;
		}
		return null;
	    }
        },

		getDeliveryMethodForUserAddressedCart : function(userId, addressNo, delivery_ts, callback, blocking) {
			if ((callback == undefined && !blocking) || !userId || addressNo === undefined) {
				return false;
			}
				
			var queryData = {
				delivery_date : delivery_ts
			};
			
			var uriParams = {
				'user_id' : userId,
				'addressNo' : addressNo
			};
			
			if (friscoStorage.getShallow('pouId')) {
				uriParams['addressNo'] = friscoStorage.getShallow('pouId');
				queryData['pickupPoint'] = true;
			}
			
			if(!blocking) {
				api.get({
					"url": 'delivery_method',
					"reqData": queryData,
					"uriParams": uriParams,
					"onSuccess":  function(data) {  callback(data); },
					"onFailure":  function(data) {  callback(null); }
				});
			} else {
				var result = api.get({
					"url": 'delivery_method',
					"reqData": queryData,
					"uriParams": uriParams,
					"sync" : true
				});
				if(result && typeof result == 'object') {
					return result;
				}
				return null;
			}
		},

        getVoucher : function(userId, voucherId, callback) {
            if(callback == undefined || !voucherId) {
            	return false;
            }        	
            	
            var queryData = {            		
            };

            var uriParams = {
            		'voucherNumber' : voucherId,
                    'user_id': userId
            };
            
            api.get({
				"url": 'voucher',
				"reqData": queryData,
				"uriParams": uriParams,
				"onSuccess":  function(data) {  callback(data.voucher); },
				"onFailure":  function(status, msg) {  callback(null, status, msg); }
			}); 
        },

		getVoucherCampaign : function(campaignId, callback) {
			api.get({
				"url": 'vouchercampaign',
				"uriParams": {voucherCampaignId: campaignId},
				"onSuccess":  function(data) {  callback(data.voucher); },
				"onFailure":  function(data) {  callback(null); }
			}); 
		},
        
        getGifts : function(callback) {
            api.get({
                "url": "gifts",
                "onSuccess": callback
            })
        },

        putGiftEmail: function(data, callback) {
            api.put({
                "url": "gifts",
                "reqData": data,
                "onSuccess": callback,
                "onFailure": callback
            });
        },

        postGiftChoice: function(data, callback) {
            api.post({
                "url": "gifts/email," + data.email + "/hash," + data.hash + "/giftId," + data.giftId,
                "onSuccess": callback,
                "onFailure": callback
            });
        },

        getTrainingParts: function(id, callback) {
            api.get({
                "url": "training/partsForTrainingId," + id,
                "onSuccess": callback,
                "onFailure": callback
            });
        },

        getTrainingPart: function(trainingId, partId, callback) {
            api.get({
                "url": "training/trainingId," + trainingId + "/partno," + partId,
                "onSuccess": callback,
                "onFailure": callback
            });
        },

		getRecommendationConf: function(callback) {
			api.get({
				"url": 'recommend',
				"onSuccess": function(data) { callback(data.configuration); },
				"onFailure": function(data) { callback(null); }
			});
		},
		
		sendRecommendation: function(emails, message, callback) {
			api.post({
				"url": 'recommend',
				"reqData": { emails: emails, comment: message},
				"onSuccess": function(data) { callback(data); },
				"onFailure": function(data, msg) { callback(data, msg); }
			});
		},
		
		sendOctoberContest: function(order, message, callback) {
			api.post({
				"url": 'octobercontest',
				"reqData": { orderId: order.order_id, year: order.year, comment: message},
				"onSuccess": function(data) { callback(data); },
				"onFailure": function(data) { callback(null); }
			});
		},
		
		sendMailToSupport : function(email, subject, message, callback) {
			if (!email || !subject || !message) {
				callback(null);
				return false; 
			}
			
			api.post({
				"url": 'support',
				"reqData": { email: email, subject: subject, message: message},
				"onSuccess": function(data) { callback(data); },
				"onFailure": function(data) { callback(null); }
			});
		},
		
		cms: function(category, container, callback, sort, numeric, dir) {
			var reqData = {
				cmsContainerCategory: category,
				cmsType: 0,
				cmsContainerName: container || 0,
				cmsContainerStart: 0,
				cmsContainerEnd: 0
			};
			
			if (sort) {
				reqData.cmsOrderBy = sort;
				if (numeric)
					reqData.cmsOrderNumeric = 1;
				if (dir)
					reqData.cmsOrderSort = dir;
			}
			
			api.get({
				"url": 'cmsgroups',
				"reqData": reqData,
				"onSuccess": function(data) { callback(data); },
				"onFailure": function(data) { callback(null); }
			});
		},

        getCampaignProducts: function(campaignName, callback) {
            api.get({
                url: 'promoproducts',
                uriParams: {campaignName: campaignName},
                reqData: {},
                onSuccess: function(data) {
                    callback(data);
                },
                onFailure: function(data) {
                    callback(data);
                }
            });
        }
	};

	return pub;
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/fablo_api_client.js */
var FabloApi = function(url) {

	var api = new apiClient(url);
	
	var pub = {
		getRecommendations : function(user_id, tracking_id, results_num, params, callback, blocking) {
			if (!callback && !blocking) {
				return false;
			}
			
			var reqData = {
				"user": user_id,
				"tracking-id" : tracking_id,
				"results": results_num,
				"attributes": params,
				"_": new Date().getTime()
			};
			
			var params = {
				"useJSONP": "true",
				"url": 'recommendations/recently-visited',
				"reqData" : reqData
			};
			
			if (blocking != undefined && blocking) {
				params["sync"] = true;
				var result = api.get(params);
				if (!result) {
					return null;
				}
				return result.products.results;
			} else {
				params["onSuccess"] =  function(data) {  callback(data.products.results); };
				params["onFailure"] =  function(data) {  callback([]); };
				api.get(params);
			}
		},
		getPromoProducts : function(prefilter, user_id, tracking_id, start, results_num, category, attrs, sort, callback, blocking) {
			if (!callback && !blocking) {
				return false;
			}
			
			var reqData = {
				"user": user_id,
				"tracking-id" : tracking_id,
				"start": start,
				"results": results_num,
				"return": "{}",
				"weak-sort": "promoorder",
				"sort": sort,
				"prefilter": prefilter + "&&status=0||2&&acc"+FabloConfig.userGroup+"=1",
				"category": category,
				"attributes": attrs,
				"_": new Date().getTime()
			};
			
			var params = {
				"useJSONP": "true",
				"url": 'products/query',
				"reqData" : reqData
			};
			
			if (blocking != undefined && blocking) {
				params["sync"] = true;
				var result = api.get(params);
				if (!result) {
					return null;
				}
				return result.products.results;
			} else {
				params["onSuccess"] =  function(data) {  callback(data.products); };
				params["onFailure"] =  function(data) {  callback([]); };
				api.get(params);
			}
		},
	};

	return pub;
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/zendesk_api_client.js */
var ZendeskApi = function(url, proxy_url) {

	var api = new apiClient(url);
	// In order to avoid Zendesk CORS problems we proxy requests through Frisco api.
	var api_proxy = new apiClient(proxy_url);
	
	var memoize = function(method){
		var cache = {}, pending = {};
		return function(parameter, callback){
			if (cache[parameter])
				return callback(cache[parameter]);
			if (pending[parameter]) {
				return pending[parameter].push(callback);
			}
			pending[parameter] = [callback];
			pub[method](parameter, function(data){
				cache[parameter] = data;
				while (callback = pending[parameter].pop())
					callback(data);
				delete pending[parameter];
			});
		};
	};

	var pub = {
		getForums : function(callback) {
			api.get({
				"url": 'forums.json',
				"noCustomHeaders": true,
				"onSuccess":  function(data) { callback(data.forums); },
				"onFailure":  function(data) { callback([]); },
			});
		},
		getForum : function(forumId, callback) {
			api.get({
				"url": 'forums/'+forumId+'.json',
				"noCustomHeaders": true,
				"onSuccess":  function(data) { callback(data.forum); },
				"onFailure":  function(data) { callback(null); },
			});
		},
		getCachedForum: memoize('getForum'),
		getCategory : function(id, callback) {
			api.get({
				"url": 'categories/'+id+'.json',
				"noCustomHeaders": true,
				"onSuccess":  function(data) { callback(data.category); },
				"onFailure":  function(data) { callback(null); },
			});
		},
		getTopics : function(forumId, callback) {
			api.get({
				"url": 'forums/'+forumId+'/topics.json',
				"noCustomHeaders": true,
				"onSuccess":  function(data) { callback(data.topics); },
				"onFailure":  function(data) { callback([]); },
			});
		},
		getCachedTopics: memoize('getTopics'),
		getTopic : function(topicIds, callback) {
			api.get({
				"url": 'topics/'+topicIds+'.json',
				"noCustomHeaders": true,
				"onSuccess":  function(data) { callback(data.topic); },
				"onFailure":  function(data) { callback(null); },
			});
		},
		search : function(query, callback) {
			api.get({
				"url": 'portal/search.json',
				"reqData": {query: "type:topic " + (query || "")},
				"noCustomHeaders": true,
				"onSuccess":  function(data) { callback(data.results); },
				"onFailure":  function(data) { callback([]); },
			});
		},
		submitRequest : function(email, topic, body, callback) {
			api_proxy.post({
				"url": 'submitrequest,1/',
				"reqData": {email: email, subject: topic, body: body},
				"noCustomHeaders": true,
				"onSuccess":  function(data) { callback(data); },
				"onFailure":  function(code, msg) { callback(null, msg); },
			});
		},
	};

	return pub;
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_api_manager.js */
var FriscoApiManager = {

    FABLO_CLIENT        : 'fablo',
    SHOP_CLIENT         : 'shop',
    USERS_CLIENT        : 'users',
    RESERVATIONS_CLIENT : 'reservations',
    ZENDESK_CLIENT      : 'zendesk',

    clients : {},

    getShopApiClient : function() {
        ANZ(this.clients[this.SHOP_CLIENT]);
        return this.clients[this.SHOP_CLIENT];
    },

    getUsersApiClient : function() {
        ANZ(this.clients[this.USERS_CLIENT]);
        return this.clients[this.USERS_CLIENT];
    },

    getReservationsApiClient : function() {
        ANZ(this.clients[this.RESERVATIONS_CLIENT]);
        return this.clients[this.RESERVATIONS_CLIENT];
    },

    getFabloApiClient : function() {
        ANZ(this.clients[this.FABLO_CLIENT]);
        return this.clients[this.FABLO_CLIENT];
    },

    getZendeskApiClient : function() {
        ANZ(this.clients[this.ZENDESK_CLIENT]);
        return this.clients[this.ZENDESK_CLIENT];
    },

    init : function(clientsMap) {
        AIO(clientsMap);
        this.clients = clientsMap;
    }
};


var apis = {};
apis[FriscoApiManager.SHOP_CLIENT] = new FriscoApi(CONFIG.URL_API_FRISCO);
apis[FriscoApiManager.USERS_CLIENT] = new FriscoUsersApi(CONFIG.URL_API_USERS);
apis[FriscoApiManager.RESERVATIONS_CLIENT] = new FriscoReservationsApi(CONFIG.URL_API_RESERVATIONS);
apis[FriscoApiManager.FABLO_CLIENT] = new FabloApi(CONFIG.URL_API_FABLO);
apis[FriscoApiManager.ZENDESK_CLIENT] = new ZendeskApi(CONFIG.URL_API_ZENDESK, CONFIG.URL_API_FRISCO + '/zendesk');

FriscoApiManager.init(apis);

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco_storage_routines.js */
(function() {
	var apiUsers = FriscoApiManager.getUsersApiClient();
	var apiReservations = FriscoApiManager.getReservationsApiClient();
	var api = FriscoApiManager.getShopApiClient();
	var loggedUserId = session.user_id;
	
	var RESERVATIONS_LIST_WIDTH = 3600 * 24 * 14; // 2weeks
	
	var shopId = 0;
	
	var getDayIndex = function(dateObj) {
		var dateN = friscoHelpers.adjustDateToGMT(dateObj);
		return friscoHelpers.getNamedDayOfWeek(dateN.getDay()) + ", " + dateN.getDate().toString() + " " + friscoHelpers.getGenitiveNamedMonth(dateObj.getMonth() + 1);
	};
	
	var getNumericDayIndex = function(dateObj) {
// 		var dateN = friscoHelpers.adjustDateToGMT(dateObj);
		return friscoHelpers.timestamp2day(dateObj);
	};

	
	/** deliveryMethod  GETTER / SETTER **/
	var getterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		var curAddressNo = friscoStorage.get('checkoutAddressNo');
		var deliveryReservation = friscoStorage.getShallow('deliveryDate');
		var windowId = deliveryReservation  == null ? null : ( typeof deliveryReservation == "object" ? deliveryReservation.start_at : deliveryReservation);

		if (!curAddressNo || curAddressNo == undefined) {
			// try to get it from user's profile
			var curUserProfile = friscoStorage.get('userProfile');
			if (curUserProfile && curUserProfile.delivery_address_no)
				curAddressNo = curUserProfile.delivery_address_no;
		} // if (!curAddressNo)
	
		var _eventSender = customEventSender != undefined ? customEventSender : 'frisco_storage_deliveryMethod_getter';
		if (!isSynchronousCall) {
			api.getDeliveryMethodForUserAddressedCart(loggedUserId, curAddressNo, windowId, function(data) {
				if (data != undefined) {
					// firing event
					friscoStorage.setShallow('deliveryMethod', data);
					
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback(data);
					}
				} else {
					DBG('API_GETTER', 'DELIVERYMETHOD_DATA', 'Api error for getting delivery method information');
					friscoStorage.setShallow('deliveryMethod', null);
					
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback();
					}
				}
			});
		} else {
				var data = api.getDeliveryMethodForUserAddressedCart(loggedUserId, curAddressNo, windowId, null, true);
			friscoStorage.setShallow('deliveryMethod', data);
			return data;
		}
	};
		
	var setterFunc = function(key, setValue) {
		friscoStorage.setShallow('deliveryMethod', setValue);
	};
	
	friscoStorage.bindDataSourceGetter('deliveryMethod', getterFunc);
	friscoStorage.bindDataSourceSetter('deliveryMethod', setterFunc);
	
	
	/** SAVING PROGRAM GETTER / SETTER **/
	var getterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		var _eventSender = customEventSender != undefined ? customEventSender : 'frisco_storage_savingplan_getter';
		if (!isSynchronousCall) {
			api.getUserSavingPlanDetails(loggedUserId, function(data) {
				if (data != undefined) {
					// firing event
					friscoStorage.setShallow('savingPlan', data);
					
					// firing follower callback
					if(typeof followerCallback == 'function') {
						followerCallback(data);
					}
				} else {
					DBG('API_GETTER', 'SAVINGPLAN_DATA', 'Api error for getting savingplan informations');
					friscoStorage.setShallow('savingPlan', null);
					
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback(null);
					}
				}
			});
		} else {
			var data = api.getUserSavingPlanDetails(loggedUserId);
			friscoStorage.setShallow('savingPlan', data != undefined ? data : null);
			return data;
		}
	};
	
	var setterFunc = function(key, setValue) {
		// firing event
		friscoStorage.setShallow('savingPlan', setValue);
		//friscoEvents.fire('frisco_storage_cart_getter', friscoEvents.FEV_CART_DATA_CHANGED, setValue);    		
	};
	
	friscoStorage.bindDataSourceGetter('savingPlan', getterFunc);
	friscoStorage.bindDataSourceSetter('savingPlan', setterFunc);
	
	/** CART DATA GETTER **/
	var _parseCartById = function(cartData) {
		var cartById = {};
		$.each(cartData.entries, function(index) {
			cartById[this.product_id] = this.amount;
		});
		return cartById;
	};
	
	var _parseCartDiff = function(oldCart, newCart) {
		if (oldCart == null)
			return {};
		if (oldCart.version == newCart.version)
			return {};
		
		var diff = {};
		for (var e in newCart.entries) {
			var ocAmount = (oldCart.entries[e] != undefined ? oldCart.entries[e].amount : 0);
			if (newCart.entries[e].amount - ocAmount != 0)
				diff[newCart.entries[e].product_id] = {
					'diff' : newCart.entries[e].amount - ocAmount,
					'old' : ocAmount,
					'new' : newCart.entries[e].amount
				};
			delete oldCart.entries[e];
		}
		for (var e in oldCart.entries) { // deleted in new cart
			var ncAmount = (newCart.entries[e] != undefined ? newCart.entries[e].amount : 0);
			diff[oldCart.entries[e].product_id] = {
				'diff' : ncAmount - oldCart.entries[e].amount,
				'old' : oldCart.entries[e].amount,
				'new' : ncAmount
			};
		}
		return diff;
	};
	
	var getterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		var _eventSender = customEventSender != undefined ? customEventSender : 'frisco_storage_cart_getter';
		if (!isSynchronousCall) {
			api.getCart(function(cart_data) {
				if (cart_data != undefined) {
					var lastSyncro = friscoStorage.get('cartData_syncro');
					if (lastSyncro && lastSyncro > cart_data["syncro"]) {
						return;
					}
					friscoStorage.set('cartData_syncro', cart_data["syncro"]);
					var oldCart = friscoStorage.getShallow('cartData');
					friscoStorage.setShallow('cartData', cart_data);
// 					friscoStorage.setShallow('cartById', _parseCartById(cart_data));
					friscoStorage.setShallow('cartDiff', _parseCartDiff(oldCart, cart_data));
					
					// fire this always, intended use: bind *ONE TIME* callbacks to this whenever there's a need 
					// to sync cart *NOT* upon user triggered action (eg. site got focus); do full content reload then
					friscoEvents.fire(_eventSender, friscoEvents.FEV_CART_DATA_ARRIVED, { 'entryCart' : cart_data, 'oldCart' : oldCart });
					
					// firing follower callback or event; use cases:
					// if we got follower, that would mean it will take care of what to do with the data,
					// otherwise use event which is more generic solution
					if (typeof followerCallback == 'function') {
						followerCallback(cart_data);
					} else {
						// conditional firing event when data has changed
						if (oldCart == null) {
// 							friscoEvents.fire(_eventSender, friscoEvents.FEV_CART_INVALIDATED, { 'entryCart' : cart_data, 'oldCart' : oldCart });
						} else if (oldCart && oldCart.version != cart_data.version) {
							friscoEvents.fire(_eventSender, friscoEvents.FEV_CART_DATA_CHANGED, { 'entryCart' : cart_data, 'oldCart' : oldCart });
						}
						
					}
				} else {
					DBG('API_GETTER', 'CART_DATA', 'Api error for getting cart');
					friscoStorage.setShallow('cartData', null);
// 					friscoStorage.setShallow('cartById', {});
					friscoStorage.setShallow('cartDiff', null);
					
					friscoEvents.fire(_eventSender, friscoEvents.FEV_CART_DATA_ARRIVED, { 'entryCart' : cart_data, 'oldCart' : oldCart });
					
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback(cart_data);
					}
				}
			});
		} else {
			var cart_data = api.getCart(null, true);
			var lastSyncro = friscoStorage.get('cartData_syncro');
			if (lastSyncro && lastSyncro > cart_data["syncro"]) {
				return friscoStorage.getShallow('cartData');
			}
			
			friscoStorage.set('cartData_syncro', cart_data["syncro"]);
			var oldCart = friscoStorage.getShallow('cartData');
			friscoStorage.setShallow('cartData', cart_data);
// 			friscoStorage.setShallow('cartById', _parseCartById(cart_data));
			friscoStorage.setShallow('cartDiff', _parseCartDiff(oldCart, cart_data));
			
			friscoEvents.fire(_eventSender, friscoEvents.FEV_CART_DATA_ARRIVED, { 'entryCart' : cart_data, 'oldCart' : oldCart });
			
			return cart_data;
		}
	};
		
	var setterFunc = function(key, setValue) {
		// firing event
		var oldCart = friscoStorage.getShallow('cartData');
		friscoStorage.setShallow('cartData', setValue);
		friscoStorage.setShallow('cartById', _parseCartById(setValue));
		friscoStorage.setShallow('cartDiff', _parseCartDiff(oldCart, setValue));
		friscoEvents.fire('frisco_storage_cart_setter', friscoEvents.FEV_CART_DATA_CHANGED, { 'entryCart' : setValue, 'oldCart' : oldCart });
	};
	
	friscoStorage.bindDataSourceGetter('cartData', getterFunc);
	friscoStorage.bindDataSourceSetter('cartData', setterFunc);
	
	
	/** WINDOWS DATA GETTER **/
	var _wParseFunc = function(windowsList) {
		// mine those fucktards ;!
		var wDaysList = [];
		var wDays2Window = {};
		var wWindows = {};

		var usedDays = {};
		if (typeof windowsList == undefined || typeof windowsList["windows"] == undefined) {
			return false;
		}
		
		$.each(windowsList.windows, function(index) {
			var startDate = new Date(this.start_at * 1000);
			var dayIndex = getNumericDayIndex(startDate); // we have to pass unadjusted date to this method
			startDate = friscoHelpers.adjustDateToGMT(startDate);
			
			var endDate = friscoHelpers.adjustDateToGMT(new Date(this.end_at * 1000));
			
			if (typeof usedDays[dayIndex] == 'undefined') {
				usedDays[dayIndex] = 1;
				wDaysList.push(dayIndex);
			}
			
			if (typeof wDays2Window[dayIndex] == "undefined") {
				wDays2Window[dayIndex] = [];
			}
			
			wDays2Window[dayIndex].push(this.start_at);
			var window_obj = JSON.parse(JSON.stringify(this));
			var windowIndex = friscoHelpers.numCplTo2(startDate.getHours().toString()) + ":"
			+ friscoHelpers.numCplTo2(startDate.getMinutes().toString()) + " - "
			+ friscoHelpers.numCplTo2(endDate.getHours().toString()) + ":"
			+ friscoHelpers.numCplTo2(endDate.getMinutes().toString());
			window_obj.windowIndex = windowIndex;
			window_obj.dayIndex = dayIndex;
			wWindows[this.start_at] = window_obj;
		});
		
		friscoStorage.setShallow('windows_DaysList', wDaysList);
		friscoStorage.setShallow('windows_Days2Window', wDays2Window);
		friscoStorage.setShallow('windows_Windows', wWindows);
	}
	
	/* getter for windows */
	var getterFunc = function(isSynchronousCall, followerCallback, customEventSender, otherData) {
		var _eventSender = customEventSender != undefined ? customEventSender : 'frisco_storage_windows_getter'; 
		var offsetEnd   = 0;
		var offsetStart = 0;
		
		if (otherData && otherData.offsetEnd && otherData.offsetStart) {
			offsetEnd = otherData.offsetEnd;
			offsetStart = otherData.offsetStart;
		} else {
			offsetStart =  friscoHelpers.adjustDateToGMT( new Date() );
			
			var curMonth = (otherData && otherData.month && otherData.month>=(offsetStart.getMonth()+1) && otherData.month <= 12)?(otherData.month-1):offsetStart.getMonth();
			if (curMonth != offsetStart.getMonth()) {
				offsetStart = new Date( offsetStart.getFullYear(), curMonth, 1, 0, 0, 0, 0 );
			} else {
				offsetStart = new Date( offsetStart.getFullYear(), curMonth, offsetStart.getDate(), 0, 0, 0, 0 );
			}
			
			var curDate = new Date();
			var lastDayOfMonth = new Date( curDate.getFullYear(), curMonth + 1, 0, 0, 0, 0, 0 );
			
			var curYear = curDate.getFullYear();
			if ((curMonth+1) == 12) curYear++;
			curMonth = (curMonth+1)%12;
			
			offsetEnd = friscoHelpers.adjustDateToGMT(new Date( curYear, curMonth, lastDayOfMonth.getDate(), 23, 59, 0, 0) );
		}

		offsetStart = Math.floor( offsetStart.getTime() / 1000);
		offsetEnd = Math.floor( offsetEnd.getTime() / 1000); 

		var windowMerger = function(newWindowsList) {
			if (Object.equals(newWindowsList, friscoStorage.getShallow('windowsList'), 4)) {
				DBG('API_GETTER', 'Old windows list gotten, no refresh');
				return newWindowList;
			}
			
			friscoStorage.setShallow('windowsList', newWindowsList);
			_wParseFunc(newWindowsList);
			
			// firing event
			friscoEvents.fire(_eventSender, friscoEvents.FEV_WINDOWS_DATA_CHANGED, newWindowsList);
			return newWindowsList;
		};
			
		if (isSynchronousCall) {
			var windows = apiReservations.getWindowList(shopId, offsetStart, offsetEnd, null, true) || [];
			if (!windows) { throw "Cannot get windows"; }
			return windowMerger(windows);
		} else {
			apiReservations.getWindowList(shopId, offsetStart, offsetEnd, function(windows) {
				var windowsList = null;
				if (windows != undefined) {
					windowsList = windowMerger(windows);
				} else {
					DBG('API_GETTER', 'WINDOWS_LIST', 'Api error for getting windows list');
					friscoStorage.setShallow('windowsList', null);
				}
				
				// firing follower callback
				if(typeof followerCallback == 'function') {
					followerCallback(windowsList);
				}
			});
		}
	};
	
	friscoStorage.bindDataSourceGetter('windowsList', getterFunc);
	
	
	/* getter for days */
	var getterFunc = function(isSynchronousCall, followerCallback, customEventSender, otherData) {
		var _eventSender = customEventSender != undefined ? customEventSender : 'frisco_storage_days_getter';
		
		var offsetStart = friscoHelpers.adjustDateToGMT( new Date(otherData.year, otherData.month - 1, 1, 0, 0, 0) );
		if (otherData.month != (offsetStart.getMonth() + 1)) {
			offsetStart = new Date( offsetStart.getFullYear(), otherData.month - 1, 1, 0, 0, 0, 0 );
		} else {
			offsetStart = new Date( offsetStart.getFullYear(), offsetStart.getMonth(), offsetStart.getDate(), 0, 0, 0, 0 );
		}
		
		var offsetEnd = 0;
		if (offsetStart.getMonth() == 11) {
			offsetEnd = friscoHelpers.adjustDateToGMT(new Date(otherData.year + 1, 0, 1, 0, 0, 0, 0) );
		} else {
			offsetEnd = friscoHelpers.adjustDateToGMT(new Date(otherData.year, otherData.month, 1, 0, 0, 0, 0));
		}
		
		offsetStart = Math.floor( offsetStart.getTime() / 1000);
		offsetEnd = Math.floor( offsetEnd.getTime() / 1000);
		
		var dayMerger = function(newDaysList) {
			if (Object.equals(newDaysList, friscoStorage.getShallow('daysList'), 4)) {
				DBG('API_GETTER', 'Old windows list gotten, no refresh');
				return newDaysList;
			}
			
			// apiReservations.getDayList(0, d.getTime() / 1000, d.getTime()/1000 + 3600 * 24 * 30, function() {});
			var avDaysList = {};
			$.each(newDaysList.days, function(index) {
				var startDate = new Date(newDaysList.days[index].day_ts * 1000);
				newDaysList.days[index].dayIndex = getNumericDayIndex(startDate);
				
				if (newDaysList.days[index].status == 1) {
					avDaysList[newDaysList.days[index].dayIndex] = newDaysList.days[index];
				}
			});
			
			friscoStorage.setShallow('daysList', newDaysList);
			friscoStorage.setShallow('daysAvList', avDaysList);
			
			// firing event
			friscoEvents.fire(_eventSender, friscoEvents.FEV_WINDOWS_DATA_CHANGED, newDaysList); // change to days?!
			return newDaysList;
		};
		
		if (isSynchronousCall) {
			var days = apiReservations.getDayList(shopId, offsetStart, offsetEnd, null, true) || [];
			return dayMerger(days);
		} else {
			apiReservations.getDayList(shopId, offsetStart, offsetEnd, function(days) {
				var daysList = null;
				if (days != undefined) {
					daysList = dayMerger(days);
				} else {
					DBG('API_GETTER', 'WINDOWS_LIST', 'Api error for getting windows list');
					friscoStorage.setShallow('daysList', null);
				}
				
				// firing follower callback
				if (typeof followerCallback == 'function') {
					followerCallback(daysList);
				}
			});
		}
	};
	
	friscoStorage.bindDataSourceGetter('daysList', getterFunc);
	
	
	/** DELIVERY ADDRESSES DATA GETTER **/
	var getterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
//  	if (!isSynchronousCall && typeof followerCallback != 'function') {
//  		throw "Need a follower callback function";    			
//  	}
		var _eventSender = customEventSender != undefined ? customEventSender : 'frisco_storage_delivery_addresses_getter';
		if (isSynchronousCall) {
			var userAddresses = apiUsers.getUserAddresses(loggedUserId, null, true);
			if (userAddresses != undefined) {
				// firing event
				if (!Object.equals(userAddresses, friscoStorage.getShallow('deliveryAddresses'), 3)) {
					friscoEvents.fire(_eventSender, friscoEvents.FEV_DELIVERY_ADDRESSES_CHANGED, userAddresses);
				}
				friscoStorage.setShallow('deliveryAddresses', userAddresses);
			}
			return userAddresses;
		} else {
			apiUsers.getUserAddresses(loggedUserId, function(userAddresses) {
				if (userAddresses != undefined) {
					// firing event
					if (!Object.equals(userAddresses, friscoStorage.getShallow('deliveryAddresses'), 3)) {
						friscoEvents.fire(_eventSender, friscoEvents.FEV_DELIVERY_ADDRESSES_CHANGED, userAddresses);
					}
					friscoStorage.setShallow('deliveryAddresses', userAddresses);
					
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback(userAddresses);
					}
				} else {
					DBG('API_GETTER', 'DELIVERY_ADDRESSES', 'Api error for getting user addresses');
					friscoStorage.setShallow('deliveryAddresses', null);
					
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback();
					}
				}
			});
		}
	};
	
	var setterFunc = function(key, setValue) {
		// firing event
		friscoStorage.setShallow('deliveryAddresess', setValue);
		friscoEvents.fire('frisco_storage_delivery_addresses_getter', friscoEvents.FEV_DELIVERY_ADDRESSES_CHANGED, setValue);
	}
	
	friscoStorage.bindDataSourceGetter('deliveryAddresses', getterFunc);
	friscoStorage.bindDataSourceSetter('deliveryAddresses', setterFunc);
	
	
	/** RESERVED DELIVERY DATE **/
	var getterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		
//  	if(!isSynchronousCall && typeof followerCallback != 'function') {
//  		throw "Need a follower callback function";    			
//  	}
		var _eventSender = customEventSender != undefined ? customEventSender : 'frisco_storage_delivery_date_getter';
		if (isSynchronousCall) {
			var deliveryDate = apiReservations.getActiveUserReservation(loggedUserId, null, true);
			if (deliveryDate != undefined) {
				if (deliveryDate.window_id * 1000 < (new Date()).getTime()) {
					DBG('DELIVERY_DATE', 'Reserved date in past, invalid');
					friscoStorage.setShallow('deliveryDate', null);
					return;
				}
				// firing event
				var oldDeliveryDate = friscoStorage.getShallow('deliveryDate');
				friscoStorage.setShallow('deliveryDate', deliveryDate);
				if (!Object.equals(deliveryDate, oldDeliveryDate, 2)) {
					friscoEvents.fire(_eventSender, friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, deliveryDate);
				}
			}
			return deliveryDate;
		} else {
			apiReservations.getActiveUserReservation(loggedUserId, function(deliveryDate) {
				if (deliveryDate != undefined) {
					if (deliveryDate.window_id * 1000 < (new Date()).getTime()) {
						DBG('DELIVERY_DATE', 'Reserved date in past, invalid');
						friscoStorage.setShallow('deliveryDate', null);
						return;
					}
					// firing event
					var oldDeliveryDate = friscoStorage.getShallow('deliveryDate');
					friscoStorage.setShallow('deliveryDate', deliveryDate);
					if (!Object.equals(deliveryDate, oldDeliveryDate, 2)) {	    					
						friscoEvents.fire(_eventSender, friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, deliveryDate);
					}
					
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback();
					}
				} else {
					DBG('API_GETTER', 'DELIVERY_DATE', 'Api error for getting user delivery date');
					friscoStorage.setShallow('deliveryDate', null);
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback(deliveryDate);
					}
				}
			});
		}
	};
	
	var setterFunc = function(key, setValue) {
		if (setValue == null) {
			friscoStorage.setShallow('deliveryDate', null);
			friscoEvents.fire('frisco_storage_delivery_date_setter', friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, null);
			return false;
		}
		
		if (typeof setValue["reservationId"] !== "undefined") {
			var reservation = setValue;
		} else {
			if(typeof setValue["window_id"] == "undefined") {
				var windowId = setValue;
			} else {
				var windowId = setValue.window_id;
			}
			
			var reservation = apiReservations.createReservation(loggedUserId, shopId, windowId);
		}
		
		if (typeof reservation == 'object' && reservation) {
			DBG("DELIVERY_DATE", "Reserved!", reservation);
			// 	firing event
			friscoStorage.setShallow('deliveryDate', reservation);
			friscoEvents.fire('frisco_storage_delivery_date_setter', friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, reservation);
		}
		return reservation;
	};
	
	// you pass in windowId or windowObj for set, and has a reservation obj from get 
	friscoStorage.bindDataSourceGetter('deliveryDate', getterFunc.bind(this));
	friscoStorage.bindDataSourceSetter('deliveryDate', setterFunc.bind(this));
	
	
	/** USER DATA **/
	var userGetterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		if (!loggedUserId)
			return false;
		
		customEventSender = customEventSender || 'frisco_storage_user_data_getter';
		if (isSynchronousCall) {
			var data = apiUsers.getUser(loggedUserId, null, null, true);
			if (data != null) {
				// firing event
				friscoStorage.setShallow('userData', data);
				friscoEvents.fire(customEventSender, friscoEvents.FEV_USER_DATA_CHANGED, data);
				return data;
			} else {
				DBG('API_GETTER', 'USER_DATA', 'Api error');
				friscoStorage.setShallow('userData', null);
				return null;
			}
		} else {
			apiUsers.getUser(loggedUserId, function(data) {
				if (data != undefined) {
					// firing event
					friscoStorage.setShallow('userData', data);
					friscoEvents.fire(customEventSender, friscoEvents.FEV_USER_DATA_CHANGED, data);

					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback(data);
					}
				}
			}, function(data) {
				DBG('API_GETTER', 'USER_DATA', 'Api error');
				friscoStorage.setShallow('userData', null);
				// firing follower callback
				if (typeof followerCallback == 'function') {
					followerCallback(null);
				}
			});
		}
	};

	var userSetterFunc = function(key, setValue) {
		// firing event
		throw "User data is read-only";
	};

	friscoStorage.bindDataSourceGetter('userData', userGetterFunc);
	friscoStorage.bindDataSourceSetter('userData', userSetterFunc);
	
	
	/** DELIVERY PRICES **/
	var deliveryGetterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		/* We execute it also for guest users */
		//if (!loggedUserId)
		//    return false;
		
		customEventSender = customEventSender || 'frisco_storage_user_data_getter';
		var curUserId = 0;
		if (loggedUserId)
			curUserId = loggedUserId;
		
		if (isSynchronousCall) {
			//throw "Getting delivery prices supports only asynchronous api";
			var data = api.getDeliveryPrices(curUserId, null, true);
			if (data != undefined) {
				// firing event
				friscoStorage.setShallow('deliveryPrices', data);
				friscoEvents.fire(customEventSender, friscoEvents.FEV_DELIVERY_PRICES_CHANGED, data);
			} else {
				friscoStorage.setShallow('deliveryPrices', null);
			}
			return data;
		} else {
			api.getDeliveryPrices(curUserId, function(data) {
				if (data != undefined) {
					// firing event
					friscoStorage.setShallow('deliveryPrices', data);
					friscoEvents.fire(customEventSender, friscoEvents.FEV_DELIVERY_PRICES_CHANGED, data);
					
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback(data);
					}
				}
			});
		}
	};
	
	var deliverySetterFunc = function(key, setValue) {
		throw "deliveryPrices is read-only";
	};

	friscoStorage.bindDataSourceGetter('deliveryPrices', deliveryGetterFunc);
	friscoStorage.bindDataSourceSetter('deliveryPrices', deliverySetterFunc);
	
	
	/** ORDER DELIVERY PRICE **/
	var orderDeliveryPriceGetterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		friscoStorage.getShallow('orderDeliveryPrice');
		/*
		customEventSender = customEventSender || 'frisco_storage_user_data_getter';
		var curUserId = 0;
		if (loggedUserId)
			curUserId = loggedUserId;
		
		if (isSynchronousCall) {
			var data = api.getDeliveryPrices(curUserId, null, true);
			if (data != undefined) {
				// firing event
				friscoStorage.setShallow('orderDeliveryPrice', data);
				friscoEvents.fire(customEventSender, friscoEvents.FEV_ORDER_DELIVERY_PRICE_CHANGED, data);
			} else {
				friscoStorage.setShallow('orderDeliveryPrice', null);
			}
			return data;
		} else {
			api.getDeliveryPrices(curUserId, function(data) {
				if (data != undefined) {
					// firing event
					friscoStorage.setShallow('orderDeliveryPrice', data);
					friscoEvents.fire(customEventSender, friscoEvents.FEV_ORDER_DELIVERY_PRICE_CHANGED, data);
					
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback(data.user);
					}
				}
			});
		}
		*/
	};
	
	var orderDeliveryPriceSetterFunc = function(key, setValue) {
		friscoStorage.setShallow('orderDeliveryPrice', setValue);
		friscoEvents.fire('orderDeliveryPriceSetterFunc', friscoEvents.FEV_ORDER_DELIVERY_PRICE_CHANGED, null);
	};
	
	friscoStorage.bindDataSourceGetter('orderDeliveryPrice', orderDeliveryPriceGetterFunc);
	friscoStorage.bindDataSourceSetter('orderDeliveryPrice', orderDeliveryPriceSetterFunc);
	
	
	/** USER PROFILE **/
	var userProfileGetterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		if (!loggedUserId)
			return false;
		
		customEventSender = customEventSender || 'frisco_storage_user_data_getter';
		
		if (isSynchronousCall) {
			var data = api.getUser(loggedUserId, null, true);
			if(data != undefined) {
				friscoStorage.setShallow('userProfile', data);
			}
			return data;
		} else {
			api.getUser(loggedUserId, function(data) {
				if (data != undefined) {
					friscoStorage.setShallow('userProfile', data);
					// firing follower callback
					if (typeof followerCallback == 'function') {
						followerCallback(data.user);
					}
				}
			});
		}
	};
	
	var userProfileSetterFunc = function(key, setValue) {
		friscoStorage.setShallow('userProfile', null);
	};
	
	friscoStorage.bindDataSourceGetter('userProfile', userProfileGetterFunc);
	friscoStorage.bindDataSourceSetter('userProfile', userProfileSetterFunc);
	
	
	/** PROMOPRODUCTS **/
	var promoproductsGetterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		if (isSynchronousCall) {
			var data = api.getPromoProductsConfig(null, true);
			friscoStorage.setShallow('promoproducts', data || null);
			return data;
		} else {
			api.getPromoProductsConfig(function(data) {
				if (!data) {
					data = null;
				}
				friscoStorage.setShallow('promoproducts', data);
				if (typeof followerCallback == 'function') 
					followerCallback(data);
			});
		}
	};
	
	var promoproductsSetterFunc = function(key, setValue) {
		throw "promoproducts is read-only!";
	};
	
	friscoStorage.bindDataSourceGetter('promoproducts', promoproductsGetterFunc);
	friscoStorage.bindDataSourceSetter('promoproducts', promoproductsSetterFunc);
	
	
	/** ORDER LIST **/
	var orderListGetterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		if (isSynchronousCall) {
			var data = api.getOrderList(loggedUserId, 0, 100, null, true);
			friscoStorage.setShallow('orderList', data ? data.reverse() : null);
			return data;
		} else {
			api.getOrderList(loggedUserId, 0, 100, function(data) {
				if (!data) {
					data = null;
				}
				friscoStorage.setShallow('orderList', data ? data.reverse() : null);
				if (typeof followerCallback == 'function') 
					followerCallback(data);
			});
		}
	};
	
	var orderListSetterFunc = function(key, setValue) {
		friscoStorage.setShallow(key, setValue);
	};
	
	friscoStorage.bindDataSourceGetter('orderList', orderListGetterFunc);
	friscoStorage.bindDataSourceSetter('orderList', orderListSetterFunc);
	
	
	/** PAYMENT TYPES **/
	var paymentsTypesGetterFunc = function(isSynchronousCall, followerCallback, customEventSender) {
		if (isSynchronousCall) {
			var data = api.getPaymentsTypesForUser(null, true);
			if(data != undefined) {
				friscoStorage.setShallow('paymentsTypes', data);
			}
			return data;
		} else {
			api.getPaymentsTypesForUser(function(data) {
				if (!data) {
					data = null;
				}
				friscoStorage.setShallow('paymentsTypes', data);
				// firing follower callback
				if (typeof followerCallback == 'function') {
					followerCallback(data);
				}
			});
		}
	};

	var paymentsTypesSetterFunc = function(key, setValue) {
		friscoStorage.setShallow('paymentsTypes', null);
	};

	friscoStorage.bindDataSourceGetter('paymentsTypes', paymentsTypesGetterFunc);
	friscoStorage.bindDataSourceSetter('paymentsTypes', paymentsTypesSetterFunc);
})();

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/slot_manager.js */
var SlotManager = function() {
	
	var api = FriscoApiManager.getShopApiClient();
	
	var slotsHandlers = [];
	var currentSlotIndex = 0;
	var slotsLoading = false;
	
	var LIMIT = function(state) { // yeah, js has no smart enums like java
		switch (state) {
			case "iList": return 36;
			default: return 20;
		}
	};
	
	var filter = function(product, state) {
		switch (state) {
			case "iList": return true;
			default: return (product.status == 0 || product.status == 2);
		}
	};
	
	var loadMoreSlots = function(forceCallbacks) {
		if (slotsLoading) { return false; }
		slotsLoading = true;
		
		var state = core.getCurrentState();

		var loadingSlot = slotsHandlers[currentSlotIndex];
		if (!loadingSlot) { return false; }

		var addProducts = function(products) {
			var e = $(loadingSlot.id);
			if (page == 1) {
				e.html("");
				
				if (loadingSlot.headerId) {
					$(loadingSlot.headerId).show();
				}
			}
/*
			if (forceCallbacks === true || page == 1) {
				if (currentSlotIndex == 0) {
					frisco.addCatalogBanners();
				}
			}
*/
			var gaAttr;
			if (!state || state == 'defaultState') {
				var gaAttr = "Strona-glowna";
			}

			var cartByPid = (friscoStorage.getShallow("cartData") || {}).entries;
			frisco.renderProducts(e, products, function(x){
				x.cartAmount = cartByPid && cartByPid[x.product_id] && cartByPid[x.product_id].amount;
				return filter(x, state);
			}, {gaAttr : gaAttr});

// 			frisco.renderProductsInCart();

			if (page == maxPage || products.length == 0) {
				currentSlotIndex++;
			} else {
				loadingSlot.offset++;
			}

			slotsLoading = false;
		};

		var page = loadingSlot.offset;
		var ids = loadingSlot.slotProducts && loadingSlot.slotProducts.slice((page - 1)* LIMIT(state), page * LIMIT(state));
		var maxPage = ids && Math.ceil(loadingSlot.slotProducts.length / LIMIT(state));
		
		if (ids && ids.length == 0 && !loadingSlot.query) { 
// 			return; 
			while (currentSlotIndex < slotsHandlers.length) {
				loadingSlot = slotsHandlers[++currentSlotIndex];
				page = loadingSlot.offset;
				ids = loadingSlot.slotProducts.slice((page - 1)* LIMIT(state), page * LIMIT(state));
				
				if (ids.length || loadingSlot.query)
					break;
			}
		}
		
		if (ids && ids.length) {
			api.getProducts(ids, addProducts, session ? session.user_id : null, 1, LIMIT(state), true);
		} else if (loadingSlot.query) {
			var query = loadingSlot.query;
			api.searchProducts(query.q, query.c, query.t, function(totalFound, productsArray, brandsArray, tagsArray, categoriesArray, boughtProducts) {
					addProducts(productsArray);
				}, LIMIT(state), page, [], false);
		} else if (loadingSlot.asyncGetter) {
			loadingSlot.asyncGetter(page, LIMIT(state), addProducts);
		}
	};
	
	var pub = {
		registerSlot : function(slotName, productIds, slotIndex, otherData) {
			var slotHandler = { id : slotName , slotProducts : productIds, offset : 1, done : false};

			if (otherData) {
				for (i in otherData) {
					slotHandler[i] = otherData[i];
				}
			};

			if (slotIndex && !isNaN(slotIndex)) {
				slotsHandlers[slotIndex] = slotHandler;
			} else {
				slotsHandlers.push(slotHandler);
			}
		},

		clearSlots : function() {
			slotsHandlers = [];
			currentSlotIndex = 0;
			slotsLoading = false;
		},

		enableLoadSlots : function() {
			loadMoreSlots(true);
			friscoEvents.hook('slots', friscoEvents.FEV_LOAD_MORE, loadMoreSlots, {type: friscoEvents.FEV_TYPE_VOLATILE});
		},
	};
	
	return pub;
}();

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/core.js */
 
/**
 * template helpers container
 */
var helpers = {
};


// TODO: merge those 2 ;p
var _esc = function(value) {
	if(typeof value == 'undefined' || !value || (typeof value.length !== 'undefined' && !value.length)) {
		return '';
	}
	value = new String(value);
	
    var escaped = value;
    var findReplace = [[/&/g, "&amp;"], [/</g, "&lt;"], [/>/g, "&gt;"], [/"/g, "&quot;"], [/'/g, "&#x27;"]];

    for(var item in findReplace) {
        escaped = escaped.replace(findReplace[item][0], findReplace[item][1]);
    }
    return escaped;	
}

/**
 * Escape single string
 * @param String html text to process
 * @returns escaped value that is safe to include inside html
 */
var __$ = function(html) {		
    if (typeof html != 'string')
        return html;
    
    var escaped = html;
    var findReplace = [[/&/g, "&amp;"], [/</g, "&lt;"], [/>/g, "&gt;"], [/"/g, "&quot;"], [/'/g, "&#x27;"]]; //"

    for(var item in findReplace) {
        escaped = escaped.replace(findReplace[item][0], findReplace[item][1]);
    }
    return escaped;
};

/**
 * Escapes all strings in argument trying to guess what it is.
 * In case a string is passed, it's equivalent to (although slower than) {@link __$}. In case of numbers and functions
 * no escaping is happening. In case of Objects (including Arrays) recursion happens.
 * As the result you will get object that looks like argument, but all true strings are escaped inside it.
 * But theres also a warning: this creates deep copy of object. Should not be used for objects that are
 * more than hashMaps. In such a case it might be a lot more sensible to just call __$ on appropriate fields.
 */
var _$ = function(obj) {
    switch (typeof obj) {
    case 'string':
        return __$(obj);
    case 'number':
        return obj;
    case 'boolean':
        return obj;
    case 'function':
        return obj;
    case 'undefined':
        return obj;
    case 'object':
        var result = null;
        if (obj === null) {
            return result;
        } else if (obj instanceof Array) {
            result = [];
        } else {
            result = {};
        }
        for (var index in obj) {
            result[index] = _$(obj[index]);
        }
        return result;
    }
};

/**
 * Core
 */
var core = function() {
	var MAX_IMAGE_DOMAINS = 4;
	var PAGE_TTL = 3600; // secs
	var PAGE_SESSION_CHECK_INTERVAL = 600; // secs

	var routingPaths = {};
	var releasingPaths = {};
	var loadingCallback = null;
	var postLoadingCallback = null;

	var currentState = null;
	var currentSubstate = null;
	var lastState    = null;
	var currentParameters = null;
	var currentHashParams = null;
	var flashMessages = [];
	var flashTimeout = null;
	
	var ieVersion = undefined;
	
	var scrollLocs = {};
	var currentStateId = 0;

	/*
	* language used with frisco session
	*/
	var langCookieName = 'lang';

	var encodePrameterValue = function(str) {
		// Encoding of other not alphanumerics will be handled by history.js.
		// These characters are valid in URI but not valid inside parameter value so must be encoded.
		// Encoding whole value by encodeURIComponent would give uglier urls.
		str = '' + str;
		str = str.replace(/%|\/|\?|#/g, encodeURIComponent);
		return str;
	};

	/*
	* returns parameters from url /name1,value1/name2,value2
	*/
	var parseParameters = function (url) {
		url = helpers.removeURLParam(url, "url");
		var parameters = {};
		var re = /([_a-zA-Z]+),([^\/\?#]+?)([\/\?#]|$|\+([&\/\?]|$))/g;

		if(ieVersion && ieVersion <= 9) {
			// history.js on old ie "fixes" encoded urls, by encoding % char during page refresh
			url = url.replace(/%(25)+([0-9a-f][0-9a-f])/ig, '%$2');
		}

		while (matched = re.exec(url)) {
			parameters[matched[1]] = decodeURIComponent(matched[2]);
		}

		re = /([a-zA-Z]+)\[([a-zA-Z0-9_]+)\],([^\/\?]+)/g;
		while (matched = re.exec(url)) {
			if (parameters[matched[1]] == null || parameters[matched[1]] == undefined) {
				parameters[matched[1]] = {};
			}
			parameters[matched[1]][matched[2]] = decodeURIComponent(matched[3]);
		}
		return parameters;
	};

	var destroyFlash = function(id) {
		var idFlash = "";
		idFlash = id;

		$('#messageId_' + idFlash).fadeOut("1500", function() {
			$('#messageId_' + idFlash).remove();
		});
	};

	var displayFlash = function(msg,type,id,disableTimeout) {
		var flag = "";
		switch(type) {
			case 0 : flag = "warningError"; break;
			case 1 : flag = "confirmation"; break;
			case 2 : flag = "info"; break;
			default: flag = "info"; break;
		}

		var idFlash = "";
		idFlash = id;
		
		if ($('#messageId_' + idFlash).length) {
			var timeout = $('#messageId_' + idFlash + '.' + flag).data("timeout");
			if (timeout) { clearInterval(timeout); }
			if (!disableTimeout){
				$('#messageId_' + idFlash).data("timeout",setTimeout(function() {
					$('#messageId_' + idFlash).fadeOut();
						$('#messageId_' + idFlash).remove();
				}, 6000));
			}
		} else {
			$('#flash').append($('<p id="messageId_'+ idFlash +'" class="message '+ flag +'">').text(msg));
			$('#messageId_' + idFlash).append($("<a>").click(function(){ $(this).parent().remove(); return false; }).text(__("Zamknij")).attr('href', '#'));

			if ($('#messageId_' + idFlash).length) {
				$('#messageId_' + idFlash).show();
				if (!disableTimeout) {
					$('#messageId_' + idFlash).data("timeout",setTimeout(function() {
						destroyFlash(idFlash);
					}, 6000));
				}
			}
		}
	};
	
	/**
	* extracting LANG value
	*/
	var harvestSessionLang = function() {
		if (!document.cookie) {
			DBG('CORE', 'Failed lang hunting, no cookies!');
		}
		
		var cookies = document.cookie.split(';');
		for(var i in cookies) {
			var cookie = cookies[i];
			if (jQuery.trim(cookie.substr(0, cookie.indexOf('='))) == langCookieName) {
				var extractedLang = jQuery.trim(cookie.substr(cookie.indexOf('=') + 1));
				break;
			}
		}
		
		if (extractedLang == undefined) {
			DBG('CORE', 'No lang cookie found');
			lang.changeLanguage('pl');    		
		} else if(extractedLang && (extractedLang.match(/[a-zA-Z]{2}/))) {
			DBG('CORE', 'Setting lang value', extractedLang);
			lang.changeLanguage(extractedLang);
		} else {
			DBG('CORE', 'Invalid lang value found in cookie', extractedLang);
			lang.changeLanguage('pl');
		}
	};
	
	var setSessionLang = function(lang) {
		jQuery.cookie(langCookieName, lang, {expires: 730, path: '/'});
		// TODO: its lame, do proper reloadState to force all internal checks blocking UI refreshes
		window.location.reload();
	};
	
	var loadState = function (state, subState, parameters) {
		delete parameters['stn'];
		delete parameters['sub'];

		DBG('CORE', 'Loading state', state, subState, parameters);
		
		harvestSessionLang();
		
		if (lastState && releasingPaths[lastState] != undefined) {
			releasingPaths[lastState]();
		}

		if (typeof loadingCallback == 'function') {
			loadingCallback();
			/* break on loading callback was turned off by @abankowski - it fucks up phantom... and is undocumented */
//            if(!true) {
//    		    return false;
//	        }
		}
		
		var result = null;
		
		if (routingPaths[state] != undefined) {
			lastState = currentState;
			currentState = state;
			currentSubstate = subState;

			//displayFlash();
			try {
				result = routingPaths[state](lastState, subState, parameters);
				
				if (typeof postLoadingCallback == 'function')
					postLoadingCallback(currentState);
			} catch(e) {
				console.error(e);
				console.error(e.stack);
			}
			$("#page_content.opacity").removeClass("opacity");
			$("#page_content_loader").hide();
		
		} else if (routingPaths['error404']) {
			routingPaths['error404'](lastState, subState, parameters);
			$("#page_content.opacity").removeClass("opacity");
			$("#page_content_loader").hide();
		}
		
		return result;
	};

	var clearUrlString = function (string) {
		string = "" + string;
		return string.replace(/-/g, ' ');
	};

	var pub = {
		STATUS_OK     : 0,
		STATUS_FAILED : 1,

		loadedAt : null,
		stateLoaded : false,

		getUrl : function(state, subState, parameters, dontClearUrl) {
			if (parameters == undefined) {
				parameters = {};
			}
			
			if (subState == undefined) {
				subState = null;
			}

			if (state != 'defaultState') {
				parameters.stn = state;
			}
			
			if (subState) {
				parameters.sub = subState;
			}

			var url = '';
			$.each(parameters, function(index, item) {
				if (item != null) {
					if (typeof item == 'array' || typeof item == 'object') {
						$.each(item, function(arrayIndex, arrayItem) {
							if (arrayItem != null) {
								url += '/' + index + '[' + arrayIndex + '],' + helpers.clearString4Url(arrayItem);
							}
						});
					} else {
						url += '/' + index + ',' + (dontClearUrl ? encodePrameterValue(item) : helpers.clearString4Url(item));
					}
				}
			});
			
			if (url == '')
				url = "/";

			return url;
		},

		setState : function(state, subState, parameters, title, dontTrackPageview, dontClearUrl) {
			var url = this.getUrl(state, subState, parameters, dontClearUrl);
			History.pushState({stateName : state, substateName : subState}, title == undefined ? window.title : title, url);
			if (!dontTrackPageview && _gaq && _gaq.push) {
				_gaq.push(['_trackPageview', url]);
			}
			if (!dontTrackPageview && window.__insp && __insp.push)
				__insp.push(["virtualPage", {url: url}]);
		},
		
		applyStateUrl : function (url, title) {
			var parameters = parseParameters(url);
			History.pushState({stateName : parameters.stn, substateName : parameters.sub}, title == undefined ? window.title : title, url);
		},

		loadInitialState : function (title) {
			var url = '/';
			try {
				url = (window.location.hash && window.location.hash!='#!')? '/' + window.location.hash.substring(1) : window.location.pathname;
			if (window.location.search)
				url = url + window.location.search;
			} catch(e) { }

			// remove url parameter &url=... from url
// 			urlClean = helpers.removeURLParam(url, "url");
			var parameters = parseParameters(url);

// 			try {
// 			History.replaceState({stateName : parameters.stn, substateName : parameters.sub, allParameters : parameters}, title == undefined ? window.title : title, encodeURI(url));
// 			} catch(e) { alert(e); }

			setTimeout(function() { pub.loadCurrentState(); }, 15);
		},

		loadCurrentState : function(force) {
			if (!force) {
				if (pub.stateLoaded) { return; }
			}

			if (force) {
				if (_gaq && _gaq.push && session) {
					_gaq.push(['_trackPageview', location.pathname + location.search + location.hash]);
				}
				if (session && window.__insp && __insp.push)
					__insp.push(["virtualPage"]);
			}

			pub.stateLoaded = true;
			
			var newState = History.getState(false, true);
			currentStateId = newState.id;
			var parameters = {};
			
			var url = newState.uri ? newState.uri : (ieVersion ? newState.url.substr(History.getRootUrl().length-1) : newState.hash);
			
			if (newState.data && newState.data.allParameters) {
				parameters = newState.data.allParameters;
			} else {
				parameters = parseParameters(url);
			}

			var currentStateName = newState.data.stateName? newState.data.stateName : parameters.stn;
			var currentSubstateName = newState.data.substateName? newState.data.substateName : parameters.sub;

			currentParameters = parameters;

			// lastState is not set properly until loadState finishes. Use currentState instead.
			friscoEvents.fire('core', friscoEvents.FEV_ON_STATE_ENTER, { lastState: currentState, currentState : currentStateName, currentSubstate: currentSubstateName, parameters : parameters, backForward: !!scrollLocs[currentStateId]});

			if (currentStateName != currentState)
				friscoEvents.clean(); // remove volatile events
				
			try {
				var result = loadState(currentStateName == undefined ? 'defaultState' : currentStateName, currentSubstateName, parameters)
				if (result !== false) {
					session.backend_rendered = false;                    
				}
			} catch (e) { }
			
			if (undefined == currentStateName && ((newState.uri && newState.uri.length > 1) || (newState.hash && newState.hash.length > 1))) {
				currentStateName  = 'error404';
			}
			
			if (scrollLocs[currentStateId]) {
				$(window).scrollTop(scrollLocs[currentStateId]); 
			}
			
			friscoEvents.fire('core', friscoEvents.FEV_STATE_CHANGED, { lastState: lastState, newState : currentStateName, currentSubstate: currentSubstateName, parameters : parameters, backForward: !!scrollLocs[currentStateId]});
		},
		
		getCurrentState : function() {
			var currentState = History.getState();
			var parameters = parseParameters(currentState.uri ? currentState.uri : (ieVersion ? currentState.url.substr(History.getRootUrl().length-1) : currentState.hash));
			var currentStateName = currentState.data.stateName? currentState.data.stateName : parameters.stn;			
			return currentStateName;
		},
		
		getCurrentSubstate : function() {
			var currentState = History.getState();
			var parameters = parseParameters(currentState.uri ? currentState.uri : (ieVersion ? currentState.url.substr(History.getRootUrl().length-1) : currentState.hash));
			var currentSubstateName = currentState.data.substateName? currentState.data.substateName : parameters.sub;
			return currentSubstateName;
		},

		getCurrentParameters : function() {
			var currentState = History.getState();
			var parameters = parseParameters(currentState.uri ? currentState.uri : (ieVersion ? currentState.url.substr(History.getRootUrl().length-1) : currentState.hash));
			var currentSubstateName = currentState.data.substateName? currentState.data.substateName : parameters.sub;
			return parameters;
		}, 
		
		setupRouting : function (routing) {
			routingPaths = routing;
		},

		setupReleasing : function (releasing) {
			releasingPaths = releasing;
		},

		setupLoadingCallback : function (callback) {
			loadingCallback = callback;
		},

		setupPostLoadingCallback : function (callback) {
			postLoadingCallback = callback;
		},
		
		initialize : function() {
			$(window).bind('statechange', function(e) { 
// 				if (currentState == lastState/* && currentState == "feature"*/) {
// 					return; // stop processing
// 				} else {
					pub.stateLoaded = false;
					console.log("[DBG][window.onstatechange] loading current state");
					pub.loadCurrentState(); 
// 				}
			});
			
			$(window).bind('scroll.core', _.throttle(function(e) {
				scrollLocs[currentStateId] = Math.max($('html').scrollTop(), $('body').scrollTop());
			}, 1000));
			
			ieVersion = History.getInternetExplorerMajorVersion();
			
			pub.loadedAt = new Date();
			$.jqotetag("*");
			
// 			setTimeout(function() {  pub.loadCurrentState(); }, 25);
			setInterval(pub.uptimeGuard.bind(pub), PAGE_SESSION_CHECK_INTERVAL * 1000);
		},
		
		getParam : function(key) {
			var currentState = History.getState();
			var currentParameters = parseParameters(currentState.uri ? currentState.uri : (ieVersion ? currentState.url.substr(History.getRootUrl().length-1) : currentState.hash));
			
			if(typeof currentParameters != 'undefined' && currentParameters 
				&& typeof currentParameters[key] != 'undefined') {
				
				return currentParameters[key];
			}
			return null;
		},
		
		updateLang : function() {
			harvestSessionLang();
		},
		
		getCurrentLang : function() {
			return lang.getCurrentLang();
		},
		
		setLang : function(lang) {
			setSessionLang(lang);
		},
		
		friscoReachCheck : function () {
			var x = new ( window.ActiveXObject || XMLHttpRequest )( "Microsoft.XMLHTTP" ), s;
			x.open(
				"HEAD",
				"//" + window.location.hostname + "/server_status",
				false
			);
			try {
				x.send();
				s = x.status;
				return ( s >= 200 && s < 400 );
			} catch (e) {
				console.log(e);
				return false;
			}
		},// friscoReachCheck : function()
		
		onlineCheck : function(silent) {
			if (!navigator.onLine) {
				if (!silent) {
// 					Popup.loadMessage({ messageId: Popup.MESSAGES.NO_INTERNET, timeout: Popup.TIMEOUT.NORMAL });
				}
				return false;
			}
			if (!pub.friscoReachCheck()) {
				if (!silent) {
// 					Popup.loadMessage({ messageId: Popup.MESSAGES.FRISCO_NOT_REACHABLE, timeout: Popup.TIMEOUT.NORMAL });
				}
				return false;
			}
			return true;
	}, // onlineCheck : function(silent)
		
		uptimeGuard : function() {
			var date = new Date();
			if ((date.getTime() - this.loadedAt.getTime()) / 1000 > PAGE_TTL) {
				if (pub.onlineCheck(true)) {
// 					Popup.loadMessage({ messageId: Popup.MESSAGES.REFRESHING_SESSION, timeout: Popup.TIMEOUT.NORMAL });
					window.location.reload(); // force full reload
				} else {
					return false; // problems with internet connection
				}
			} else {
				return pub.onlineCheck(true); // silent
			}
			
		}
	}; // pub
	
	helpers.url = function (state, parameters, subState, dontClearUrl) {
		return pub.getUrl(state, subState, parameters, dontClearUrl);
	};

	helpers.current_url = function(parameters, dontClearUrl) {
		var newParameters = jQuery.extend({}, currentParameters);
		$.each(parameters, function(index, value) {
			newParameters[index] = value;
		});
		//return pub.getUrl(currentState, currentSubstate, newParameters);
	
		useState = currentState;
		useSubstate = currentSubstate;
		
		if (parameters.stn)
			useState = parameters.stn;

		if (parameters.sub)
			useSubstate = parameters.sub;
			
		return pub.getUrl(useState, useSubstate, newParameters, dontClearUrl);
	};

	helpers.strong_phrase = function(phrase, pattern) {
		var re  = new RegExp(pattern, "gi");
		return phrase.replace(re, "<strong>$&</strong>");
	};
		
	helpers.truncate = function(phrase, length) {
		if (phrase && phrase.length > length) {
				return phrase.slice(0, length - 3) + "...";
		} else {
			return phrase;
		}
	};

	helpers.img_url = function(imageId, maxHeight, maxWidth, scaleForDevicePixelRatio) {
		var pixelRatio = 1;
		if(scaleForDevicePixelRatio) { 
			pixelRatio = FRISCO.DEVICE_PIXEL_RATIO;
		}

		if (CONFIG.MMEDIA) {
			return  window.location.protocol + "//" + (1 + imageId % MAX_IMAGE_DOMAINS) + "-mmedia.frisco.pl/id," + imageId + "/" + (maxHeight == undefined ? "" : "h," + maxHeight*pixelRatio + "/") + (maxWidth == undefined ? "" : "w," + maxWidth*pixelRatio + "/");
		}
		return "/.img/" + "id," + imageId + "/" + (maxHeight == undefined ? "" : "h," + maxHeight*pixelRatio + "/") + (maxWidth == undefined ? "" : "w," + maxWidth*pixelRatio + "/");
	};

	helpers.removeURLParam = function(url, param) {
			var urlparts= url.split('?');
			if (urlparts.length>=2) {
			var prefix= encodeURIComponent(param)+'=';
		var pars= urlparts[1].split(/[&;]/g);
				for (var i=pars.length; i-- > 0;)
					if (pars[i].indexOf(prefix, 0)==0)
						pars.splice(i, 1);
						if (pars.length > 0)
							return urlparts[0]+'?'+pars.join('&');
						else
							return urlparts[0];
			} else
			return url;
			
	}; // helpers.removeURLParam = function(url, param)
	
	helpers.clearString4Url = function(urlItem, encode) { // encode = true by default
        urlItem = "" + urlItem;
        pl_changeset = {'%': '', 'ę' : 'e', 'ó' : 'o', 'ą' : 'a', 'ś' : 's' , 'ł' : 'l' , 'ż' : 'z', 'ź' : 'z', 'ć' : 'c', 'ń' : 'n',
                        'Ę' : 'E', 'Ó' : 'O', 'Ą' : 'A', 'Ś' : 'S' , 'Ł' : 'L' , 'Ż' : 'Z', 'Ź' : 'Z', 'Ć' : 'C', 'Ń' : 'N'};

        urlItem = urlItem.replace(/ /g, '-');
        $.each(pl_changeset, function(pl, repl) {
            var r = new RegExp(pl, 'g');
            urlItem = urlItem.replace(r, repl);
        });

        if (typeof(encode) == "undefined" || encode)
            return encodeURIComponent(urlItem);
        return urlItem;
    };
    
    helpers.clearCategory = function(category) {
        if (typeof(category) === 'string')
             category = category.replace(/>>/g, '-');
        else
            category = category.join('-');
        return helpers.clearString4Url(category.toLowerCase(), false);
    }

// 	$(pub.initialize);
	return pub;
}();

// browser detection
var BrowserDetect = {
	init: function () {
		this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
		this.version = this.searchVersion(navigator.userAgent)
			|| this.searchVersion(navigator.appVersion)
			|| "an unknown version";
		this.OS = this.searchString(this.dataOS) || "an unknown OS";
	},
	searchString: function (data) {
		for (var i=0;i<data.length;i++)	{
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			this.versionSearchString = data[i].versionSearch || data[i].identity;
			if (dataString) {
				if (dataString.indexOf(data[i].subString) != -1)
					return data[i].identity;
			}
			else if (dataProp)
				return data[i].identity;
		}
	},
	searchVersion: function (dataString) {
		var index = dataString.indexOf(this.versionSearchString);
		if (index == -1) return;
		return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
	},
	dataBrowser: [
		{
			string: navigator.userAgent,
			subString: "Chrome",
			identity: "Chrome"
		},
		{ 	string: navigator.userAgent,
			subString: "OmniWeb",
			versionSearch: "OmniWeb/",
			identity: "OmniWeb"
		},
		{
			string: navigator.vendor,
			subString: "Apple",
			identity: "Safari",
			versionSearch: "Version"
		},
		{
			prop: window.opera,
			identity: "Opera",
			versionSearch: "Version"
		},
		{
			string: navigator.vendor,
			subString: "iCab",
			identity: "iCab"
		},
		{
			string: navigator.vendor,
			subString: "KDE",
			identity: "Konqueror"
		},
		{
			string: navigator.userAgent,
			subString: "Firefox",
			identity: "Firefox"
		},
		{
			string: navigator.vendor,
			subString: "Camino",
			identity: "Camino"
		},
		{		// for newer Netscapes (6+)
			string: navigator.userAgent,
			subString: "Netscape",
			identity: "Netscape"
		},
		{
			string: navigator.userAgent,
			subString: "MSIE",
			identity: "Explorer",
			versionSearch: "MSIE"
		},
		{
			string: navigator.userAgent,
			subString: "Gecko",
			identity: "Mozilla",
			versionSearch: "rv"
		},
		{ 		// for older Netscapes (4-)
			string: navigator.userAgent,
			subString: "Mozilla",
			identity: "Netscape",
			versionSearch: "Mozilla"
		}
	],
	dataOS : [
		{
			string: navigator.platform,
			subString: "Win",
			identity: "Windows"
		},
		{
			string: navigator.platform,
			subString: "Mac",
			identity: "Mac"
		},
		{
			   string: navigator.userAgent,
			   subString: "iPad",
			   identity: "iOS"
	    },
        {
               string: navigator.userAgent,
               subString: "iPhone",
               identity: "iOS"
        },
		{
			   string: navigator.userAgent,
			   subString: "Android",
			   identity: "Android"
	    },
		{
			string: navigator.platform,
			subString: "Linux",
			identity: "Linux"
		}
	]

};
BrowserDetect.init();


var showOldBrowserWarning = function() {
	var browserString = BrowserDetect.browser + ' ' + BrowserDetect.version;
	var alert = _$("Twoja przeglądarka ") + " (" + browserString + ") " + _$(" jest nieaktualna. Zalecamy aktualizację do najnowszej wersji.");
	Popup.load({ content: alert, size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING });
// 	core.flash.instant(alert,2,45,1);
};

var showOldBrowserCritical = function() {
	var browserString = BrowserDetect.browser + ' ' + BrowserDetect.version;
	$("#errorPage").show();
	$("#errorPage h2 span").html(browserString + " ");
};

var isMobile = function() {
	var index = navigator.appVersion.indexOf("Mobile");
	return (index > -1);
};

var fix4iOSscaleBug = function() {
	var metas = document.getElementsByTagName('meta');
	var i;
	if (BrowserDetect.OS == "iOS") {
		for (i=0; i<metas.length; i++) {
			if (metas[i].name == "viewport") {
				metas[i].content = "width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;' name='viewport";
			}
		}
		document.addEventListener("gesturestart", gestureStart, false);
	}
	function gestureStart() {
		for (i=0; i<metas.length; i++) {
			if (metas[i].name == "viewport") {
				metas[i].content = "width=device-width, minimum-scale=0.25, maximum-scale=1.0";
			}
		}
	}
};

var bindBrowserCheck = function() {
	switch(BrowserDetect.browser) {
		case 'Firefox':
			if (parseInt(BrowserDetect.version) < 4) {
				showOldBrowserCritical();
				return;
			}
			if (parseInt(BrowserDetect.version) < 13) {
				showOldBrowserWarning();
			}
			break;
		case 'Chrome':
			if (parseInt(BrowserDetect.version) < 15) {
				showOldBrowserWarning();
			}
			break;
		case 'Opera':
			if (parseInt(BrowserDetect.version) < 10) {
				showOldBrowserWarning();
			}
			break;
		case 'Explorer':
			if (parseInt(BrowserDetect.version) < 8) {
				showOldBrowserCritical();
				return;
			}
			if (parseInt(BrowserDetect.version) < 9) {
				showOldBrowserWarning();
				return;
			}
	};
};

/* Add NIP and Pesel validator to jQuery validate plugin */
jQuery.validator.addMethod("nip", function(value, element) {
	var verificator_nip = new Array(6,5,7,2,3,4,5,6,7); 
	var nip = value.replace(/[\ \-]/gi, ''); 
	if (nip.length != 10)  { return false; } 
	else  {
		var n = 0;
		for (var i=0; i<9; i++) {	n += nip[i] * verificator_nip[i]; }
		n %= 11;
		if (n != nip[9]) { return false; }
	}
	return true;
}, __("Proszę o podanie prawidłowego numeru NIP") );

jQuery.validator.addMethod("pesel", function(value, element) {
	var pesel = value.replace(/[\ \-]/gi, ''); 
	if (pesel.length != 11) { return false; } 
	else {
		var steps = new Array(1, 3, 7, 9, 1, 3, 7, 9, 1, 3); 
		var sum_nb = 0;
		for (var x = 0; x < 10; x++) { sum_nb += steps[x] * pesel[x];}
		sum_m = 10 - sum_nb % 10;
		if (sum_m == 10) { sum_c = 0; } else { sum_c = sum_m;}
		if (sum_c != pesel[10]) { return false; }
	}
	return true;
}, __("Proszę o podanie prawidłowego numeru PESEL") );

jQuery.validator.addMethod("regexp", function(value, element, regexp) {
    return this.optional(element) || (new RegExp(regexp)).test(value);
}, __("Wprowadź poprawną wartość dla tego pola") );

/* Custom method to check if autocomplete was choosen from select */
jQuery.validator.addMethod("fromselect", function(value, element) {
	if ( ($(element).attr('not-from-select')) && ($(element).attr('not-from-select')=='true') )
		return false;
	return true;
}, __("Wprowadź poprawną wartość dla tego pola") );


/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/rum.js */
var Rum = function() {
	var api = FriscoApiManager.getShopApiClient();

	var getDomainFromAString = function (url) {
		var a = document.createElement('a');
		a.href = url;
		return a.hostname;
	};
	
	var createCookie = function (e, t, n) {
		if (!t) return;
		var r = "";
		if (n) {
			var i = new Date();
			i.setTime(i.getTime() + n * 24 * 60 * 60 * 1e3);
			r = "; expires=" + i.toGMTString();
		}
		document.cookie = e + "=" + t + r + "; path=/; domain=." + document.domain;
	};

	var readCookie = function (e) {
		var t = e + "=";
		var n = document.cookie.split(";");
		for (var r = 0; r < n.length; r++) {
			var i = n[r];
			while (i.charAt(0) == " ") i = i.substring(1, i.length);
			if (i.indexOf(t) == 0) return i.substring(t.length, i.length);
		}
		return null;
	};

	var pushRequestLog = function (e, extra, userId) {
		// collect data
		var logFid = readCookie('fid');
		var logUser = userId;
		var logType = e;
		var logDomain = 'unused';
		var logLocation = 'unused';
		var logTime = new Date().getTime();
		var logExtra = encodeURIComponent(extra);

		// send log
		api.rumSendLog(logFid, logUser, logType, logDomain, logLocation, logTime, logExtra);
	};

	var pub = {
		BASE_EVENT: 1,
		VOUCHER_EVENT: 2,
		FIRST_PRODUCT_EVENT : 3,
		REFERRER_EVENT : 4,
		UTM_EVENT : 5,
		LOGIN_EVENT : 6,
		EMAIL_DROP_EVENT : 7,
		
		initialize: function (userId) {
			// if referrer exists
			if (document.referrer) {
				// there is current domain info
				// and current domain does not match referrer domain
				// and referrer is not from google search
				var currentDomain = window.location.hostname;
				var referrerDomain = getDomainFromAString(document.referrer);
				var isExternalReferrer = currentDomain && currentDomain != referrerDomain && !(/google./.test(referrerDomain));

				if (isExternalReferrer) {
					pushRequestLog(this.REFERRER_EVENT, referrerDomain, userId);
				}
			}

			// either rum cookie is missing
			// or utm cookie is missing and we havent yet recorded that fact
			// or utm cookie changed since we set rum cookie
			var rumCookie = readCookie('__rum2');
			var umtzCookie = readCookie('__utmz');
			var isCookieChanged = !rumCookie || (!umtzCookie && rumCookie != 'missing') || rumCookie != umtzCookie;

			if (isCookieChanged) {
				rumCookie = umtzCookie ? umtzCookie : 'missing';

				createCookie('__rum2', rumCookie, 180);
				pushRequestLog(this.UTM_EVENT, rumCookie, userId);
			}

			return false;
		},

		rumEvent: function (type, value, userId) {
			pushRequestLog(type, value, userId);
		}
	};
	
	return pub;
	
}();

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/component_sidebar.js */
// Singlaton ;F
var Sidebar = {

		visible : false,
		container : false,
	
		slot1Container : null,
		slot2Container : null,

		slot1ContentId : false,
		slot2ContentId : false,

		SLOT_1         : 'SLOT1',
		SLOT_2         : 'SLOT2',

		init : function() {
			this.container = $('#page_sidebar');
			this.container.html('');
			this.container.append('<div class="slot" id="sb_1st" style="display: none"></div>');
			this.slot1Container = this.container.find("div#sb_1st");
			this.container.append('<div class="slot" id="sb_2nd" style="display: none"></div>');
			this.slot2Container = this.container.find("div#sb_2nd");            
		},

		getRoot : function() {
			return this.container;
		},

		isVisible : function() {
			return this.visible;
		},

		show : function(preferedSlot) {
			DBG('SIDEBAR', 'Showing sidebar');
			if ( (core.getCurrentState() == 'checkout') || (core.getCurrentState() == 'order') )  {
				DBG('SIDEBAR', 'Showing sidebar blocked for checkout');
// 				Popup.loadMessage({ messageId: Popup.MESSAGES.CART_PREVIEW_LOCKED, timeout: Popup.TIMEOUT.NORMAL });
				return;
			}
			if (!this.isVisible()) {
				DBG('SIDEBAR', 'Showing sidebar, whole rendering');
				this.container.addClass("active").css("display","block");
				if (this.getRenderedContentIdIn1stSlot() && this.getRenderedContentIdIn2ndSlot()) {
					this.slot2Container.show();
					this.slot1Container.show();
					this.container.animate({ right: '-6px'}, 400).animate({ right: '-6px'}, 300);
				} else {
					this.slot1Container.show();
					this.container.animate({ right: '-6px'}, 400).animate({ right: '-6px'}, 300);
				}
				this.visible = true;
			} else {
				DBG('SIDEBAR', 'Showing sidebar, partial rendering', this.getRenderedContentIdIn1stSlot(), this.getRenderedContentIdIn2ndSlot());
				if (this.getRenderedContentIdIn1stSlot() && this.getRenderedContentIdIn2ndSlot()) {
					switch(preferedSlot) {
						case this.SLOT_1:
							this.slot1Container.show();
							this.container.animate({ right: '-6px'}, 400).animate({ right: '-6px'}, 300);
							break;
						case this.SLOT_2:
							this.slot2Container.show();
							this.container.animate({ right: '-6px'}, 400).animate({ right: '-6px'}, 300);
							break;
					}
				}
			}
			if (this.slot1ContentId == "product" || this.slot2ContentId == "product") {
				var visibleTab = $("#page_sidebar ul.tabs > li:visible:first");
				visibleTab.addClass("active first");

				if ( $("#page_sidebar ul.tabs > li:visible").length == 0) {
					$("#page_sidebar ul.content > li.description").addClass("active");
					$("#page_sidebar ul.content > li.description").html(__("Brak opisu"));
					$("#page_sidebar ul.tabs > li.description").addClass("active first").show();
					$("#page_sidebar ul.tabs > li.description").show();
				}

				if (_gaq && _gaq.push){
					$("#page_sidebar div.image a").bind("click", function() {
						_gaq.push(['_trackEvent','Karta-produktu-toplayer','Zdjecie']);
						return true;
					});
				}

				var current = $('#page_sidebar').find("ul.content li").eq(visibleTab.index());
				current.addClass("active");
// 				if (!current.hasClass("scrollDrawn")) { 
// 					$("#page_sidebar ul.content").mCustomScrollbar(); //current.mCustomScrollbar();
// 					current.addClass("scrollDrawn");
// 				}
			}
		},

		hide : function(preferedSlot) {
			if(this.isVisible()) {
				DBG('SIDEBAR', 'Hiding sidebar');
			$('#page_sidebar').unbind('mouseleave');
			$('#page_sidebar').unbind('mouseenter');

				if(this.getRenderedContentIdIn1stSlot() && this.getRenderedContentIdIn2ndSlot()) {
					DBG('SIDEBAR', 'Hiding partial sidebar');

					switch(preferedSlot) {
						case this.SLOT_1:
							this.hide1stSlot();
//                            this.container.animate({ right: '-6px'}, 200).animate({ right: '-350px'}, 150);
							break;
						case this.SLOT_2:
							this.hide2ndSlot();
							break;
						default:
							this.hide1stSlot();
							this.container.animate({ right: '-6px'}, 400).animate({ right: '-700px'}, 300);


							this.hide2ndSlot();

					}
				} else {
					DBG('SIDEBAR', 'Hiding full sidebar');
					this.container.animate({ right: '-6px'}, 400).animate({ right: '-700px'}, 300);

					this.hide1stSlot();
					this.hide2ndSlot();
					this.visible = false;
				}
			}
		},

		hide1stSlot : function() {
				if(this.isVisible()) {
					DBG('SIDEBAR', 'Hiding 1st slot sidebar');

					var contentId = this.slot2ContentId;
					if(contentId) {
						DBG('SIDEBAR', 'Transfering 2nd slot to 1st slot', contentId);
						var content = this.slot2Container.html();
						this.renderIn1stSlot(contentId, content);
						this.hide2ndSlot();
						this.slot1Container.show();
					} else {                  
						this.renderIn1stSlot(false, '');
						this.slot1Container.hide();
					}
				}
		},


		hide2ndSlot : function() {
				if(this.isVisible()) {
					DBG('SIDEBAR', 'Hiding 2nd slot sidebar');
					this.renderIn2ndSlot(false, '');
					this.slot2Container.hide();
				}
		},

		render : function(contentId, content) {
			return this.renderIn1stSlot(contentId, content);
		},

		renderIn1stSlot : function(contentId, content) {
			DBG('SIDEBAR', 'Rendeding content in 1st slot for ', contentId);
			this.slot1ContentId = contentId;
			this.slot1Container.html(content);
			this.slot1Container.find('a.close').click(function(){ 
				if(_gaq && _gaq.push){
					if(this.slot1Container.children().hasClass("cartDetails")){ 
						_gaq.push(['_trackEvent','Pasek-boczny','Koszyk','Zamknij']);
					}
					if(this.slot1Container.children().children().hasClass("productContent")){ 
						_gaq.push(['_trackEvent','Karta-produktu-toplayer','Zamknij']);
					}
				}
				this.hide(this.SLOT_1); return false; 
			}.bind(this));                
			if(this.isVisible()) {
				this.show(this.SLOT_1);
			}
		},

		renderIn2ndSlot : function(contentId, content) {
			DBG('SIDEBAR', 'Rendeding content in 2nd slot for ', contentId);
			this.slot2ContentId = contentId;
			this.slot2Container.html(content);
			this.slot2Container.find('a.close').click(function(){ 
				if(_gaq && _gaq.push){
					if(this.slot2Container.children().hasClass("cartDetails")){ 
						_gaq.push(['_trackEvent','Pasek-boczny','Koszyk','Zamknij']);
					}
					if(this.slot2Container.children().children().hasClass("productContent")){ 
						_gaq.push(['_trackEvent','Karta-produktu-toplayer','Zamknij']);
					}
				}
				this.hide(this.SLOT_2); return false; 
			}.bind(this));
			if(this.isVisible()) {
				this.show(this.SLOT_2);
			}
					
		},

		getRenderedContentId : function() {
			return this.getRenderedContentIdIn1stSlot();
		},

		getRenderedContentIdIn1stSlot : function() {
			DBG('SIDEBAR', 'Getting rendered contentId in 1st slot', this.slot1ContentId);
			return this.slot1ContentId;
		},

		getRenderedContentIdIn2ndSlot : function() {
			DBG('SIDEBAR', 'Getting rendered contentId in 2nd slot', this.slot2ContentId);
			return this.slot2ContentId;
		},

		getRenderedContentIn1stSlot : function() {
			DBG('SIDEBAR', 'Getting rendered content in 1st slot', this.slot1Container);
			return this.slot1Container;
		},

		getRenderedContentIn2ndSlot : function() {
			DBG('SIDEBAR', 'Getting rendered content in 2nd slot', this.slot2Container);
			return this.slot2Container;
		},

		getRenderedContent : function() {
			return this.getRenderedContentIn1stSlot();
		}
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/component_catalog.js */
var Catalog = function (apiInstance, cartRendererCallback) {

    var parameters         = {};

    var loadOnPageLimit    = 15;
    var loadPage           = 1;
    var startPage	   = null;
    var queryString        = null;
    var categoryIdentifiers= [];
    var tagFilters         = [];
    var sortBy             = [];
    var api = apiInstance;
    var validName          = "";

    var breadcrumbsCategoriesArray = [];
    var breadCrumbsArray     = [];
    var needsRedraw          = false;
    var totalLoaded          = 0;
    var totalFoundCount      = 0;
    var loadedProductsArray  = [];
    var loadedBrandsArray    = [];
    var loadedTagsArray      = [];
    var loadedCategoriesArray= [];
    var loadedBoughtProducts = [];
    var promotionsInCurrentView = false;

    var isLoading            = false;
    var hasMore              = true;
    var isEnabled            = true;

    var curTimesAllowed	     = 6; /* how many auto loads on scroll do we allow */
    var curTimesLoaded       = 0; /* how many times was auto loaded? */

    var searchProducts = function(full) {
        /* if(full) { frisco.showStateLoadingPanel(); } */
        if (isLoading  || !hasMore ) { return; }

        if (full == undefined ) { full = true; }        

        var mergedTagFilters = $.merge([], tagFilters);
        if (CONFIG.PRODUCT_TAG_SILENT_FILTER && CONFIG.PRODUCT_TAG_SILENT_FILTER.length) {
            $.merge(mergedTagFilters, CONFIG.PRODUCT_TAG_SILENT_FILTER);
        }

        isLoading = true;
        api.searchProducts(queryString, categoryIdentifiers, mergedTagFilters,
           function(totalFound, productsArray, brandsArray, tagsArray, categoriesArray, boughtProducts, containsPromotions) {

               if (full) {
                   promotionsInCurrentView = containsPromotions;
               }
               totalLoaded = (productsArray ? productsArray.length : 0) + (boughtProducts ? boughtProducts.length : 0);

               hasMore = totalLoaded == loadOnPageLimit;

               var drawPage = loadPage;
               loadPage++; isLoading = false;
               loadProducts(totalFound, productsArray, brandsArray, tagsArray, categoriesArray, boughtProducts);
               if (full) {
                   drawProducts();
               } else {
                   drawLoadedProducts(productsArray, boughtProducts, drawPage);
               }

               curTimesLoaded++;
               if (hasMore) {
                   $('#catalogLoadMoreLink').show();
                   $('#catalogLoadMoreLink').attr('href', __$(helpers.current_url({pno: loadPage})) );
                } else {
                   $('#catalogLoadMoreLink').hide();
                }
                /* frisco.hideStateLoadingPanel(); */
                frisco.renderProductsInCart();
           },
           loadOnPageLimit, loadPage, sortBy, full, true, session.user_id);
    };

    var drawCatalogContainer = function () {

         $('#page_content').html("");

        try {
            var name = '';
            if(sortBy.length) {

                $.each(sortBy, function(fieldName, sortOrder) {
                        name = name + " " + __("product_field_" + fieldName) + " " + __(sortOrder == 'a' ? 'ascending' : 'descending');
                });
            }
        } catch(e) { console.error(e); }

        try {
            var sort_name      = null;
            var sort_direction = null;

            if (parameters.sort) {
                $.each(parameters.sort, function(index) {
                    sort_name = index;
                    sort_direction = this == "a" ? "ascending" : "descending";
                });
            }

            $('#page_content').jqotesub(frisco.getTemplate('catalog_shelf'), {sort_order_name : parameters.sort ? lang.getTranslation("product_field_" + sort_name + "_" + sort_direction) : null });

            if(parameters.c && !parameters.bc) { 
                frisco.addCatalogBanners(); 
            }
        } catch(e) {
         }
        
    };

    var highlightRightNav = function() {
        if(!$('#rightNavigation').data("highlight")) {
            $('#rightNavigation').data("highlight",true)
            $('#rightNavigation').effect("highlight", {color: '#F3F8BA'}, 1000, function() {
                $('#rightNavigation').data("highlight",false);
            });
        }
    };


    var drawCategoriesSubtree = function(parent, categories, parentsList, stopAfter) {

        if (stopAfter == undefined ) {
            stopAfter = false;
        }

        /**
         * categories part
         */

        if (parent != 0) {

            parentsList.push(parent);

            $('#rightNavigation li[data_category_id=' + parent + ']').jqoteapp(frisco.getTemplate('catalog_category_navigation'), { parents: parentsList, categories : categories, breadCrumbs : breadCrumbsArray, currentId : parameters.c});
        } else {

            $('#rightNavigation #categoriesTree > li').jqoteapp(frisco.getTemplate('catalog_category_navigation'), { parents: parentsList, categories : categories, breadCrumbs : breadCrumbsArray, currentId : parameters.c} );
        }

        if (!stopAfter) {

            $.each(categories, function(index, category) {

                if ($.inArray(category.category_id, breadCrumbsArray) != -1 || category.category_id == parameters.c) {

                    if (category.child_count > 0 && category.children) {

                       drawCategoriesSubtree(category.category_id, category.children, parentsList, category.category_id == parameters.c);
                    }
                }
            });
        }

        if (parent) { parentsList.pop(); }

        highlightRightNav();
    };

    var drawCategoriesTree = function(parent, categories, parentsList, stopAfter) {

        $("#rightNavigation").html("");

        /**
         * tags part
         */
        var current_tags = [];

        if (tagFilters) {
            for (i in tagFilters) {
                current_tags.push(parseInt(tagFilters[i]));
            }
        }

        $("#rightNavigation").jqoteapp(frisco.getTemplate('catalog_sidebar'),{ currentId : parameters.c, current_tags: current_tags, brand_tags: loadedBrandsArray instanceof Array ? false : loadedBrandsArray, filter_tags : loadedTagsArray instanceof Array ? false : loadedTagsArray, showPromotionsFilter : promotionsInCurrentView });

        frisco.bindCheckboxes($('#rightNavigation .filters label'));

        $('#rightNavigation .filters label').bind('click', function() {
           var tag_ids = $('#rightNavigation .filters input[type=checkbox]:checked').map(function() { return $(this).val()} ).get();
           var newParameters = jQuery.extend({}, parameters);
           newParameters.t = tag_ids;
           core.setState('searchResults', null, newParameters);
        });

        drawCategoriesSubtree(parent, categories, parentsList);
        highlightRightNav();
    };

    var drawBreadCrumbs = function(categoriesTree) {

        var current_tags = [];

        if (tagFilters) {
            for (i in tagFilters) {
                current_tags.push(parseInt(tagFilters[i]));
            }
        }

	    if ( Object.keys(categoriesTree).length > 0) {
	    /* First try to build bread crumbs for categoriesTree */
    		var currentCategoryChildren = categoriesTree;
    		var breadCrumbCategories    = [];
    		var bc = [];
    		if (parameters.bc) {
        	    $.each(parameters.bc, function (index, item) { bc.push(item); });
    		}

    		//if (parameters.c && current_tags.length) { bc.push(parameters.c); }

    		if (current_tags.length) {
        	    current_tags.pop();
    		}

    		$.each(bc, function(index, item) {
        	    $.each(currentCategoryChildren, function(indexB, curCat) {
                    if (curCat.category_id == item) {
                            breadCrumbCategories.push(curCat);
                            currentCategoryChildren = curCat.children ? curCat.children : [];
                            return false; // break
                    }
        	    });
    		});

            breadcrumbsCategoriesArray = breadCrumbCategories;
    		try { $('.breadcrumbs').jqoteapp(frisco.getTemplate('breadcrumbs'), { categories : breadCrumbCategories, current_tags : current_tags, brandTags : loadedBrandsArray, filterTags: loadedTagsArray }); } catch (e) { console.error(e); }
        	drawHeader();

    	} else {
    	    /* But if there are no products in category try another approach */

	    var cbk = function (data) {
		if (!data || !data.category_id)
		    return false;

		var breadCrumbCategories    = [];
		//breadCrumbCategories.push({category_id: data.category_id, name: data.name});
		if (data.path)
		    $.each(data.path, function(index, cat) { breadCrumbCategories.push({category_id: cat.category_id, name: cat.name}); });
            breadCrumbCategories.reverse();
            try { $('.breadcrumbs').jqoteapp(frisco.getTemplate('breadcrumbs'), { categories : breadCrumbCategories, current_tags : current_tags, brandTags : loadedBrandsArray, filterTags: loadedTagsArray }); } catch (e) { console.error(e); }
		    drawHeader(data.name);
	    }

	    if (parameters.c)
		api.getCategory(parameters.c, cbk, true);
	    else {
		// search and other
		$('.breadcrumbs').jqoteapp(frisco.getTemplate('breadcrumbs'), {});
		drawHeader(); // search
	    }


    	}

    };

    var getCurrentCategoryObject = function(categories, category_id) {
            var found = null;

            $.each(categories, function(index, category) {
                if (category.category_id == category_id) {

                    found = category;
                    return false;
                }

                if (category.children) {
                    var tmp = getCurrentCategoryObject(category.children, category_id);
                    if (typeof tmp != "undefined") {
                        found = tmp;
                        return false;
                    }
                }
            }); // each

            if (found)
                return found;
            else
                return undefined;

    } // getCurrentCategoryObject()

    var drawHeader = function(curTitle) {

	    // Instead of using parameter cn from link we will try to resolve category name by id
       var lastTitle = (parameters.cn ? parameters.cn : "");
       if (curTitle)
             lastTitle = curTitle;

        var bcString = "";
        if ( (parameters.c)&&(parameters.c>0) ) {
            var cur = getCurrentCategoryObject(loadedCategoriesArray, parameters.c);
            if (typeof cur != "undefined") {
                lastTitle = cur.name;

                if (breadcrumbsCategoriesArray && breadcrumbsCategoriesArray.length) {
                    breadcrumbsCategoriesArray.reverse();

                    $.each(breadcrumbsCategoriesArray, function() {
                        bcString += " < " + this.name;
                    })
                }

    		    document.title = (parameters.q ? parameters.q +  " w ": "") + lastTitle + bcString + " - Frisco";
            }
        } // if ( (parameters.c)&&(parameters.c>0) )

        var headerContent = (parameters.q ? __("Wyniki wyszukiwania dla: ") + '"' + parameters.q + '"' : "") + (parameters.q && parameters.c ? __(" w ") : "") + lastTitle;

        try {

            var current_tags = [];

            if (tagFilters) {
                for (i in tagFilters) {
                    current_tags.push(parseInt(tagFilters[i]));
                }
            }


            if (current_tags.length) {
                if (loadedBrandsArray != undefined) {

                    $.each(current_tags, function(index) {
                        var tag_id = this;
                        if (loadedBrandsArray[tag_id] != undefined) {
                            headerContent += ", " + loadedBrandsArray[tag_id].name;
                        }
                    });
                }

                if (loadedTagsArray != undefined) {

                    $.each(current_tags, function(index) {
                        var tag_id = this;
                        if (loadedTagsArray[tag_id] != undefined) {
                            headerContent += ", " + loadedTagsArray[tag_id].name;

                        }
                    });
                }
            }
        } catch (e) { console.error(e); }

        $("#contentHeader > div > div.title > h3").html(headerContent);
    };

    var drawLoadedProducts = function(loadedProducts, loadedBoughtProducts, drawPage) {

        if (loadedBoughtProducts && loadedBoughtProducts.length) {

            if (drawPage == 1) $('div#bought_products div ul').html("");

            $('div#bought_products > div > ul').jqoteapp(frisco.getTemplate('catalog_page'), { products : loadedBoughtProducts, gaAttr : "Ostatnio-kupowane" });            

            /*var productWidth = 170;
            var contentWidth = $('ul#products').width();
            var productsInLine = parseInt(contentWidth / productWidth);
            var boughtPoducts = $('div#bought_products > div > ul').children().length;

            if(boughtPoducts > productsInLine && boughtPoducts % productsInLine != 0  ) {

                        var contentWidthBought = $('div#bought_products > div').width();
                        var boughtProductsInLine = parseInt(contentWidthBought / productWidth);

                        for(var oneLine = 3; oneLine < boughtProductsInLine; oneLine++) {
                                    if(boughtPoducts % oneLine == 0 && oneLine <= (boughtProductsInLine-1) ) {
                                            $('div#bought_products').width(oneLine * productWidth);

                                            $('div#promo_products').show();

                                            var promoProducts = productsInLine - oneLine;
                                            var contentWidthPromo = promoProducts * productWidth;

                                            $('div#promo_products').width(contentWidthPromo);
                                            $('div#promo_products > div').height($('div#bought_products > div').height());
                                    }
                        }
            }else if(boughtPoducts < productsInLine) {
                        $('div#promo_products').show();

                        var promoProducts = productsInLine - boughtPoducts;
                        var contentWidthPromo = promoProducts * productWidth;

                        $('div#promo_products').width(contentWidthPromo);
                        $('div#promo_products > div').height($('div#bought_products > div').height());
            }
            $('div#promo_products').after("<div id='other_products'><div><h4>"+ __('Pozostałe produkty') +"</h4></div></div>"); */

            $('div#bought_products').show();
            $('div#page_content > .part_header').show();

            if(loadedProducts.length > 0) {
                $('div#bought_products').after("<div id='other_products'><div><h4>"+ __('Pozostałe produkty') +"</h4></div></div>");
                $("ul#products").appendTo('div#other_products');
                $("a#catalogLoadMoreLink").appendTo('div#other_products');
            }
        } else if (loadedBoughtProducts !== false && drawPage == 1){
            $('div#bought_products').hide();
            $('div#page_content > .part_header').hide();
        }

        if (loadedProducts.length > 0) {
//             console.warn(frisco.getTemplate('catalog_page'));
            $('ul#products').jqoteapp(frisco.getTemplate('catalog_page'), { products : loadedProducts, gaAttr : "Kategoria" });
        }
    };
	
	var drawHeaderImage = function() {
		var categoryBanners = {
			4182 : "/img/home-banners/pqs.jpg",
			363 : "/img/home-banners/papier_renova.jpg"
		};
		
		var cId = parameters.c;
		for (var cb in categoryBanners) {
			if (cId == cb) {
				$("div.homeImage")
					.show()
					.append('<img src="'+categoryBanners[cb]+'"></img>');
				break;
			}
		}
	};
	
    var drawProducts = function() {

        needsRedraw = false;

        $('#rightNavigation').html('');

        drawCatalogContainer();

        /* ie8 typeError - w ie8 wylaczone  */
        //if(BrowserDetect.browser != "Explorer" && parseInt(BrowserDetect.version) > 8){
        drawCategoriesTree(0, loadedCategoriesArray, []);
        //}/* ie8 typeError  */

        drawBreadCrumbs(loadedCategoriesArray);
        drawLoadedProducts(loadedProductsArray, loadedBoughtProducts, 1);
		
		drawHeaderImage();

        if(loadedProductsArray.length == 0 && (!loadedBoughtProducts || (loadedBoughtProducts && loadedBoughtProducts.length == 0 ))) {

            $('div.scrollable').jqotepre(frisco.getTemplate('product_not_found'), {});
            $('div.productNotFound button').bind("click", function() {
                    $(this).after('<span class="sending">'+ __("Wysyłanie") +'...</span>');
                    $(this).remove();
                    var random = Math.floor(Math.random() * 2000 + 100 );
                    setTimeout(function(){
                        $('div.productNotFound textarea').after('<div class="success"><h4>'+ __("Dziękujemy") + '</h4>' + __("Twoje sugestie postaramy się uwzględnić w najbliższym czasie.") +'</div>');
                        $('div.productNotFound textarea').remove();
                        $('div.productNotFound .sending').remove();
                    },random)
            });
        }

        $("#page_content > div.scrollable").trigger('scroll');

        if (parameters.c) {

            api.getCategory(parameters.c, function(category) {
                var metas = document.getElementsByTagName('meta');
                for (i=0; i<metas.length; i++) {
                    if (metas[i].name == "Keywords") {
                        metas[i].content = "supermarket online, zakupy spożywcze, zakupy online warszawa," + category.description;
                    }
                    if (metas[i].name == "Description") {
                        metas[i].content = category.name  + ": pełny asortyment z dostawą do domu. Dobre ceny i gwarancja jakości";
                    }
                }
            });
        }

        friscoEvents.fire('catalog', friscoEvents.FEV_CATALOG_DATA_CHANGED, {});
    };

    var loadProducts = function(totalFound, productsArray, brandsArray, tagsArray, categoriesArray, boughtProducts) {

        totalFoundCount = totalFound;
        loadedProductsArray = productsArray;

        if (brandsArray) loadedBrandsArray = brandsArray;
        if (tagsArray) loadedTagsArray = tagsArray;
        if (categoriesArray) loadedCategoriesArray = categoriesArray;
        if (boughtProducts) loadedBoughtProducts = boughtProducts;

        totalFoundCount = totalFound;

    };

    var pub = {

        disable : function() {
            isEnabled = false;
            parameters = undefined;
        },
        enable : function() {

            isEnabled = true;
            friscoEvents.hook('catalog', friscoEvents.FEV_LOAD_MORE, function() {

                if (catalog && catalog.isAutoScrollActive()<0) return false;

                if (isEnabled) {
                    searchProducts(false);
                }
            });
        },

        forceSearch : function() {

            totalFoundCount = 0;
            loadedProductsArray = [];
            loadedBrandsArray = [];

            loadedTagsArray = [];
            loadedCategoriesArray = [];
            loadedBoughtProducts = [];
    	    if (startPage) {
                loadPage = startPage;
                curTimesAllowed = -1; // disable auto scroll products loading
            } else {
                loadPage = 1;
            }

            hasMore = true;
            isEnabled = true;
            searchProducts(true);
        },

        redraw : function () {

            drawProducts();
        },
        setParameters : function(params) {

            var new_parameters = { q: params.q, c : params.c, t : params.t, sort : params.sort, bc : params.bc, cn : params.cn, pno: params.pno };

            var compare = function(o1, o2) {

                if (typeof o1 != typeof o2) { return false; }
                if (typeof o1 != "object" && typeof o1 != "array") { if (o1 == o2) { return true; } return false; }

                var equals = true;
                $.each(o1, function(index, item) {

                    if (equals) { equals = equals && compare(item, o2[index]); }
                });

                return equals;
            };

            if (compare(new_parameters, parameters)) { return; }

            parameters = new_parameters;
            queryString = params.q;

            if (params.c) {
                if ((typeof params.c != "object" && typeof params.c != "array")) {

                    categoryIdentifiers = params.c ? [ params.c ] : [];

                } else {
                    categoryIdentifiers = params.c;
                }
            } else { categoryIdentifiers = []; }

            tagFilters          = params.t ? params.t : [];

            sortBy              = params.sort ? params.sort : [];
            breadCrumbsArray    = [];


	    startPage 		= (params.pno>0) ? params.pno : null;

            if (params.bc) { $.each(params.bc, function(index, item) { breadCrumbsArray.push(parseInt(item)); } ); }

            isLoading = false;
            needsRedraw = true;

	    curTimesLoaded = 0; // reset curTimesLoaded

            if (isEnabled) { this.forceSearch(); }
        },

        hasMoreProducts : function() { return hasMore; },
        getCurrentPage : function() { return loadPage; },

        isAutoScrollActive : function() {
    	   if (curTimesLoaded>curTimesAllowed)
        	    return -1; // disabled

	    return curTimesLoaded;
	}


    };

    friscoEvents.hook('frisco', friscoEvents.FEV_CATALOG_DATA_CHANGED, cartRendererCallback);

    /* handle load more link */
    $('#catalogLoadMoreLink').die('click').live('click', function(e) {
                e.preventDefault();
                curTimesLoaded = 0; //activate autoscroll again
                friscoEvents.fire('loadMoreLink', friscoEvents.FEV_LOAD_MORE, {});
                return false;
    });


    return pub;
};



/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/component_address_completer.js */
/**
 * widget handling whole address completion ..
 * 
 * you must support several definitions
 */
var bindAddressCompleter = function(name, domElementStreet, domElementPostcode, domElementCity, domElementStreetNo) {
	
    var apiUsers = new FriscoUsersApi(CONFIG.URL_API_USERS);	
	
	if(!name || !domElementStreet  || !domElementPostcode || !domElementCity) {
		console.error("Specify name, domElementStreet, domElementPostcode, domElementCity");
        return;
	}
	
	DBG('ADDRESS_COMPLETER', 'Binding to: ', domElementStreet, domElementPostcode, domElementCity, domElementStreetNo);
	
	// closures?
	
	var fieldHints = {};
	var lastCity;
    var lastStreet;
    var lastPostCode;
    
    $('#streetWarningYes').live('click', function() {
			$(domElementStreet).removeAttr('not-from-select').attr('custom-street', true);
			$(domElementStreet).removeClass("error").addClass("confirmed");
			$('p[class=error][for=street]').hide().parent('div.tooltip').hide();;
    });

    var cityConf = {
        source: function(request, response) {
			var _cityCbk = function(data) {    	    			
				if(data == undefined || data == null) {
					return;
				}    	    				
				var cities = [];
				for(var i = 0; i < data.length; i++) {
					cities.push(data[i].city);
				}
				cities = jQuery.unique(cities);
                response(cities);
			};    			
            lastCity = request.term;
			apiUsers.getCityHint(request.term, _cityCbk.bind(this));
        }.bind(this)
    };
    var cityCompletionObj = $('#' + domElementCity.attr('id') + 'Completion');
    if(cityCompletionObj.length) {
        cityConf.appendTo = cityCompletionObj;
    }    
    $(domElementCity).autocomplete(cityConf);

    var streetConf = {
	create: function(event, ui) { 
		this.streets = []; 
		this.ajaxFired = false;
	}.bind(this),
	
	setAjaxFired: function(fired) {
		if (fired)
		    this.ajaxFired = true;
		else
		    this.ajaxFired = false;
	}.bind(this),
		
        source: function(request, response) {
    			var curObj = this;
			var _streetCbk = function(data) {    	    			
        			$('#ajaxStreetLoading').hide();

				if(data == undefined || data == null) {
					return;
				}    	    				
				var streets = [];
				for(var i = 0; i < data.length; i++) {
					streets.push(data[i].street);
				}
				streets = jQuery.unique(streets);
				curObj.streets = streets;

            			response(streets.reverse());
			};    			
        		lastStreet = request.term;            
        		if ($(domElementCity).val() != '') {
        			$('#ajaxStreetLoading').show();
        			this.ajaxFired = true;
				apiUsers.getStreetHint(request.term, $(domElementCity).val(), _streetCbk.bind(this));                
			}
        }.bind(this),
        select: function( event, ui ) { 
		$(domElementStreet).removeAttr('not-from-select');
		$('p[class=error][for=street]').hide().parent('div.tooltip').hide();;

        },

	_checkStreets: function() {
		/* First checked if entered street is not on the last select loaded from ajax */
		var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(domElementStreet).val() ) + "$", "i" );		
		var matched = false;
		$.each(this.streets, function(index, value) {
		    if ( value.match( matcher ) ) {
			matched = true;
			return false;
		    }
		    
		});
		
		if (!matched) {
		    $('#ajaxStreetLoading').hide();
		    $(domElementStreet).attr('not-from-select', true);
		} else {
		    $(domElementStreet).removeAttr('custom-street');
		    $(domElementStreet).removeAttr('not-from-select');
		}
	
	}.bind(this),

        change: function( event, ui ) { 
	    var curObj = this;

	    /* If the street was entered and the city was entered, but autocomplete was not fired, because it was typed fast, then we will check that anyway */
	    if (!this.ajaxFired && $(domElementStreet).val().length>1 && $(domElementCity).val().length>1) {
		this.ajaxFired = true;
		$('#ajaxStreetLoading').show();
		apiUsers.getStreetHint($(domElementStreet).val(), $(domElementCity).val(), function(data) {
        			$('#ajaxStreetLoading').hide();

				if(data == undefined || data == null) {
					return;
				}    	    				
				var streets = [];
				for(var i = 0; i < data.length; i++) {
					streets.push(data[i].street);
				}
				streets = jQuery.unique(streets);
				curObj.streets = streets;
		
				streetConf._checkStreets();
		    }.bind(this)		
		);                
	    }
		    
	    if (!ui.item) {
		streetConf._checkStreets();		
	    } else {
		// check if entered name is not on the list
		$(domElementStreet).removeAttr('not-from-select');
	    }
	    

        }.bind(this) // change: function( event, ui )

    };
    var streetCompletionObj = $('#' + domElementStreet.attr('id') + 'Completion');
    if(streetCompletionObj.length) {
        streetConf.appendTo = streetCompletionObj;
    }   
    $(domElementStreet).autocomplete(streetConf).focus(function() {
	streetConf.setAjaxFired(false);
    });


    var postcodeConf = {
        source: function(request, response) {

			var _postcodeCbk = function(data) {    	    			
				if(data == undefined || data == null) {
					return;
				}    	    				
				var streets = [];
				for(var i = 0; i < data.length; i++) {
					streets.push(data[i].street);
				}
				streets = jQuery.unique(streets);
            			response(streets);
			};    			
            lastPostcode = request.term;
			apiUsers.getPostcodeHint(request.term, _postcodeCbk.bind(this));  
        }.bind(this)
    };
    var streetCompletionObj = $('#' + domElementStreet.attr('id') + 'Completion');
    if(streetCompletionObj.length) {
        streetConf.appendTo = streetCompletionObj;
    }    
    $(domElementStreet).autocomplete(streetConf);


	var postCodeCompleteFunc = function() {
		
		if(!friscoMutex.reserve('_bindCompleter' + name)) {
			return null;
		}  			
		
		// get postcode by city & street
		var postcodeVal = null;
		if(domElementPostcode.length == 2) {
			postcodeVal = $(domElementPostcode[0]).val() + '-' + $(domElementPostcode[1]).val();
		} else { 
			postcodeVal = $(domElementPostcode).val();
		}
		
		if(postcodeVal == "" || postcodeVal == "-") {
			DBG('ADDRESS_COMPLETER', 'Postcode is empty', typeof fieldHints["postcode"]);
			if(typeof fieldHints["postcode"] == 'undefined') {
    			// go go ;o    			
    			var city = $(domElementCity).val();
    			var street = $(domElementStreet).val();
    			var streetNo = $(domElementStreetNo).val();	    			

    			// mine data + insert postcode	    			
    			if(city != "" && street != "" && streetNo != "") {
    				var _fillData = function(data) {
    					if(!data || typeof data != 'object') {
    						return null;
    					}
    					
    					var postcode = new String(data.postcode);
                        if(!data.postcode) {
                            return;
                        }

    					if(postcode.length != 5) {
    						for (var i = 0; i <= 5 - postcode.length; i++) {
    							postcode = '0' + postcode;
    						}
    					}
    					if(domElementPostcode.length == 2) {
    						$(domElementPostcode[1]).val(postcode.substr(-3));
        					$(domElementPostcode[0]).val(postcode.substr(0, 2));    						
    					} else {
    						$(domElementPostcode).val(friscoHelpers.formatPostCode(postcode));
    					}    					
    				};
    				apiUsers.getPostcode(city, street, streetNo, _fillData);
    			}    			
			}
		} else if(postcodeVal.length == 6) {
			DBG('ADDRESS_COMPLETER', 'Postcode is filled', typeof fieldHints["postcode"]);
			// all postcode data, hints for address ..    			
			if(typeof fieldHints["postcode"] == 'undefined') {
    			fieldHints["postcode"] = true;    			
    			var cbk = function(data) {
    				if(data == undefined || data == null) {
    					return;
    				}
    				var places = [];
    				var cities = [];
    				for(var i = 0; i < data.length; i++) {
    					places.push(data[i].street);
    					cities.push(data[i].city);
    				}
/*
    				$(domElementStreet).autocomplete({source: places, 
    															appendTo: "#registerContent #streetCompletion",
    															position: "left bottom",
    															delay : 50});
*/
    				cities = jQuery.unique(cities);
/*
    				$(domElementCity).autocomplete({source: cities, 
														      appendTo: "#registerContent #cityCompletion",
														      position: "left bottom",
														      delay : 50});
*/
    				var city = $(domElementCity).val();
    				if ( (cities.length == 1)&&(city=='') ) {
    					$(domElementCity).val(cities[0]);
    				}
    				
    				fieldHints["city"] = true; fieldHints["street"] = true;	    				
    			}    			
    			// streets completion list
    			apiUsers.getAddresses(postcodeVal, cbk);
			}
		} 		
		setTimeout(function() {friscoMutex.release('_bindCompleter' + name)}, 150);
	}.bind(this);
	
	if(domElementPostcode.length == 2) {
		$(domElementPostcode[0]).change(postCodeCompleteFunc);
		$(domElementPostcode[1]).change(postCodeCompleteFunc);
	} else {
		$(domElementPostcode).change(postCodeCompleteFunc);		
	}
	$(domElementStreet).change(postCodeCompleteFunc);
	$(domElementStreetNo).change(postCodeCompleteFunc);
	$(domElementCity).change(postCodeCompleteFunc);	
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/component_delivery_checkup.js */
/**
  * Delivery checkup element
  * @author Pawel Furtak <pfurtak@frisco.pl>
  * Singleton object
  *
  */

var DeliveryCheckup = {
	isFormVisible : true,
	isInformationVisible: false,
	api : null,
	
	minDeliveryLocalVan: 100,
	minDeliveryCourier: 50,
	
	setApi : function(apiInstance) {
	    this.api = apiInstance;
	},
	
	doDeliveryCheckup : function() {
		var queryString = $('#deliveryCheckupZipcode').val();
			if (!this.api)  { console.log('[DeliveryCheckup] API is not set!'); return; }
			this.api.checkupDeliveryAddress(queryString, function(data) {
				if (!data) {
					Popup.loadMessage({ messageId: Popup.MESSAGES.SHIPMENT_TARGET_GETTER_ERROR, timeout: Popup.TIMEOUT.NORMAL });
					return;
				} else {
					$('.checkDelivery .form').hide();
					this.isFormVisible = false;
					if ( (data.x&&data.y)||(data.route && data.route>0) ) {
						isVan = true;
						deliveryCost = DeliveryCheckup.minDeliveryLocalVan;
					} else {
						isVan = false;
						deliveryCost = DeliveryCheckup.minDeliveryCourier;
					}
					
					$('.checkDelivery .supply').jqotesub(frisco.getTemplate('right_deliverycheckup'), {
						orderMinimalValue: data.minOrderValue, 
						deliveryStreet: $('#deliveryCheckupStreet').val(), 
						deliveryCity: $('#deliveryCheckupCity').val(), isVan: isVan
					});
					$('.checkDelivery .supply').show();
					this.isFormVisible = true;
				}
			});
	},
	
	_loadValidation : function() {
		/* load validation */
			$("#deliveryCheckupForm").validate({
			debug : false,
				rules : {
					deliveryCheckupZipcode: {
						required: true
					},
			},
			messages : {
				deliveryCheckupZipcode : {
					required : __("Kod pocztowy jest wymagany")
				},
			},
			errorPlacement: function(error, element) {
				error.insertAfter(element);
			},
			errorElement : "p",
			showErrors: function(errorMap, errorList) {
				var errorListSize = errorList.length;
				this.defaultShowErrors();
		
				if(errorListSize > 0) {
					$('p.error').each(function() {});
				}
			},
			highlight : function(element, errorClass) {
				$(element).addClass(errorClass);
			},
			unhighlight : function(element, errorClass) {
				$(element).removeClass(errorClass);
			},
			
			submitHandler : function (form) {
				DeliveryCheckup.doDeliveryCheckup();
			}
		}); // $("#deliveryCheckupForm").validate()
	}, // loadValidation();

    
	_bindDeliveryCheckup : function() {	       
	    $('#deliveryCheckupAnother').live('click', function() {
		$('.checkDelivery .form').show();
		this.isFormVisible = true;
		$('.checkDelivery .supply').hide();
		this.isFormVisible = false;
	    
	    })
	}, // bindDeliveryCheckup()
	
	isFormVisible : function() {
	    return this.isFormVisible;
	}, // isFormVisible()

	init : function() {
	    this._loadValidation();
	    this._bindDeliveryCheckup();
	}
    
}; // DeliveryCheckup


/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/component_savingplans.js */
/**
* Savingplans component
* @author Pawel Furtak <pfurtak@frisco.pl>
*
*/

var Savingplans = function(apiInstance, loggedUserId) {
	var api = apiInstance;
	
	var SAVINGPLAN_TYPE_SAVEBIG 			= 10;
	var SAVINGPLAN_TYPE_COMFORTUNLIMITED 	= 11;
	var SAVINGPLAN_TYPE_FAVOURITEPRODUCTS 	= 13;
	
	var _chooseSavingPlan = function(id) {
		/* Check if the allowed savingplan was choosed */
		if ( (id != SAVINGPLAN_TYPE_SAVEBIG)&&(id != SAVINGPLAN_TYPE_COMFORTUNLIMITED)&&(id!=SAVINGPLAN_TYPE_FAVOURITEPRODUCTS) )
			return false;
		
		/* Check if the API object was passed to this component */
		if (!api) 
			return false;
		
		var parameters = {savingplan_type: id}; // so content-type is set to avoid errors
		var parametersArray = $('#savingplan_parameters_form_'+id).serializeArray();
		$.each(parametersArray, function(i, obj) {
			parameters[obj.name] = obj.value;
		});
		
		api.chooseSavingPlan(loggedUserId, parameters, function(data) {
			if (typeof data != 'undefined' && data && data.success == true) {
				$('li[id*=Savingplan_]').removeClass('active');
				$('#Savingplan_'+id).addClass('active');
				
				// reload user profile and othes things
				var params = {}; params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_SYNC;
				var profile = friscoStorage.getFresh('userProfile', params);
				friscoStorage.getFresh('deliveryPrices');
				
				// store new savingplan and fire event triggering site components' changes
				var plan = friscoStorage.getFresh('savingPlan', params);
				if (plan != null) {
					plan.id = profile.savingplan_id;
					plan.type = profile.savingplan_type;
				}
				friscoEvents.fire('chooseSavingPlanChanged', friscoEvents.FEV_SAVINGPLAN_CHANGED, null);
				
				friscoEvents.fire('orderMinimalValueInit', friscoEvents.FEV_ORDER_MINIMAL_VALUE_CHANGED, null);
			} else {
				Popup.loadMessage({ messageId: Popup.MESSAGES.SAVINGPLAN_SET_ERROR, timeout: Popup.TIMEOUT.NORMAL });
			}
		}); // api.chooseSavingPlan(id, function(data))
		
		return true;
	} // var chooseSavingPlan = function(id)

	var _bindSavingplanChooseButtons = function() {
		$('a[id*=savingplan_choose_]').live('click', function() {
			var curId = $(this).attr('id').split('_')[2];
			if (!_chooseSavingPlan(curId)) {
				Popup.loadMessage({ messageId: Popup.MESSAGES.INVALID_SAVINGPLAN, timeout: Popup.TIMEOUT.NORMAL });
			}
		});
	} // var _bindSavingplanChooseButtons = function() 
	
	/* Attach to saving plan chooser buttons */	
	_bindSavingplanChooseButtons();	
	
	var pub = { 
		setApi : function(newApiInstance) { api = newApiInstance }
	}
	
	return pub;
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/component_tradedoubler.js */
var Tradedoubler = function() {

     var getCookie = function(name) {
	var dc = document.cookie;
	var prefix = name + "=";
	var begin = dc.indexOf("; " + prefix);
	
	if (begin == -1)
	{
		begin = dc.indexOf(prefix);
		if (begin != 0) return null;
	}
	else
	{
		begin += 2;
	}
	
	var end = document.cookie.indexOf(";", begin);
	
	if (end == -1)
	{
		end = dc.length;
	}
	
	return unescape(dc.substring(begin + prefix.length, end));
    }

    var setCookie = function(name, value, expires, path, domain, secure) {
	var today = new Date();
	
	today.setTime( today.getTime() );
	
	if ( expires )
	{
		expires = expires * 1000 * 60 * 60 * 24;
	}
	
	var expires_date = new Date( today.getTime() + (expires) );
	
	document.cookie= name + "=" + escape(value) +
	((expires) ? "; expires=" + expires_date.toGMTString() : "") +
	((path) ? "; path=" + path : "") +
	((domain) ? "; domain=" + domain : "") +
	((secure) ? "; secure" : "");
    } // var setCookie = function(name, value, expires, path, domain, secure)

    var getVar = function(name) {
	get_string = document.location.search;
	return_value = '';
	do
	{
		name_index = get_string.indexOf(name + '=');
		
		if(name_index != -1)
		{
			get_string = get_string.substr(name_index + name.length + 1,
			get_string.length - name_index);
			end_of_value = get_string.indexOf('&');

			if(end_of_value != -1)
			{
				value = get_string.substr(0, end_of_value);
			}
			else
			{
				value = get_string;
			}
			if(return_value == '' || value == '')
			{
				return_value += value;
			}
			else
			{
				return_value += ', ' + value;
			}
		}
	}
	while(name_index != -1)
	{
		space = return_value.indexOf('+');
	}
	while(space != -1)
	{
		return_value = return_value.substr(0, space) + ' ' +
		return_value.substr(space + 1, return_value.length);
		space = return_value.indexOf('+');
	}

	return(return_value);
	
    } // var getVar = function(name) 


    var redirTo = function() {
	var strReturn = "";
	var strHref = document.location.href;
	
	if ( strHref.indexOf("&url=") > -1 )
	{
		strReturn = strHref.substr(strHref.indexOf("&url=")+5);
	}
	else
	{
		strReturn = "http://www.frisco.pl/stn,tdLandingPage";
	}

	strReturn = strReturn.split("#")[0];

	return strReturn;
    } // function redirTo()


    var _saleTrackBackTag = function(order) {

	var tduid = getCookie("TRADEDOUBLER");
	
	if (!tduid)
	    tduid = 0;

	//Change the org ID to the correct one
	var organization = '1736422';

	//Change event ID
	var event = '263067';

	//The unique number sent to TradeDoubler. This number can be changed to an own,
	//customized format.
	var orderNumber = order.created_at; // order.user_id+order.order_id;

	//Change order value
	var orderValue = (order.last_payment.value / 100).toFixed(2);

	//Change order value
	var currency = 'PLN';

	//Build reportInfo, f1 = product ID, f2 = product name, f3 = product price,
	// f4 =quantity ordered.
	var reportInfo = "";
	//reportInfo = "f1="+ProductID+"&f2="+ProductName+"&f3="+ProductPrice+"&f4="+NumberOfProducts+"|f1="+ProductID+"&f2="+ProductName+"&f3="+ProductPrice+"&f4="+NumberOfProducts;
	//reportInfo = escape(reportInfo);

	return ("<img src=\"https://tbs.tradedoubler.com/report?organization="+organization+"&event="+event+"&orderNumber="+orderNumber+"&orderValue="+orderValue+"&currency="+currency+"&tduid="+tduid+"&reportInfo="+reportInfo+"\" height=1 width=1 border=0>");

    } // var saleTrackBackTag = function()


    var _leadTrackBackTag = function(leadNumber) {

	var tduid = getCookie("TRADEDOUBLER");
	if (!tduid)
	    tduid = 0;

	//Change the org ID to the correct one
	var organization = '1736422';

	//Change event ID
	var event = '263071';

	//The unique number sent to TradeDoubler. This number can be changed to an own,
	//customized format.
//	var leadNumber = Math.round((new Date().getTime() * Math.random()));

	//Build reportInfo, f1 = product ID, f2 = product name, f3 = product price,
	// f4 =quantity ordered.
	var reportInfo = "";
	//reportInfo = "f1="+ProductID+"&f2="+ProductName+"&f3="+ProductPrice+"&f4="+NumberOfProducts+"|f1="+ProductID+"&f2="+ProductName+"&f3="+ProductPrice+"&f4="+NumberOfProducts;
	//reportInfo = escape(reportInfo);

	return ("<img src=\"http://tbl.tradedoubler.com/report?organization="+organization+"&event="+event+"&leadNumber="+leadNumber+"&orderValue=1&tduid="+tduid+"&reportInfo="+reportInfo+"\" height=1 width=1 border=0>");

    } // var trackBackLeadTag = function()


    var pub = {
	tradeDoublerRedirect : function() {
    	    var mytduid = getVar('tduid');
    	    setCookie('TRADEDOUBLER', mytduid, 90, '/');
    	    window.location = redirTo();
	},
	
	leadTrackBackTag : function(leadNumber) { return _leadTrackBackTag(leadNumber); },
	saleTrackBackTag : function(order) { return _saleTrackBackTag(order); },

	isTradedoublerActive : function() { var tduid = getCookie("TRADEDOUBLER"); if (tduid && tduid.length>1) return true; else return false; }
	
    }

    return pub;
} // var Tradedoubler = function()

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/component_salesmore.js */
var Salesmore = function() {

     var getCookie = function(name) {
	var dc = document.cookie;
	var prefix = name + "=";
	var begin = dc.indexOf("; " + prefix);
	
	if (begin == -1)
	{
		begin = dc.indexOf(prefix);
		if (begin != 0) return null;
	}
	else
	{
		begin += 2;
	}
	
	var end = document.cookie.indexOf(";", begin);
	
	if (end == -1)
	{
		end = dc.length;
	}
	
	return unescape(dc.substring(begin + prefix.length, end));
    }

    var setCookie = function(name, value, expires, path, domain, secure) {
	var today = new Date();
	
	today.setTime( today.getTime() );
	
	if ( expires )
	{
		expires = expires * 1000 * 60 * 60 * 24;
	}
	
	var expires_date = new Date( today.getTime() + (expires) );
	
	document.cookie= name + "=" + escape(value) +
	((expires) ? "; expires=" + expires_date.toGMTString() : "") +
	((path) ? "; path=" + path : "") +
	((domain) ? "; domain=" + domain : "") +
	((secure) ? "; secure" : "");
    } // var setCookie = function(name, value, expires, path, domain, secure)

    var getVar = function(name) {
	get_string = document.location.search;
	return_value = '';
	do
	{
		name_index = get_string.indexOf(name + '=');
		
		if(name_index != -1)
		{
			get_string = get_string.substr(name_index + name.length + 1,
			get_string.length - name_index);
			end_of_value = get_string.indexOf('&');

			if(end_of_value != -1)
			{
				value = get_string.substr(0, end_of_value);
			}
			else
			{
				value = get_string;
			}
			if(return_value == '' || value == '')
			{
				return_value += value;
			}
			else
			{
				return_value += ', ' + value;
			}
		}
	}
	while(name_index != -1)
	{
		space = return_value.indexOf('+');
	}
	while(space != -1)
	{
		return_value = return_value.substr(0, space) + ' ' +
		return_value.substr(space + 1, return_value.length);
		space = return_value.indexOf('+');
	}

	return(return_value);
	
    } // var getVar = function(name) 


    var redirTo = function() {
	var strReturn = "";
	var strHref = document.location.href;
	
	if ( strHref.indexOf("&url=") > -1 )
	{
		strReturn = strHref.substr(strHref.indexOf("&url=")+5);
	}
	else
	{
		strReturn = "http://www.frisco.pl/stn,tdLandingPage/src,salesmore";
	}

	return strReturn;
    } // function redirTo()


    var _leadTrackBackTag = function(orderNumber, checksum) {

	var tduid = getCookie("SALESMORE");

	//Change the org ID to the correct one
	var organization = '1722222';
	
	var checksumCode = "202944211";

	//Change event ID
	var event 	 = '262067';
	
	var orderValue   = "1.00";
	var currency 	 = "PLN";
	
	var isSecure = true;

	var reportInfo = "";
	//reportInfo = "f1="+ProductID+"&f2="+ProductName+"&f3="+ProductPrice+"&f4="+NumberOfProducts+"|f1="+ProductID+"&f2="+ProductName+"&f3="+ProductPrice+"&f4="+NumberOfProducts;
	//reportInfo = escape(reportInfo);

	return ("<img src=\"http://tbl.tradedoubler.com/report?organization="+organization+"&event="+event+"&leadNumber="+orderNumber+"&checksum="+checksum+"&orderValue=1&tduid="+tduid+"&reportInfo="+reportInfo+"\" height=1 width=1 border=0>");

    } // var trackBackLeadTag = function()


    var pub = {
	salesMoreRedirect : function() {
    	    var mytduid = getVar('tduid');
    	    setCookie('SALESMORE', mytduid, 365, '/');
    	    window.location = redirTo();
	},
	
	leadTrackBackTag : function(orderNumber, checksum) { return _leadTrackBackTag(orderNumber, checksum); },
    }

    return pub;
}; // var Salesmore = function()

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/component_ribbon.js */
/**
 * Ribbon module
 * @author jacek@fablo.eu
 */

var Ribbon = (function() {
	var hidden = "";
	
	var pub = {
		init: function() {
			pub.loadHidden();
			$("#ribbons").on("click", ".close", function(){
				pub._hide($(this).closest(".ribbon-message"));
			});
		},
		
		saveHidden: function(container) {
			if (!hidden)
				hidden = "|";
			hidden += container + "|";
			$.cookie("hidden-ribbons", hidden, {expires: 7, path: "/"});
		},
		
		loadHidden: function() {
			hidden = $.cookie("hidden-ribbons") || "";
		},
		
		isHidden: function(container) {
			return hidden.indexOf("|"+container+"|") >= 0;
		},
		
		loadFromCms: function(cms) {
			cms.ribbon(function(ribbons){
				$.each(ribbons, function(i, ribbon){
					if (!pub.isHidden(ribbon.container))
						pub.load(ribbon);
				});
			});
		},
		
		load: function(ribbon) {
			if (ribbon.container && pub.isHidden(ribbon.container))
				return;
			ribbon = $.extend({position: "up", color: "blue"}, ribbon);
			var ribElem = $("<div>").addClass("ribbon-message").addClass(ribbon.position).addClass(ribbon.color).addClass(ribbon.container).data("container", ribbon.container);
			if (ribbon.custom)
				ribElem.append(ribbon.html);
			else
				$("<p>").html(ribbon.html).appendTo(ribElem);
			if (ribbon['switch'] == "on")
				$("<a href='#' class='close'></a>").appendTo(ribElem);
			if (ribbon.reusable)
				ribElem.addClass("reusable");
			ribElem.prependTo("#ribbons");
			frisco.stickyHeader(true);
			return ribElem;
		},
		
		get: function(container) {
			return $("#ribbons").find(".ribbon-message").filter("."+container);
		},
		
		hide: function(container, quiet) {
			pub._hide(pub.get(container), quiet);
		},
		
		_hide: function(ribbonElement, quiet) {
			ribbonElement.slideUp(400, function(){
				frisco.stickyHeader(true);
				if (!quiet && !$(this).hasClass("reusable"))
					pub.saveHidden($(this).data("container"));
			});
		}
	};
	
	$(pub.init);
	return pub;
})();

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/deferred_descriptions.js */
var DeferredDescriptionsLoader = function(folder){
    var cache = {};
    var fail_cache = {};
    var pending = {};
    var errors = {};
    
    return {
        get: function (category, callback, error) {
            if (cache[category])
                return callback(cache[category]);
            if (fail_cache[category]) {
                if (_.isFunction(error)) error();
                return;
            }
            if (pending[category]) {
                errors[category].push(error);
                return pending[category].push(callback);
            }
            pending[category] = [callback];
            errors[category] = [error];
            $.getJSON(folder + encodeURI(category) + '.js', function(data){
                cache[category] = data;
                while (callback = pending[category].pop())
                    callback(data);
            }).fail(function(){
                fail_cache[category] = true;
                while (errors[category].length) {
                    error = errors[category].pop();
                    if (_.isFunction(error)) error();
                }
            }).always(function(){
                delete pending[category];
                delete errors[category];
            });
        }
    }
};

var CategoryDescriptions = DeferredDescriptionsLoader('/js/categories_data/');

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/abc_recipes.js */
ABC_recipes = [
	{
		title: 'Schab',
		recipes: [
		{title: 'Schab pieczony z cebulą i jabłkami', container: 'przepis_schab_cebula', ingredients: 'ok. 25 cm długości schab bez kości najlepiej z warstwą tłuszczu • 2-3 łyżki sosu sojowego • 3 ząbki czosnku • 6-8 cienkich plastrów boczku • 1-2 jabłka • 3-4 cebule • pieprz czarny • 2 łyżki ostrej musztardy np. rosyjskiej, dijon • olej • sól • folia spożywcza • ręczniki kuchenne', text: 'W moździerzu przygotowujemy marynatę. Czosnek, trochę soli, pieprz, ucieramy, dolewamy 2-3 łyżki oleju i sos sojowy, łączymy składniki. Nacieramy pastą osuszony schab i odstawiamy. Obieramy cebulę i kroimy w półplasterki, jabłka obieramy i kroimy w ósemki. Rozgrzewamy patelnię i olej, obsmażamy schab i przekładamy do żaroodpornego naczynia. Smarujemy musztardą, okładamy boczkiem, obsypujemy cebulą i jabłkami. Pieczemy w żaroodpornym naczyniu pod przykryciem ok. 1,5 godziny.'},
		{title: 'Schab duszony<br> w sosie miodowo-migdałowym', container: 'przepis_schab_duszony', ingredients: 'ok. 500 g schabu • 2-3 łyżki mąki pszennej • Nać pietruszki • 2 łyżki oliwy • 1 łyżka masła • ok. 25 g migdałów w płatkach  (ok. 2 łyżek) • Skórka z ½ cytryny • sok z ½ cytryny • 2 łyżki płynnego miodu • sól • pieprz • Mielona kolendra ok. 1 łyżeczki • cynamon ok. 1 łyżeczki • ryż lub makaron • folia spożywcza • ręczniki kuchenne', text: 'Schab kroimy w ok. 2 cm paski grubości ok 1 cm. Mieszamy cynamon, kolendrę, sól i pieprz. Obtaczamy schab w przyprawach. Rozgrzewamy olej na patelni i obtaczamy kawałki schabu w mące, nadmiar strzepujemy i od razu smażymy krótko. Ściągamy z patelni. Na drugiej patelni prażymy migdały, dodajemy 1 łyżkę masła, dolewamy sok z cytryny, skórkę startą na tarce i miód. Chwilę razem gotujemy tworząc sos. Przerzucamy schab i krótko razem podgrzewamy. Serwujemy z ryżem lub makaronem obsypane natką pietruszki.'},
		{title: 'Schab pieczony<br> ze śliwkami w rękawie na zimno', container: 'przepis_schab_sliwki', ingredients: 'Ok. 25 cm długości schab bez kości najlepiej z warstwą tłuszczu • Skórka z 1 cytryny • 2 goździki • 2 ziarna jałowca • 2 ziarenka ziela angielskiego • majeranek ok. 1 łyżki • sól • miód do podlania przed pieczeniem • pieprz  w ziarnach ok. 10 szt. • 10-14 szt. śliwek suszonych a najlepiej wędzonych • Olej do smażenia • rękaw do pieczenia • folia spożywcza • ręczniki kuchenne', text: 'Schab osuszyć, długim nożem zrobić nacięcie w środku i rozszerzyć je trzonkiem drewnianej łyżki. Wsunąć w nacięcie śliwki ile wejdzie. Do moździerza wsypać ziarna pieprzu, jałowiec, goździki, ziele, sól i startą skórkę z cytryny, majeranek wszystko dokładnie utłuc podlać ok. 3 łyżkami oleju. Natrzeć schab i odstawić (najlepiej na całą noc do lodówki). Rozgrzać patelnię z olejem i na prawie dymiącym obsmażyć dokładnie z każdej strony, obracając szczypcami. Przełożyć do rękawa, podlać miodem z wierzchu, spiąć go z dwóch stron i przełożyć do naczynia żaroodpornego. Wstawić do pieca nagrzanego do 170 stopni na ok. 1,5 godziny.'},
		{title: 'Schabowy', container: 'przepis_schabowe', ingredients: '4 ok.1,5 cm grubości plastry schabu bez kości • 2 jaja • 2 łyżki śmietany, lub 3-4 łyżki mleka lub wody • mąka • Sól, pieprz, ostra papryka mielona • Bułka tarta do panierowania • folia spożywcza • ręczniki kuchenne', text: 'Kotlety układamy na desce do krojenia, nakładamy na nie kawałki folii spożywczej. Rozbijamy mięso z dwóch stron. Osuszamy ręcznikiem kuchennym, przyprawiamy z dwóch stron. Do jednej miseczki wsypujemy mąkę, do drugiej wbijamy jaja z mlekiem(śmietaną lub wodą) i rozkłócamy. Do trzeciej wsypujemy bułkę tartą. Ustawiamy patelnię na gazie, dodajemy smalec i od razu zabieramy się za panierowanie kotletów. Na początek w mące, później w jaju i na koniec w bułce tartej. Smażymy na jasno-złoty kolor. Serwujemy.'}
	]},
	{
		title: 'Kasza',
		recipes: [
		{title: 'Orzotto z pęczaku', container: 'przepis_orzotto', ingredients: '4 łyżki masła • 150 g pęczaku • 2 garście suszonych podgrzybków • pęczek dymki • bulion warzywny (ok. 500 l) • świeży majeranek • 2-3 łyżki parmezanu • folia spożywcza • ręczniki kuchenne', text: 'Grzyby zalewamy wodą i odstawiamy na min. 2 godziny. Po tym czasie odlewamy wodę, zalewamy jeszcze raz świeżą wodą, tak by zakryła grzyby. Wstawiamy na gaz i gotujemy ok. 15 minut. Odsączamy, zachowujemy cenny wywar, a grzybki drobno kroimy. Cebulę dymkę kroimy, wrzucamy na patelnię na której rozgrzewamy łyżkę masła. Mieszamy do lekkiego zeszklenia cebulki, dorzucamy grzyby, doprawiamy solą i pieprzem. Przesmażamy krótko. W osobnym rondlu rozgrzewamy kolejną, 1 sporą łyżkę masła , wsypujemy suchą, surową kaszę i mieszamy aż się trochę zeszkli. Dodajemy przesmażone grzyby z dymką, mieszamy i podlewamy chochlą bulionu. Mieszamy aż cały płyn zostanie wchłonięty, postępujemy dokładnie jak w przypadku risotto. Dolewamy na zmianę chochle bulionu, chochlę wywaru spod grzybów. Za każdym razem czekamy aż cały płyn zostanie wchłonięty. Kaszę gotujemy w ten sposób aż będzie al dente. Na koniec dosypujemy listki majeranku, resztę masła oraz parmezan (zostawiając ok. 1 łyżki do posypania już na talerzu). Podajemy gorące!'},
		{title: 'Placuszki/kotleciki z kaszy jaglanej<br>z szynką i zielonym sosem', container: 'przepis_placuszki', ingredients: '<u>Sos:</u> • 1 awokado • 4 łyżki groszku • Garść Rukli • Sól, pieprz świeżo mielony • Sok z połowy małej cytryny • 2 łyżki jogurtu naturalnego • ok. 5 łyżek dobrej oliwy z oliwek • garść świeżych ziół <br><u>Placuszki:</u> • 2 szklanki ugotowanej kaszy jaglanej • 1 łyżka szczypiorku • 1 łyżka naci pietruszki • 4 łyżki groszku • 2 czubate łyżki świeżo tartego parmezanu • 1 jajo • 100 ml mleka • 6 łyżek mąki pszennej • ½ łyżeczki proszku do pieczenia • Olej do smażenia • Szynka parmeńska, serrano do podania • folia spożywcza • ręczniki kuchenne', text: '<u>Sos:</u> składniki sosu miksujemy w malakserze i odstawiamy do schłodzenia. <br><u>Placuszki:</u> Ugotowaną kaszę mieszamy z groszkiem, parmezanem i poszatkowanym szczypiorkiem i natką. Osobno łączymy jajo z mlekiem, dosypujemy mąkę, proszek do pieczenia i ucieramy rózgą lub łyżką. Wlewamy do kaszy, łączymy i smażymy małe placuszki na rozgrzanym oleju. Odsączamy na ręczniku papierowym i podajemy z zimnym dipem.'},
		{title: 'Pomidory faszerowane kaszą gryczaną<br>z boczkiem i twarogiem', container: 'przepis_pomidory', ingredients: '4 duże pomidory • ½ szklanki kaszy gryczanej • 6 plastrów boczku wędzonego • 1 cebula • 1 ząbek czosnku • Ok. 100 g twarogu • 1 jajo • Listki świeżego tymianku i rozmarynu • Sól, pieprz • Oliwa z oliwek • folia spożywcza • ręczniki kuchenne', text: 'Piekarnik nagrzewamy do 160 stopni. Pomidory wydrążamy pozostawiając kapelusik. Kaszę gotujemy na sypko przyjmując proporcję 2 do 1 (2 woda, 1 kasza) w osolonym wrzątku. Boczek kroimy w kostkę przesmażamy na suchej patelni, aż będzie chrupiący i wytopi tłuszcz, przekładamy do ugotowanej kaszy. Cebulkę kroimy drobno i dusimy na tłuszczu spod boczku. Przekładamy do kaszy, do której dodajemy pokruszony twaróg, drobno poszatkowane zioła i wyciśnięty czosnek. Doprawiamy całość solą i pieprzem, łączymy z jajem i napełniamy wydrążone pomidory. Zapiekamy podlane wodą lub skropione oliwką ok. 20 minut.'},
		{title: 'Kasza manna razowa<br>z bananami i bakaliami', container: 'przepis_kasza', ingredients: '½ szklanki kaszy manny razowej (manny orkiszowej lub zwykłej) • 1 i ½ szklanki mleka lub wody • 3 łyżki miodu • 1 banan • ½ łyżeczki cynamonu • Szczypta soli • Rodzynki • morele • suszone śliwki • żurawina • folia spożywcza • ręczniki kuchenne', text: 'Do rondelka wlewamy mleko, wsypujemy kaszę i lekko solimy. Podgrzewamy na małym ogniu co jakiś czas mieszając. Banana kroimy w półplasterki, część rozgniatamy widelcem i dodajemy do kaszy. Bakalie kroimy drobniej i dodajemy do kaszy. Słodzimy ją miodem i doprawiamy cynamonem. Gotujemy razem ok 5-7 minut. Podajemy z kawałkami świeżego banana.'}
	]},
	{
		title: 'Placuszki',
		recipes: [
		{title: 'Placki z jabłkami i rodzynkami', container: 'przepis_placki_z_jablkami', ingredients: '2 jaja • 1,5-2 szklanek startego jabłka • 1 garść rodzynek • 1 szklanka mleka • ½ szklanki jogurtu naturalnego lub kwaśnej śmietany ew. serka homogenizowanego • Ok. 1 szklanki mąki (może wyjść więcej,  musicie uzyskać gęste ciasto) • ½ łyżeczki proszku do pieczenia • ½ łyżeczki sodki • Szczypta soli • Olej do smażenia • Cukier • Nutella • syrop klonowy • miód • folia spożywcza • ręczniki kuchenne', text: 'Do wysokiego naczynia wlewamy mleko, dodajemy jogurt lub śmietanę, całe jaja i mieszamy rózgą dokładnie łącząc składniki. Obrane jabłka ścieramy na tarce lub wrzucamy do malaksera wraz z rodzynkami (oczywiście jeśli używacie tarki rodzynek nie ścieracie ). Do mleka z jajami dodajemy mąkę, proszek, sodę i sól. Mieszamy rózgą do uzyskania dość gęstego ciasta, bardziej gęstego niż na naleśniki. Dodajemy starte jabłka i mieszamy. Smażymy na rozgrzanym oleju do uzyskania ładnego, złotego koloru. Serwujemy ciepłe, posypane cukrem lub jak kto woli np. z Nutellą, syropem klonowym lub miodem.'},
		{title: 'Placuszki z tuńczyka<br>z suszonymi pomidorami', container: 'przepis_placuszki_z_tunczyka', ingredients: '1 puszka tuńczyka w zalewie własnej • 2 suszone pomidory • 1/2 papryczki chili • sól, • pieprz • 1 jajo • 3 łyżki mleka • 2-3 łyżki płatków owsianych • 2 łyżki mąki • Szczypior • ok.2 łyżek soku z cytryny • parmezan 2 łyżki • 1 ząbek czosnku • suszony tymianek • olej do smażenia • folia spożywcza • ręczniki kuchenne', text: 'Tuńczyka odciskamy z zalewy i wrzucamy do miski, dodajemy drobno pokrojone chili, pomidory, czosnek i szczypiorek. Mieszamy dokładnie rozdrabniając tuńczyka widelcem, posypujemy startym parmezanem. Doprawiamy sokiem z cytryny, solą, pieprzem i tymiankiem. Jajo z mlekiem rozkłócamy dokładnie w kubeczku i łączyły z tuńczykiem. Posypujemy mąką i znów dokładnie łączymy widelcem. Dodajemy płatki owsiane i mieszamy. Porcjami smażymy na rozgrzanym oleju. Odsączamy na papierze. Podajemy gorące np. z musem z awokado.'},
		{title: 'Placki warzywne z fasolą i pieczarkami', container: 'przepis_placki_warzywne', ingredients: '1/2 cukinii • 1/2 puszki czerwonej fasoli • 10 pieczarek • 1 chili • 1 jajo • 1 ząbek czosnku • Ok. 100 g bułki tartej • Skórka z cytryny • Świeże zioła • Sól, • pieprz • Oliwa z oliwek • Masło • folia spożywcza • ręczniki kuchenne', text: 'Pieczarki zetrzeć na tarce lub w malakserze (wtedy krótko), można ew. pokroić w krótkie słupki. Przesmażamy na maśle. Fasolę miksujemy na gładką masę, a cukinię kroimy w kostkę. Mieszamy fasolę, z pieczarkami i cukinią. Doprawiamy poszatkowanym czosnkiem i chili, świeżymi ziołami, skórką z cytryny oraz solą i pieprzem. Dodajemy jajo, mieszamy dokładnie i po trochu dosypujemy bułkę tartą, aż uzyska gęstszą, odpowiednią konsystencję. Łączymy dokładnie składniki. Rozgrzewamy patelnię wraz z oliwą i smażymy zgrabne placuszki. Odsączamy na papierze.'},
		{title: 'Racuszki drożdżowe z cukrem', container: 'przepis_racuszki', ingredients: '300 g mąki • 20 g świeżych drożdży • 50 g masła • 2-3 łyżki cukru • 300 ml mleka • 2 jaja • Sól • 1 op. Cukru waniliowego • 300 ml oleju do smażenia • Cukier puder do podania • folia spożywcza • ręczniki kuchenne', text: 'Drożdże rozcieramy z 1 łyżeczką cukru, aż będą płynne. W osobny naczyniu łączymy rózgą jaja i ciepłe mleko. Masło rozpuszczamy i odstawiamy, żeby trochę przestygło. Do drożdży dolewamy jaja z mlekiem, dodajemy resztę cukru i cukier waniliowy, ciepłe masło, sól i mąkę. Ucieramy bardzo dokładnie drewnianą łyżką. Robimy to dość długo nawet 8-10 minut. Przykrywamy ściereczką i odstawiamy na 40 minut do wyrośnięcia. W rondelku rozgrzewamy olej, robimy próbę  z małą ilością, jeśli szybko wypłynie tłuszcz jest gotowy. Smażymy partiami po 2-3 minuty z każdej strony. Odsączamy na papierze i serwujemy gorące z nutellą lub cukrem pudrem.'}
	]},
	{
		title: 'Indyk',
		recipes: [
		{title: 'Medaliony z indyka z ananasem i serem', container: 'przepis_medaliony', ingredients: '4 sznycle z piersi  indyka • 4 Plastry ananasa z puszki • 4 łyżeczki dobrej żurawiny • 4 plastry sera żółtego • Papryka ostra • Sól, pieprz • Mąka • folia spożywcza • ręczniki kuchenne • papier do pieczenia', text: 'Kotlety z indyka lekko rozbić przykryte folią spożywczą. Doprawiamy solą, pieprzem i papryką, obtaczamy w mące, nadmiar strzepujemy. Krótko smażymy na rozgrzanym oleju ok. 3 minut z każdej strony. W tym czasie podgrzewamy piekarnik z opcją opiekania od góry. Ściągamy indyka z patelni i na tej samej smażymy do zezłocenia plastry ananasa. Medaliony układamy na blasze wyłożonej papierem do pieczenia, na każdego kładziemy plaster ananasa i plaster sera. Zapiekamy krótko, aż ser się rozpuści w miejscu zagłębienia kładziemy łyżeczkę żurawiny. Podajemy gorące.'},
		{title: 'Kotleciki z mielonego indyka', container: 'przepis_kotlecki', ingredients: 'Ok. 400 g piersi z indyka • 1 bułka czerstwa • 1 jajo • 3 łyżki śmietany 18% • Sól, • Pieprz • Skórka z cytryny • Nać pietruszki • Bułka tarta do obtoczenia • Olej do smażenia • folia spożywcza • ręczniki kuchenne', text: 'Bułkę zalewamy śmietaną i odstawiamy. Indyka kroimy na mniejsze kawałki, wycinając ew. ścięgna i wrzucamy do malaksera. Dodajemy skórkę z cytryny, sól, pieprz, drobno poszatkowaną natkę i miksujemy razem. Odkładamy do miski, a do malaksera wrzucamy bułkę ze śmietaną i jajo. Miksujemy całość na gładką masę. Łączymy ją dokładnie z indykiem i formujemy kotleciki. Obtaczamy w bułce i smażymy na rozgrzanym oleju. Kotleciki można odsączyć na ręczniku papierowym. Podajemy gorące.'},
		{title: 'Cały indyk pieczony', container: 'przepis_caly_indyk', ingredients: 'Indyk w całości ok. 4-5 kg • 2 wyszorowane pomarańcze • Sól • Pieprz świeżo mielony • 3 łyżeczki ostrej papryki czerwonej • 4 łyżki oleju • Sklarowane masło do polewania • folia aluminiowa • ręczniki kuchenne', text: 'ndyka oczyścić, opłukać i osuszyć. Z papryki, pieprzu, soli i oleju zrobić pastę. Natrzeć wewnątrz i na zewnątrz całego indyka. Do środka wpakować całe, wyszorowane, sparzone i ponacinane pomarańcze. Odstawić do lodówki na min. 3 godziny. Końcówki skrzydeł owinąć folią alu, żeby się nie paliły, zwinąć szyjkę do środka lub odciąć. Piekarnik nastawić do 260 st. Wstawić doń indyka ułożonego na boku w formie żaroodpornej, po 20 minutach obrócić na drugi bok, później po 20 minutach na pierś i na koniec na plecy. Zmniejszyć temperaturę do 160 st. wbić termometr w najgrubszą część indyka, najlepiej koło uda. Piec w zależności od wielkości ptaka ok. 40 min. na każdy kg indyka. Temperatura w środku nie powinna przekroczyć 80 st. Dodatkowo w trakcie pieczenie polewać indyka powstałym sosem i sklarowanym masłem.'},
		{title: 'Indyk pieczony z brzoskwiniami<br>i imbirem/udziec', container: 'przepis_indyk_pieczony', ingredients: 'Ok. 600 g piersi z indyka •  1 puszka brzoskwiń • 2 cm kawałek imbiru • 1 łyżeczka kolendry w ziarnach • 1 łyżeczka cynamonu • 1 łyżeczka pieprzu • 1 łyżeczka anyżu • Skórka z cytryny • 1 chili • Sól • Olej • 2 łyżki masła • Śliwki • folia spożywcza • ręczniki kuchenne • rękaw do pieczenia', text: 'Kolendrę i anyż podgrzewamy na suchej patelni, jak zacznie pachnieć ściągamy z ognia i wrzucamy do moździerza. Dodajemy pieprz i ucieramy. Dodajemy skórkę z cytryny, drobno pokrojoną chili, imbir i sól. Ucieramy dodając po trochu 1-2 łyżki oleju. Powstałą pastą nacieramy indyka. Odstawiamy do zmacerowania najlepiej na całą noc do lodówki. Piekarnik nagrzewamy do 150 st. Do rękawa do pieczenia wkładamy indyka wraz z zalewą jaka powstała, dokładamy kawałki brzoskwiń, zawijamy i pieczemy. Jeśli chcemy uzyskać nadziewaną pierś, nacinamy jak przy schabie, wkładamy suszone brzoskwinie do środka i pieczemy jak wyżej. Po upieczeniu, odlewamy sok wraz z brzoskwiniami do rondelka, indyka zostawiamy w ciepłym miejscu. Miksujemy składniki sosu blenderem, podgrzewamy do odparowania części płynu, dodajemy 1 łyżkę masła. Indyka kroimy w plastry i podajemy z gorącym sosem brzoskwiniowym.'}
	]},
	{
		title: 'Ciasta klasyczne',
		recipes: [
		{title: 'Sernik', container: 'przepis_sernik', ingredients: '1 kg twarogu (ser mielony sprzedawany w wiaderkach, np. President czy drOetker) • 6 jaj • 1,5 szkl. cukru (najlepiej tego drobnego do pieczenia) • 0,5 szkl. oleju • 2 budynie • 1 op. cukru waniliowego • ew. łyżeczka esencji waniliowej • 160 g ciastek kakaowych • ok. 80 g roztopionego masła • 2 łyżki cukru trzcinowego • szczypta soli • 1 łyżeczka mąki ziemniaczanej', text: 'Oddzielamy żółtka od białek, wszystkie składniki, poza białkami wrzucamy do wysokiej miski i łączymy za pomocą blendera. Nie przejmujecie się, jeśli wyda Wam się, że wychodzi zbyt rzadki. Blachę do pieczenia (okrągła o śr. 20-24 cm, lub prostokątną ok.22 na 32 cm) wykładamy papierem do pieczenia. Ciastka wkładamy do woreczka i kruszymy lub wkładamy do pojemnika z nożykami, czyli dostawki do blendera i kruszymy. Dodajemy lekko przestudzone masło, wcześniej rozpuszczone. podsypujemy całość cukrem trzcinowym i mieszamy. Na spód formy wysypujemy ciastkową masę, wyrównujemy i przyklepujemy. Białka ubijamy na sztywno ze szczyptą soli i łyżeczką mąki ziemniaczanej, powoli łączymy z masą serową. Całość wylewamy na wcześniej przygotowaną formę. Na środkowej półce, w piekarniku nagrzanym do 160 st. ok. godziny do półtorej. Można w trakcie pieczenia przykryć górę sernika papierem do pieczenia, żeby wierzch się zbytnio nie przypiekł.'},
		{title: 'Biszkopt z galaretką i owocami', container: 'przepis_biszkopt', ingredients: '3 jaja • 1/3 szklanki cukru • 1/3 szklanki oleju • 1 szklanka mąki pszennej tortowej • 1 łyżeczka proszku do pieczenia • 1 op. cukru waniliowego • 1 łyżeczka dobrej esencji waniliowej • szczypta soli • 2 galaretki • ulubione owoce', text: 'Zaczynamy od upieczenia biszkoptu. Piekarnik nagrzewamy do 160 stopni. Jaja rozbijamy do wysokiej miski i ubiajmy z solą na puszystą pianę. Dodajemy cukier i cukier wanilinowy miksujemy nadal. Dolewamy olej i esencję nadal ubijamy na wysokich obrotach. Na koniec przesiewamy mąkę i na niższych obrotach miksera łączymy z masą jajeczną. Blaszkę wykładamy papierem do pieczenia i wylewamy ciasto. Pieczemy ok. 25-30 minut do suchego patyczka. Wyciągamy z formy, przewracamy do góry nogami, ściągamy delikatnie papier i studzimy najlepiej na kratce. Przekładamy z powrotem do formy lub otaczamy blaszanym kołnierzem. Galaretki przygotowujemy wg opisu na opakowaniu, choć ja dodaję mniej wody na 1 galaretkę 400 ml. Na wystudzonym biszkopcie układamy owoce, zalewamy tężejącą galaretka i wstawiamy do lodówki do całkowitego stężenia.'},
		{title: 'Drożdżowe mojej mamy', container: 'przepis_drożdżowe', ingredients: '50 g świeżych drożdży • 1 szklanka cukru <br><span>•</span>   1 szklanka mleka • 3 jaja • 1 szklanka oleju • 1 op. cukru waniliowego • 0,5 kg mąki pszennej • szczypta sol', text: 'Do miseczki wkruszamy drożdże, zasypujemy je cukrem i cukrem wanilinowym. Wbijamy całe jaja, dolewamy olej i mleko. Nie mieszamy tylko przykrywamy szczelnie i wstawiamy na noc do lodówki. Na drugi dzień do wysokiej miski wsypujemy mąkę, szczyptę soli i wlewamy zaczyn drożdżowy. Wyrabiamy mikserem, aż składniki ładnie się połączą. Wylewamy ciasto do formy pokrytej papierem do pieczenia. Odstawiamy do lekkiego wyrośnięcia. Piekarnik nagrzewamy do 170 stopni. W tym czasie myjemy owoce, osuszamy i przekrajamy na ćwiartki. Przygotowujemy kruszonkę. Z podanych składników zagniatamy krótko ciasto i rozkruszamy je palcami. Na rosnącym cieście układamy owoce, skórką w stronę ciasta i posypujemy je kruszonką jednocześnie rozkruszając między palcami. Pieczemy ok. 30 minut do tzw. suchego patyczka.'},
		{title: 'Murzynek w czekoladzie', container: 'przepis_murzynek', ingredients: '125 g masła • 3 jajka • 2 szklanki mąki pszennej tortowej • 1,5 szklanki cukru • 1 szklanka mleka • 5 łyżek powideł lub dżemu śliwkowego • 2 łyżeczki kawy rozpuszczalnej instant • 1 łyżeczka sody oczyszczonej • 5 łyżeczek kakao • szczypta soli • 1 łyżeczka mąki ziemniaczanej', text: 'Do rondelka z grubym dnem wkładamy masło, wlewamy mleko, wsypujemy cukier, kakao i kawę. Na małym ogniu, często mieszając rozpuszczamy i łączymy składniki. Lekko zagotowujemy przez 2 minuty. Odstawiamy do przestygnięcia dodają szczyptę soli. Mąkę przesiewamy z sodą. Oddzielamy żółtka od białek. Do przestudzonej masy kakaowej wsypujemy mąkę i ucieramy mikserem, dodajemy powidła i ucieramy łyżką. Nagrzewamy piekarnik do 170 stopni i przygotowujemy formę do pieczenia. Wykładamy ją papierem do pieczenia lub smarujemy masłem i wysypujemy mąką/kaszą manną/bułką tartą. Do masy czekoladowej dodajemy żółtka, wszystko razem dokładnie mieszamy. Białko ubijamy na sztywną pianę, dodają mąkę ziemniaczaną. Delikatnie i stopniowo łączymy z masą kakaową. Na początek dając ok. 1/3 ilości piany, żeby masę rozluźnić, a później resztę. Wylewamy do formy i pieczemy ok. 45 minut do „suchego patyczka”. W tym czasie przygotowujemy polewę. Śmietankę podgrzać w rondelku, ściągnąć z gazu, dodać do niej pokruszoną czekoladę i mieszać aż do rozpuszczenia się składników i ładnego połączenia. Polać nią wystudzone ciasto i pozostawić do zastygnięcia.'}
	]},
	{
		title: 'Wielkanoc',
		recipes: [
		{title: 'Zakwas na żur / kiszenie żuru', container: 'przepis_zakwas', ingredients: '100 g mąki żytniej razowej (10 łyżek) • kawałek skórki razowego chleba • 2 ząbki czosnku', text: 'Do słoja lub kamionkowego garnka wkładamy wszystkie składniki i zalewamy 2 szkl. Letniej, przegotowanej wody. Odstawiamy na 4-5 dni. Po tym czasie powinien pojawić się przyjemny kwaskowy smak i charakterystyczny zapach. Im dłużej zakwas stoi tym robi się kwaśniejszy. Jeśli chcecie zrobić większą ilość po 4-5 dniach należy rozlać go do butelek, zakorkować i trzymać w chłodnym miejscu. Zakwas na barszcz biały robimy z mąki pszennej a na żur z żytniej razowej. '},
		{title: 'Żurek domowy', container: 'przepis_żurek', ingredients: '2 l wywaru warzywnego gotowanego na żeberkach • od 300-500 ml zakwasu, w zależności jak bardzo jest kwaśny • 200 g boczku wędzonego • 3 kiełbasy polskie, surowe • 2 ząbki czosnku • 1 duża cebula • 1 ugotowana marchew z wywaru • 2 łyżeczki świeżo tartego chrzanu (lub kupnego) • 2-3 łyżeczki majeranku • świeżo mielony pieprz • sól • jaja ugotowane na twardo • ew. śmietanka 30%', text: 'Podgrzewamy bulion, wkładamy do niego kiełbasy. Na osobnej patelni przesmażamy pokrojony boczek, który dodajemy do bulionu(uwaga, kiełbasę parzymy nie gotujemy wtedy będzie soczysta nie wiórowata). Na tej samej patelni przesmażamy cebulkę i do gara. Ugotowaną kiełbasę wyławiamy, studzimy i kroimy w plastry. Do zupy dolewamy zakwas, na początek mniej, później jeśli za mało kwaśny dolewamy więcej.  Dodajemy całe ząbki czosnku, doprawiamy całość chrzanem, majerankiem, pieprzem i solą. Gotujemy ok. 3-4 minut, dodajemy białą kiełbasę, pokrojoną w plastry marchew . Zabielamy zupę śmietaną, którą wcześniej hartujemy małą ilością zupy.'},
		{title: 'Pasztet', container: 'przepis_pasztet', ingredients: '1 kg łopatki wieprzowej • 250 g boczku surowego • 250-300 g wątróbki drobiowej • 2 marchewki • 1 pietruszka • 1/2 selera • 2 listki laurowe • 3 ziela angielskie • gałka muszkatołowa • pieprz czarny w ziarnach, ok. 7 ziarenek • sól • pieprz • 3-4 jaja • 3-4 cebule żółte • 3 kajzerki • 2-3 łyżki masła klarowanego', text: 'Mięso wkładamy do garnka i powoli zagotowujemy, po ok. 30 minutach od zagotowania dodajemy włoszczyznę i przyprawy: listki laurowe, ziele angielskie, kilka ziaren pieprzu. Gotujemy kolejne 20 minut. Dodajemy boczek i dalej gotujemy na małym gazie 30 minut. Odcedzamy, bulion zlewamy do słoików i mrozimy lub od razu gotujemy na nim zupę. Mięso studzimy. Wątróbkę przesmażamy na maśle klarowanym krótko, tylko tyle by się ścięła. Ściągamy ją i studzimy. Na tej samej patelni smażymy cebulkę drobno poszatkowaną dotąd aż się zeszkli.  Bułki zalewamy wodą. Mielimy mięso, wątróbkę, warzywa, odciśnięte kajzerki, cebulę. Jeśli chcemy pasztet o miałkiej konsystencji mielimy wszystko dwa razy. Dokładnie mieszamy, przyprawiamy solą i pieprzem oraz świeżo tartą gałką muszkatołową.  Dodajemy żółtka a białka ubijamy na sztywno. Delikatnie łączymy z masą mięsną i przekładamy wszystko do keksówek wyłożonych papierem do pieczenia. Pieczemy ok. 1,5-2 godzin w piekaniku nagrzanym do 160 st. Podajemy po wystudzeniu.'},
		{title: 'Mazurek kajmakowy z orzechami', container: 'przepis_mazurek', ingredients: '320 g mąki pszennej • 200 g zimnego masła • 4 łyżeczki cukru pudru • 10 łyżek lodowatej wody, najlepiej z kostkami lodu w miseczce • 3 żółtka, już rozbite • 1,5 łyżeczki dobrej esencji waniliowej • szczypta soli <br><u>Masa kajmakowo-orzechowa:</u> 2 garście migdałów • 2 garście orzechów włoskich • 1 garść orzechów nerkowca • 300 g śmietanki 36% • 12 łyżek cukru trzcinowego Demerara • szczypta soli', text: 'Mąkę z cukrem pudrem przesiewamy na stolnicę obkładając kawałkami zimnego masła. Dodajemy żółtko i wodę i szybko zagniatamy całość. Szybko zarabiamy ciasto nożem rozcierając i krojąc całość. Formujemy placek grubości ok. 2 cm i średnicy ok. 10 cm. Zawijamy w folę spożywczą i wkładamy do lodówki na min. 30 minut. Cukier trzcinowy wsypujemy do rondelka z grubym dnem i na wolnym ogniu tworzymy karmel. Nie mieszamy łyżką ew. poruszamy lekko rondelkiem, żeby cały cukier się rozpuścił. Dodajemy sól i zestawiamy z ognia. Trzymając w jednej ręce rózgę drugą ręka dodajemy po troszku chłodnej śmietanki. Szybko mieszamy i znów dodajemy śmietankę. Nie wlewamy całej na raz bo karmel szybko się ostudzi i nam stężeje tworząc grudki. Sos odstawiamy do przestygnięcia. Migdały zalewamy wrzątkiem lub jeśli są nieco starsze podgrzewamy w rondelku z wodą i jeszcze gorące obieramy ze skórki. Orzechy nerkowca a później obrane migdały prażymy na złoty kolor na suchej patelni. Kroimy na kawałki. Ciasto na spód rozwałkowujemy na grubość ok. 0,4 mm, wykładamy formę wyłożoną papierem do pieczenia, nakłuwamy całość. Przykrywamy pergaminem i wysypujemy nań suchą fasolę lub ceramiczne kulki do obciążania ciasta. Pieczemy w temp. 180-190 stopni przez 10 minut. Ściągamy fasolę i papier i dopiekamy jeszcze przez ok. 15 minut na złoty kolor. Po przestudzeniu wylewamy na spód sos karmelowy i obsypujemy całość obficie orzechami. Wstawiamy do lodówki do stężenia. Sos karmelowy nie stężeje nam całkowicie, będzie lepiący, lekko ciągnący i…bardzo słodki.'},
		{title: 'Baba wielkanocna', container: 'przepis_baba', ingredients: '<strong>Pamiętajcie by miały podobną temperaturę, stąd wyciągnijcie co trzeba z lodówki na dzień przed pieczeniem</strong><br>2 szklanki mąki pszennej • 40 g świeżych drożdży • 2/3 szklanki mleka • 100 g masła • 5-7 żółtek • 100 g cukru • aromat waniliowy lub pomarańczowy • 1/2 szklanki rodzynek • kieliszek białego rumu (nie jest konieczny) • 2 łyżeczki kandyzowanej skórki pomarańczowej (u mnie domowej roboty) • szczypta soli • masło do natłuszczenia formy<br><u>Lukier:</u> 200 g cukru pudru • 2 łyżeczki soku z cytryny • po 1 łyżeczce rumu i wody', text: 'Mleko lekko podgrzewamy, drożdże rozcieramy z 1-2 łyżeczkami cukru na pastę, dodajemy łyżkę mąki, rozcieramy dalej i dolewamy ciepłe (nie gorące!) mleko, wszystko robimy w wysokim naczyniu. Można również, tak jak ja na filmie, do mleka dodać rozkruszone drożdże i cukier i rozetrzeć razem. W ten sposób trochę trudniej połączyć dobrze składniki, ale się da. Odstawiamy zaczyn na bok do wyrośnięcia. W tym czasie rozpuszczamy masło na małym gazie. Przesiewamy mąkę do wysokiej miski (u mnie od robota stacjonarnego). Rodzynki zalewamy wrzątkiem i rumem odstawiamy na 10-15 minut, aż zmiękną. Do mąki dolewamy wyrośnięty zaczyn i zaczynamy mieszać hakiem. Żółtka ucieramy z cukrem na biały, puszysty krem, dodając na koniec szczyptę soli. Dodajemy masę jajeczną do ciasta i mieszamy nadal. Dosypujemy odsączone rodzynki, skórkę pomarańczową i aromat. Na koniec dolewamy ciepłe masło. Po połączeniu się składników i po tym jak ciasto przestanie się kleić do ścianek, odstawiamy miskę przykrytą ściereczką w ciepłe miejsce na ok. 45 minut do wyrośnięcia.  Piekarnik nagrzewamy do 180 stopni. Wyrośnięte ciasto przekładamy do dobrze natłuszczonej formy i znów odstawiamy do wyrośnięcia na ok. 30-45 minut. Babę pieczemy ok. 30-40 minut do tzw. suchego patyczka. Możecie tak jak ja podpiec ją jeszcze bez formy, odwróconą już dla koloru, ale nie jest to konieczne. Po ostygnięciu polewacie ją lukrem, który najłatwiej jest zrobić w małym malakserze łącząc wszystkie składniki. Smacznego!'}
	]},
	{
		title: 'Wołowina',
		recipes: [
		{title: 'Tatar czy też befsztyk tatarski', container: 'przepis_tatar', ingredients: 'ok. 600 g polędwicy wołowej • 2 cebule • 8 ogórków korniszonów • 2-3 łyżki maggi / sos worcestershire / sos sojowy • 4 surowe żółtka • sól, pieprz • 2-3 oliwy z oliwek • alternatywne dodatki: kapary, oliwki, marynowane grzybki, marynowana papryka', text: 'Mięso mielimy lub bardzo drobno siekamy. Wrzucamy do miski i doprawiamy świeżo mielonym pieprzem, Maggi lub sosem sojowym czy też Worcestershire dosalamy jeśli jest potrzeba oraz dolewamy oliwę. Cebulę i korniszony drobno kroimy. Oddzielamy żółtka od białek. Na talerzu układamy krążek z mięsa o średnicy ok. 4-5 cm, na środku robimy dołek do którego wlewamy  żółtko, a na około sypiemy warzywa. Podajemy lekko schłodzone.'},
		{title: 'Befsztyk', container: 'przepis_befsztyk', ingredients: '4 steki z polędwicy wołowej grubości ok. 1,5cm i wadze ok. 150-170 g • 2 łyżki oliwy z oliwek + do posmarowania • 2 łyżki masła do smażenia + 6-8 łyżek masła do podania • sól najlepiej w płatkach • pieprz czarny świeżo mielony • 3 łyżeczki zielonego marynowanego pieprzu • świeży rozmaryn', text: 'Steki osuszyć papierowym ręcznikiem, ubić lekko dłonią i uformować. Posmarować oliwą i odstawić. 4 łyżki masła rozgnieść widelcem, doprawić lekko pieprzem i drobno pokrojonym świeżym rozmarynem.  Położyć na foli spożywczej, zrolować i wstawić do zamrażalnika. Rozgrzać oliwę i masło na patelni, jak już masło przestanie się pienić położyć nań befsztyki. Smażyć ok 4 minuty z każdej strony, kontrolując przez dotyk stopień wysmażenia. Po usmażeniu należy doprawić solą i pieprzem z każdej strony, ściągnąć z patelni, przykryć kawałkiem foli aluminiowej i potrzymać tak ok. 4 minut. Masło wyciągamy z zamrażarki, odwijamy folię i kroimy w 4 mm plastry. Befsztyki kładziemy na talerz, na każdego z nich kładziemy plaster masła, posypujemy marynowanym pieprzem i podajemy.'},
		{title: 'Gulasz wołowy', container: 'przepis_gulasz', ingredients: '<strong>Dla 4 - 6 osób:</strong><br>800 g łopatki wołowej • 3 duże cebule • 2 ząbki czosnku • 750 ml bulionu wołowego • czerwona i zielona papryka • 2 łyżki słodkiej, mielonej papryki • 2 łyżeczki papryki ostrej • łyżeczka węgierskiej pasty paprykowej (lub łyżeczka mielonej ostrej papryki) • 2 liście laurowe • 2 ziela angielskie • szczypta mielonego kminku • mąka • olej do smażenia • sól • świeżo mielony czarny pieprz • mały koncentrat pomidorowy', text: 'Mięso kroimy w sporą kostkę ok. 2 cm x 2 cm. Oprószamy mąką, nadmiar strzepując i partiami smażymy na bardzo rozgrzanej oliwie. Każdą z usmażonych porcji przekładamy do dużego garnka. Po wysmażeniu całego mięsa, na tej samej patelni przesmażamy cebulę pokrojoną w kostkę i przekładamy do mięsa. Kroimy paprykę w kostkę i dodajemy do mięsa. Ząbki czosnku drobno kroimy i wrzucamy do garnka z resztą składników, koncentrat pomidorowy rozrabiamy z 3 łyżkami wody i wlewamy do garnka. Dodajemy mielone papryki, liście laurowe, ziele, kminek i zalewamy wszystko bulionem ew. wodą. Wstawiamy na średni gaz i gotujemy pod przykryciem nawet do 3 godzin. Co jakiś czas mieszając i uzupełniając odparowany płyn. Po tym czasie doprawiamy wszystko solą i pieprzem. Jeśli sos wyszedł zbyt rzadki całość można zagęścić rozrobioną mąką z wodą (2 łyżki mąki na ½ kubka zimnej wody). Podajemy gorący z kaszą lub innymi dodatkami.'},
		{title: 'Zrazy wołowe', container: 'przepis_zrazy', ingredients: '<strong>Na ok. 10 sztuk:</strong><br>1 kg zrazówki, ligawy, rostbefu • 10-12 plastrów wędzonego boczku • 1/2 słoiczka dobrej musztardy • 4 ogórki kiszone najlepiej z beczki • 2 cebule • mąka • sól, pieprz • olej rzepakowy do smażenia • bulion lub woda, ew. dodatkowo 1 szklanka wina czerwonego, wytrawnego', text: 'Mięso kroimy w plastry ok. 1 cm w poprzek włókien. Rozbijamy dość mocno tłuczkiem. Mięso można przykryć folią spożywczą nim zaczniemy rozbijać. Każdy plaster doprawiamy pieprzem, rozsmarowujemy na nim musztardę. Ogórki kroimy na ćwiartki wzdłuż. Cebulę kroimy w piórka. Na mięsie rozkładamy plaster boczku, na nim ćwiartkę ogórka i kilka piórek cebuli. Zwijamy dość ściśle i owijamy nitką lub spinamy wykałaczkami. Każdy zrazik obtaczamy w mące, nadmiar strzepujemy i przesmażamy zawijasy na mocno rozgrzanej oliwie, po 2 minuty z każdej strony. Przesmażone zrazy układamy w garnku, zalewamy gorącą wodą lub bulionem na wysokość zrazów i wstawiamy na mały gaz. Patelnię po smażeniu podlewamy wodą i zeskrobujemy resztki, całość wlewamy do zrazów. Gotujemy ok. 1,5-2 godzin co jakiś czas mieszając, ew. podlewając wodą jeśli zbyt mocno odparuje. Pod koniec gotowania doprawiamy sos solą i ew. pieprzem. Jeśli wyjdzie zbyt rzadki zagęszczamy go mąką rozrobioną z zimną wodą. Np. 1 łyżka mąki na ¼ szklanki wody. '}
	]},
	{
		title: 'Pieczywo',
		recipes: [
		{title: 'Zakwas', container: 'przepis_zakwas', ingredients: '200 g mąki żytniej jasnej chlebowej (15 czubatych łyżek) • 100 g startego jabłka bez skórki (ew. zamiast jabłka można dodać 5 g świeżych drożdży) • 200 ml letniej wody', text: 'W wysokim słoju mieszamy wszystkie składniki i odstawiamy na 2-4 dni szczelnie zamykając. Jak pojawią się pęcherzyki powietrza mieszamy rano i wieczorem i „dokarmiamy” 100 g mąki żytniej (ja dodaję żytnią typu graham, zakwas wtedy wręcz wariuje! Dlatego ważne jest by trzymać go w dużym słoju np. 3-5 l. Dodajemy też 100 ml ciepłej (ale nie gorącej) wody, mieszamy dokładnie.  Jeśli trzymacie go w cieple „dokarmiajcie codziennie”, jeśli w chłodzie wystarczy raz w tygodniu dodawać mąkę i wodę. Ja trzymam na niezbyt ciepłym parapecie i dokarmiam co 1-2 dni. Uwaga! Zakwas można mrozić dzieląc go na 100 ml porcje i rozmrażać w razie potrzeby. Ale jak np. raz w tygodniu zabierzecie się za pieczenie chleba, lepiej dbajcie o niego, dokarmiajcie a zawsze będziecie dysponować pod ręką pracującym zakwasem.'},
		{title: 'Chleb chłopski', container: 'przepis_chleb', ingredients: '30 g świeżych drożdży • 400 ml letniej wody • 1/2 łyżeczki cukru pudru • 20 g oleju np. rzepakowego, słonecznikowego, ja dodałam oliwy z oliwek • 300 g zakwasu • 20 g soli (ok. 4 łyżeczek) • 200 g jasnej mąki żytniej • 300 g mąki pszennej • 1 łyżka octu jabłkowego', text: 'Piekarnik nagrzewamy do 250 stopni. Drożdże rozpuszczamy w letniej wodzie z dodatkiem cukru. Dodajemy olej, zakwas i pozostałe składniki. Wyrabiamy ciasto w wysokiej misce ok. 10 minut, najlepiej używając robota zaopatrzonego w hak, bo ciasto jest dość rzadkie. Odstawiamy w ciepłe miejsce przykryte czystą ściereczką na ok. 45 minut, do czasu aż podwoi swoją objętość. Po tym czasie wylewamy ciasto na stolnicę i podsypując mąką (ja zwykłą, pszenną) uformować jeden duży, bądź dwa mniejsze bochenki. Pozostawiamy do wyrośnięcia przykryty ściereczką najlepiej już na blasze, na której chleb będziecie piekli. Potrwa to znów ok. 45 minut. Do piekarnika wstawiamy na sam dół naczynie z wodą, lub spryskujemy wnętrze piekarnika wodą (ja zawsze używam naczynia z wodą). Wstawiamy chleb, który wcześniej nacinamy  i zmniejszamy temperaturę do 210 stopni. Pieczemy 20-30 minut, do czasu aż pukany w spód wyda głuchy dźwięk. Studzimy na metalowej kratce.'},
		{title: 'The best chleb ever ze słonecznikiem', container: 'przepis_chleb_słonecznik', ingredients: '400 g mąki pszennej chlebowej • ok. 50 g słonecznika • ok. 50 g siemienia lnianego • łyżkę czarnego sezamu do posypania • 250 ml letniej wody • kilka łyżek oliwy (ja dałam 2 łyżki do samego ciasta, a ok 1 łyżkę zużyłam na posmarowanie miski) • 1 łyżeczka cukru • 2 łyżeczki soli • 15 g drożdży', text: 'Do miski wlać ciepłą wodę, dodać cukier i świeże drożdże wymieszać do rozpuszczenia. Odstawić na bok. Do dużej miski przesiać mąki, dodać sól, ziarna (zostawiając po ok. łyżce na obsypanie chlebka). Dodać lekko buzujący i rosnący zaczyn z drożdży. Wymieszać wszystkie składniki przy pomocy drewnianej łyżki lub miksera na wolnych obrotach używając końcówki typu "hak". Ja do wyrabiania ciast drożdżowych wykorzystuję robota i na wolnych obrotach mieszam składniki ok 10-15 minut. Ale dla "łapkarzy" opcja jest następująca: Należy wyłożyć ciasto na posypany mąką blat i dalej ugniatać rękoma przez około 15 min, podsypując lekko mąką, żeby się nie kleiło. Z ciasta uformować okrągły bochenek, lekko zwilżyć wodą i posypać odłożonymi ziarnami połową słonecznika. Miskę średniej wielkości natłuścić olejem i włożyć do niej ciasto posypaną ziarnami częścią do dołu. Resztę sezamu, siemienia itp. równomiernie rozsypać po cieście i lekko docisnąć. Miskę przykryć folią spożywczą lub ściereczką i odstawić do wyrośnięcia na około 1 godz. Piekarnik nagrzewamy do ok. 220 stopni. Blachę do pieczenia wyłożyć papierem do pieczenia. Szybkim ruchem obrócić miskę nad blachą tak, aby ciasto znalazło się na blasze. Może się tak zdarzyć (jak mnie), że ciasto za nic nie chce odejść od ścianek, należy wtedy delikatnie podważyć ciacho i jak złapie powietrze odpadnie bez problemu :). Odstawiamy jeszcze na ok.20-25 min. Piec w rozgrzanym piekarniku do 220 oC, przez około 40-45 minut. Ja przed włożeniem ciasta do piekarnika wkładam na najniższą półkę piekarnika blaszkę z wodą, a blaszkę z pieczywem na środkową półkę. Tworzy się poniekąd piec konwekcyjny :) domowym sposobem.'},
		{title: 'Bajgle', container: 'przepis_bajgle', ingredients: '<strong>Na ok. 12 sztuk:</strong><br>500 g mąki pszennej chlebowej lub 100 g mąki 00 i 400 g mąki tortowej typ 450 • 50 ml oleju rzepakowego tłoczonego na zimno • 1,5 łyżeczki soli • 1 łyżka miodu • 15 g świeżych drożdży • 300 ml letniej wody • 0,5 łyżeczki cukru pudru • białko do posmarowania • sezam, mak do obsypania', text: 'Piekarnik nagrzewamy do 250 stopni. Do wody dodajemy cukier puder i pokruszone drożdże, dokładnie wszystko rozpuszczamy i odstawiamy. Do miski do robota stacjonarnego przesiewamy mąkę, dodajemy sól i olej i wlewamy zaczyn. Wyrabiamy do czasu aż ciasto będzie gładkie i lśniące i zacznie odchodzić od rąk bądź miski w robocie. Wodę zagotowujemy z miodem. Ciasto dzielimy na 12 części, formujemy bułeczki i palcem robimy w środku dziurkę, którą lekko rozciągamy. Odkładamy do wyrośnięcia pod przykryciem ok. 20-30 minut. Do pyrkającej wody wrzucamy po 2-3 bajgle i po kilku minutach przewracamy je na drugą stronę. W sumie gotujemy je do czasu aż wypłyną i podrosną ok. 5 minut. Odsączamy łyżką cedzakową, układamy na papierze do pieczenia, obsypujemy ziarnami. Jak piekarnik się nagrzeje zmniejszamy temp. do 210 stopni i wkładamy blachę z bajglami.  Pieczemy ok.15 -20 minut. Studzimy na kratce.'},
		{title: 'Chałka waniliowa z kruszonką', container: 'przepis_chałka', ingredients: '<strong>Na 1 dużą lub 2 mniejsze:</strong><br>800-900 g mąki pszennej chlebowej • 30 g świeżych drożdży • 6 łyżek cukru • 1,5 łyżeczki soli • 200 ml mleka + 2 łyżki • 200 ml wody • 100 g masła • 4 jaja • 1,5 łyżeczki dobrej pasty z wanilii • do posypania: mak, sezam, ew. kruszonka<br><strong>Kruszonka:</strong><br>75 g mąki pszennej • 50 g masła, schłodzonego • 25 g cukru', text: 'Rozpuszczamy masło i odstawiamy do schłodzenia. Mleko z wodą podgrzewamy, ma być przyjemnie ciepłe, ale nie gorące. Rozpuszczamy w nim 2 łyżki cukru i rozcieramy drożdże. Na koniec dosypujemy 3 łyżki mąki i rozcieramy dokładnie. Odstawiamy na ok. 15-20 minut aż zacznie pracować. Na powierzchni utworzą się pęcherzyki powietrza i zacznie się lekko pienić. Mąkę przesiewamy do wysokiej miski, wlewamy zaczyn drożdżowy, dodajemy jajo i sól oraz resztę cukru. Wyrabiamy ciasto hakiem lub ręcznie. Następnie dodajemy rozpuszczone masło i wyrabiamy dalej. Po 10 minutach ciasto powinno ładnie odchodzić od ścianek miski, być lekko błyszczące i gładkie, niezbyt ciężkie i zbite, nawet lekko lejące. Odstawiamy pod przykryciem na ok. 1-2 godzin aż podwoi swoją objętość. Po tym czasie przekładamy ciasto na stolnicę, kilka krotnie bijemy pięścią i zagniatamy. Dzielimy na 4-6 części, każdą rolujemy na podobną długość. (Jeśli robimy dwie, dzielimy ciasto na 8 części, jeśli jedną dużą 4-6 części). Układamy na stolnicy wałki ciasta, zlepiając je na górze, rozkładamy na boki'}
	]}
];

Herbs_recipes = {
	'przepis_1': {
		recipes: [
		{title: 'Muffinki bazyliowo-czekoladowe', ingredients: 'bazylia z 1 całej doniczki • ½ kostki masła • 150 ml tłustego mleka • 130 g mąki • 1 jajko • 80 cukru • 80 g białej czekolady • ¾ łyżeczki proszku do pieczenia • Szczypta soli<br><u>Do ozdoby:</u> Duży serek waniliowy • Listki świeżej bazylii', text: 'Mleko wlewamy do garnuszka, dodajemy masło i połamaną na kostki czekoladę. Podgrzewamy aż do rozpuszczenia się i połączenia wszystkich składników. Masę studzimy. Mąkę przesiewamy do dużej miski, dodajemy proszek do pieczenia, sól i cukier, mieszamy. Umyte i wysuszone listki bazylii umieszczamy w blenderze, krótko szatkujemy. Następnie powoli dolewamy rozpuszczoną czekoladę, miksujemy. Dodajemy jajko i znowu krótko ale intensywnie mieszamy. Zawartość blendera łączymy z mąką. Dobrze wyrobione ciasto wlewamy do formy na muffinki. Pieczemy ok. 20 minut w 180 st. C. Wystudzone babeczki ozdabiamy serkiem waniliowymi i listkiem bazylii.'},
		{title: 'Musująca galaretka z szampana', ingredients: '500 ml wina musującego lub szampana • 4 łyżki soku z marakui lub brzoskwiń • szczypta sproszkowanego anyżu • 2 gałązki świeżej melisy • 4 łyżki żelatyny', text: 'Połowę wina wlewamy do garnuszka, dorzucamy melisę, doprawiamy anyżem i całość mocno podgrzewamy przez kilka minut. Wyjmujemy listki melisy, a w ciepłym winie rozpuszczamy żelatynę. Gdy napęcznieje, dodajemy resztę wina oraz owocowy sok. Mieszamy, aby składniki dobrze się ze sobą połączyły. Przestudzony płyn wlewamy do foremek lub pucharków. W tężejącej szampańskiej galaretce możemy też zanurzyć po całym melisowym listku.'},
		{title: 'Gruszki z syropem klonowo-tymiankowym', ingredients: 'kilka dużych twardych gruszek • 1 szklanka gruszkowego soku • 1 szklanka białego wina • 120 g brązowego cukru • 120 ml syropu klonowego • cynamon – 1 laska • świeży tymianek cytrynowy • skórka starta z 1 limonki', text: 'Gruszki obieramy (zostawiamy ogonki!). Do garnuszka wlewamy wino, sok z gruszek, syrop klonowy i dodajemy cukier oraz gałązkę tymianku. Zagotowujemy całość, dodajemy cynamon i skórkę startą z limonki. Mieszamy kilka sekund aż do rozpuszczenia cukru. Do gotującego się syropu wkładamy całe gruszki, przykrywamy i gotujemy całość ok. 25 - 35 minut lub do czasu, aż gruszki będą miękkie. Owoce wyjmujemy delikatnie i układamy na talerzykach. Pozostały w garnku syrop ciągle podgrzewamy, aż zredukuje się na dość gęsty sos. Skrapiamy gruszki syropem i podajemy jeszcze ciepłe w towarzystwie lodów waniliowych.'},
		{title: 'Truskawki z miętowym sosem balsamicznym', ingredients: '200 g dojrzałych, słodkich truskawek • listki świeżej mięty • świeży pieprz w młynku • 3 łyżki octu balsamicznego z Modeny lub gotowy krem balsamiczny z miętą • 1 łyżka brązowego cukru • 2 łyżki wody', text: 'Do rondelka wlewamy ocet balsamiczny i wodę, dodajemy cukier i kilka listków mięty. Zagotowujemy całość na bardzo niewielkim ogniu aż do zgęstnienia. Jeśli korzystamy z gotowego kremu balsamicznego, podgrzewamy go lekko w kąpieli wodnej. Truskawki myjemy, przekrajamy na połówki, wkładamy do pucharków. Skrapiamy ciepłym sosem balsamicznym i ozdabiamy kilkoma listkami świeżej mięty.'},
		{title: 'Ciasto czekoladowo–miętowe', ingredients: '1 szklanka cukru • 2 szklanki mąki • 1 kostka masła • 4 łyżki ciemnego kakao • ½ szklanki wody • 4 jajka • 2 łyżeczki proszku do pieczenia • świeża mięta • tabliczka gorzkiej czekolady • 4 łyżki tłustego mleka', text: 'Do sporego garnuszka wkładamy kostkę masła i kilka gałązek świeżej mięty. Tłuszcz podgrzewamy aż do rozpuszczenia, gotujemy przez chwilkę na bardzo niewielkim ogniu. Gałązki mięty wyjmujemy, a do masła dodajemy cukier, kakao i wodę. Zagotowujemy i odstawiamy do wystygnięcia. Mąkę przesiewamy do miski, mieszamy z proszkiem do pieczenia. Do garnka z przestudzoną kakaowo-miętową masą wbijamy 4 jajka, miksujemy intensywnie. Partiami dosypujemy mąkę z proszkiem, cały czas miksując. Ciasto wlewamy na wysypaną mąką tortownicę, pieczemy 45 minut w 180 st. C. Gdy wystygnie, oblewamy polewą z rozpuszczonej w mleku czekoladzie i ozdabiamy listkami świeżej mięty.'},
		{title: 'Brzoskwiniowe lody z rozmarynem', ingredients: 'duża puszka brzoskwiń w syropie • 200 ml śmietanki 36% • szklanka tłustego mleka • 2 gałązki świeżego rozmarynu • Łyżka miodu', text: 'Mleko, śmietankę, miód i syrop z brzoskwiń wlewamy do wysokiego garnuszka. Dodajemy gałązki rozmarynu i doprowadzamy do wrzenia, następnie szybko zmniejszamy ogień do minimum (płyn nie powinien się gotować). Podgrzewamy całość kilku minut, na końcu wyjmujemy rozmaryn łyżką lub przecedzamy całość przez sitko. Brzoskwinie blendujemy na gładki mus, dolewamy do garnuszka masę śmietanowo-rozmarynową i miksujemy wtłaczając w nią jak najwięcej powietrza. Całość schładzamy w lodówce minimum godzinę. Zimną masę wlewamy do maszyny kręcącej lody i postępujemy według schematu przypisanego urządzeniu. Gotowe lody podajemy w pucharkach, oblane ulubionym syropem.'},
		{title: 'Krem z trawą cytrynową i truskawkami', ingredients: '400 g śmietany 36% • 5 gałązek trawy cytrynowej • 100 g cukru trzcinowego • 4 żółtka • 6 g żelatyny • kilka gałązek świeżej mięty • 500 g truskawek • kilka kostek białej czekolady', text: 'Śmietankę wlewamy do rondla, dodajemy przekrojone na kilka kawałków gałązki trawy cytrynowej i zagotowujemy całość. Zdejmujemy z ognia o odstawiamy na 1-2 godziny, by śmietana nabrała aromatu cytrynowej trawy. W tym czasie żółtka ubijamy z cukrem nad gorącą parą. Ze śmietany wyjmujemy kawałki trawy, łączymy z ubitymi żółtkami podgrzewamy by całość lekko zgęstniała. Żelatynę namaczamy w zimnej wodzie, napęczniałą łączymy z kremem, mieszamy. Gotowy krem wlewamy do pucharków i schładzamy w lodówce. Podajemy z połówkami truskawek i listkami świeżej mięty, posypane wiórkami białej czekolady na wierzchu.'},
	]},
	'przepis_2': {
		recipes: [
		{title: 'Kolorowe kluseczki', ingredients: 'kilka dużych ziemniaków • 2 łyżki mąki pszennej • 1 łyżka mąki kukurydzianej • 2 jajka (same żółtka) • sól • szczypta gałki muszkatołowej • łyżka posiekanego koperku • 2 łyżki drobno startych buraczków • łyżka twarożku', text: 'Ziemniaki umyj, obierz i zmiel maszynką do mięsa. Przełóż do sporej miski, dodaj obie mąki i dwa żółtka, szczyptę soli i gałkę muszkatołową, zagnieć wszystko na ciasto. Uformuj kulę i podziel ją na dwie części. Do jednej połowy wmieszaj koperek, do drugiej – tarte buraczki. Z ciasta uformuj długie, cienkie wałeczki i potnij je skośnie na małe kluseczki. Wrzucaj od razu do garnka z wrzącą, lekko osoloną wodą. Ugotowane wyjmuj łyżką cedzakową. Już na talerzu obsyp twarożkiem. (Niezjedzone porcje kluseczek warto zamrozić na kolejny obiadek).'},
		{title: 'Zielony chłodnik dla dzieci', ingredients: '½ szklanki kefiru • posiekany koperek i natka młodej marchewki • drobno posiekane kiełki brokułów • kawałek świeżego ogórka • szczypta pieprzu • 2 jajka przepiórcze • Kilka kropel oliwy aromatyzowanej czosnkiem', text: 'Kawałek ogórka dokładnie umyj, obierz ze skórki i zetrzyj na tarce o drobnych oczkach. Natkę pietruszki, kiełki i gałązki młodej marchewki bardzo drobno posiekaj. Żółtka jajek rozgnieć widelcem. Wymieszaj kefir z warzywami i żółtkami. Dopraw odrobiną świeżego pieprzu i kilkoma kroplami oliwy czosnkowej. Podawaj w temperaturze pokojowej.'},
		{title: 'Klopsiki z kaszką i dynią', ingredients: '250 g dobrej cielęciny • natka pietruszki  • szczypta majeranku • 1 żółtko • mała marchewka • ½ korzenia pietruszki • kawałeczek selera • ząbek czosnku w łupince • liść laurowy • gałązka lubczyku • 4 łyżki kaszy jaglanej • ½ szklanki mrożonej dyni • 1 łyżka oliwy z oliwek', text: 'Kawałek cielęciny zmiel, natkę pietruszki drobniutko poszatkuj. W misce wymieszaj mięso, żółtko, natkę i szczyptę soli. Foruj małe klopsiki. Marchewkę, pietruszkę i seler zetrzyj na tarce, wrzuć do garnka. Zalej wodą, dodaj listek laurowy, lubczyk i ząbek czosnku w łupince. Zagotowuj wszystko i dorzuć klopsiki. Gotuj ok. 10 minut. Klopsy wyjmij wraz z warzywami łyżką cedzakową (czosnek i listek laurowy wyrzucamy). Podawaj układając na ugotowanej kaszce jaglanej, z uduszoną na łyżce oliwy dynią.'},
		{title: 'Tęczowa jajecznica', ingredients: '1 jajko klasy 0 • ½ pomidora • szczypiorek  • szczypta pieprzu ziołowego • łyżka masła', text: 'Pomidora zanurz we wrzątku, po dłuższej chwili wyjmij go, oblej zimną wodą i obierz ze skórki. Przekrój na pół i z jednej połówki pozbądź się pestek, miąższ pokrój w drobną kosteczkę. Dla najmłodszych dzieci warto pomidora zmielić w blenderze. Na patelni rozgrzej masło, wrzuć pomidora, smaż chwilkę. Wbij jajko, posyp drobno posiekanym szczypiorkiem i dopraw jajecznicę pieprzem. Poczekaj aż delikatnie się zetnie i zdejmij z patelni.'},
		{title: 'Parowana cukinia z ziołami', ingredients: '½ cukinii • świeża bazylia • świeże oregano • dobra oliwa z oliwek', text: 'Cukinię wyszoruj pod gorącą wodą, nie obieraj. Potnij na grube plasterki. Ułóż w garnku do gotowania na parze lub w specjalnym sitku, ugotuj do miękkości. Wyłóż na talerzyk i posyp drobno poszatkowanymi listkami oregano i bazylii. Na wierzchu skrop odrobiną delikatnej oliwy z oliwek.'},
	]}
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/categories_texts.js */
var ch = function(a) { a.colh2 = true; return a; };

CAT_TEXTS = {
	'alkohol': { id: 165, tag: 'alcohol', title: "ALKOHOLE", subtitle: "Trunki na imprezę<br> i nie tylko",
		texts: [
			["Drinki", "Gotowe drinki w butelkach i puszkach to idealne rozwiązanie dla tych, którzy stawiają na wygodę i oszczędność czasu. We Frisco.pl oferujemy orzeźwiające napoje alkoholowe Bacardi przygotowane na bazie rumu o smaku limonkowym, ananasowym, arbuzowym lub pomarańczowym.<br><br>Nie brakuje też jednego z najpopularniejszych drinków – Mojito. Dla zwolenników klasycznych smaków dostarczamy drinki Jack Daniel's Tennessee Whiskey o smaku coli bądź imbiru, a także Finlandię, drinki na bazie wódki z nutą żurawiny lub grapefruita."],
			["Alkohol", "Oferta Frisco.pl obejmuje szeroki wachlarz alkoholi odpowiednich do spożycia w czystej postaci bądź jako pomysłowe drinki. Posiadamy wiele odmian wódki zarówno polskich jak i zagranicznych producentów. Z bezpośrednią dostawą do domu można zamówić u nas doskonałe whisky, brandy, koniak, tequilę, gin, rum, a nawet japońskie sake.", "Dla osób gustujących w słodkich alkoholach mamy wyborne rodzime miody pitne, bogactwo likierów, nalewek, a także lubianych wermutów."],
			["Wina", "Wina czerwone, białe, różowe, słodkie, półsłodkie, wytrawne i półwytrawne – we Frisco.pl dostarczamy trunki różnych smaków i kolorów. Pozwalają na chwile relaksu, a także są świetnym dodatkiem do dań mięsnych, rybnych, sałatek i przekąsek. Posiadamy wina z wielu regionów świata, m.in. z Włoch, Francji, Niemiec, Chile, Argentyny, USA, Australii czy RPA. Szykując się na świętowanie ważnych wydarzeń warto także zaopatrzyć się u nas w prawdziwego szampana lub wino musujące."],
			["Piwo", "Miłośnicy chmielowego trunku znajdą we Frisco.pl szeroki wybór piw. W ofercie posiadamy piwa jasne, ciemne, mocne, niepasteryzowane czy też pszeniczne odmiany tego napoju.  Nie brakuje u nas smakowych propozycji z nutą miodu, karmelu, cytryny, jabłka, imbiru lub chociażby malin. Dostarczamy także cieszący się coraz większą popularnością cydr.", "Można u nas wybierać zarówno polskie produkty regionalne, jak również popularne marki zagraniczne. Dla tych, którzy nie mogą spożywać procentów proponujemy z kolei piwa bezalkoholowe."],
			["Papierosy", "Slimy, mentolowe, light, a może klasyczne papierosy przygotowane z najlepszego tytoniu? Wybór we Frisco.pl jest naprawdę duży. Posiadamy znane i lubiane marki, m.in. Marlboro, Lucky Strike, L&M, Camel, West, LD czy popularne zwłaszcza wśród kobiet cienkie i eleganckie Vogue. Korzystając z naszej oferty nie trzeba już wychodzić z domu, aby kupić swoje ulubione papierosy i uzupełnić zapasy. Dostarczamy je do każdej miejscowości w całej Polsce."],
		]
	},
	'kuchnie-swiata': { id: 4158, tag : 'cuisines', title: "KUCHNIE <br>ŚWIATA", subtitle: "Kulinarna podróż<br> dookoła świata",
		texts: [
			["Kuchnia<br> włoska", "Kuchnia włoska uznawana jest za jedną z najsmaczniejszych na świecie i jest w naszym kraju niezwykle popularna. Nic dziwnego – aromatyczne spaghetti, gorąca pizza czy lekkie sałatki smakują doskonale, a ich sekret tkwi w prostocie i idealnym połączeniu świeżych składników. We Frisco.pl znajdą Państwo pyszne inspiracje, dzięki którym stworzenie wyśmienitych śródziemnomorskich potraw we własnym domu będzie niezwykle proste, przyjemne i przede wszystkim smakowite!"],
			["Kuchnia<br> francuska", "Wykwintna kuchnia francuska nie ma sobie równych! Pochodzące z tego kraju wyśmienite sery pleśniowe typu Brie, Camembert czy Roquefort to prawdziwa uczta nawet dla najbardziej wymagającego podniebienia. Dlatego we Frisco.pl oferujemy szeroką gamę oryginalnych serów, również kozich i owczych, a także inne pyszności typowe dla francuskiej kuchni – ryby, homary, ostrygi, gęsi tłuszcz czy słodkie konfitury i desery. Atmosfery dopełniają oryginalne eleganckie szampany, takie jak m.in. Moët&Chandon, Laurent-Perrier czy Dom Pérignon."],
			["Kuchnia<br> meksykańska", "Ostre wrażenia to specjalność kuchni meksykańskiej! Z myślą o wszystkich miłośnikach wyraziście podkreślonych smaków Frisco.pl oferuje bogaty wybór produktów tej środkowoamerykańskiej sztuki kulinarnej.", "Pszenne wrapy, mocno przyprawione chipsy o smaku tortilli, pikantne papryczki jalapenos i chipotle czy wyborne sosy typu salsa pozwolą przyrządzić dania, które przeniosą Państwa wprost kraju El Mariachi, torreadorów i gorącego słońca."],
			["Kuchnia<br> tajska", "Egzotyczna tajska kuchnia to wyjątkowa kulinarna podróż na drugi koniec świata. Zielone, żółte i czerwone curry, delikatne mleko kokosowe, aromatyczne i wyraziste pasty, pikantne sosy oraz cienkie makarony odkryją przed Państwem niepowtarzalne bogactwo smaków Azji Południowej. Gorąco zachęcamy do przekonania się, że nie bez przyczyny kuchnia Tajlandii uważana jest za jeden z najbardziej oryginalnych narodowych stylów kulinarnych."],
			["Kuchnia azjatycka<br> i sushi", "Japońska kuchnia doceniana jest na całym świecie. Świeże, nierzadko wręcz surowe potrawy, zyskały rzesze miłośników nie tylko ze względu na wyjątkową formę i smak, ale też dlatego, że uznawane są za sekret długowieczności mieszkańców Kraju Kwitnącej Wiśni.", "We Frisco.pl zakupić można oryginalne azjatyckie produkty, takie jak m.in. wodorosty nori, ryż, aromatyczne pasty, sosy sojowe czy wasabi, a także świeże ryby, dzięki którym we własnym domu przygotują Państwo sushi i inne niepowtarzalne dania rodem z Dalekiego Wschodu."],
		]
	},
	'napoje': { id: 1, tag : 'drinks', title: "NAPOJE", subtitle: "Orzeźwienie na <br> wiele sposobów",
		subs: [147, 2596, [3997, 2603, 2614], [25, 4418, 2608], 3996, 2616],
		texts: [
			ch(["Kawa, herbata,<br> kakao", "Zwolenników gorących wrażeń zapraszamy na prawdziwie egzotyczną podróż po świecie smaków i aromatów. Frisco.pl oferuje bowiem wybór doskonałych herbat, kaw i kakao pochodzących ze słynących z ich produkcji zakątków Ziemi. Znajdą u nas Państwo rozmaite odmiany herbat – czarnych, zielonych, czerwonych, z Azji i Afryki, a także wyśmienite i aromatyczne kawy – od ziarnistych przez mielone i rozpuszczalne aż po smakowe. Zadowoleni będą też wszyscy miłośnicy kakao – niezależnie, czy preferują Państwo pić je na gorzko czy na słodko."]),
			["Woda", "Koniec z dźwiganiem ciężkich butelek z hipermarketu – nasi kurierzy dostarczą Państwa ulubioną wodę prosto do domu! We Frisco.pl oferujemy różnorodne rodzaje wody – gazowaną, niegazowaną, źródlaną, mineralną, smakową czy bogatą w cenne substancje odżywcze leczniczą wodę prosto z gór.", "Z nami każdy przekona się, że woda wcale nie jest nudna – w ofercie znajdują się m.in. wyjątkowa czarna woda mineralna BLK Water, krystalicznie czysta Voda Naturalna czy egzotyczna woda COCO COOL prosto z wnętrza kokosa. Czas na zdrowe orzeźwienie!"],
			["Niegazowane<br> i gazowane", "Spragnieni wrażeń? We Frisco.pl mamy na to radę! W naszej ofercie czeka na Państwa ogromny wybór rozmaitych napojów. Oprócz popularnych napojów gazowanych proponujemy orzeźwiające mrożone herbaty, napoje owocowe, aloesowe, lemoniady, yerba mate, kwas chlebowy czy produkty na bazie miodu.", "Dla wszystkich, którzy po ciężkim dniu albo wyczerpującym treningu opadają z sił, mamy napoje energetyczne, izotoniczne oraz witaminowe."],
			["Soki, nektary,<br> dla dzieci", "Rozgrzewające promienie słońca, powiew delikatnej bryzy i świeżość płynąca z kropli letniego deszczu – to wszystko kryje się we wspaniałych sokach i nektarach dostępnych we Frisco.pl! Niech przekonają się Państwo, że nie ma nic przyjemniejszego niż orzeźwiająca słodycz owoców ukryta w szklance ulubionego napoju. Jeśli preferują Państwo bardziej wytrawne smaki, oferujemy również szeroki wybór soków warzywnych, a nawet w pełni ekologicznych soków z kwaszonek."],
			["Syropy", "Przepyszne syropy to słodycz natury w skoncentrowanej postaci. Mogą Państwo cieszyć się wspaniałym smakiem ulubionych owoców takich jak pomarańcza, czarna porzeczka, malina czy truskawka, ale we Frisco wybór jest o wiele większy.", "W naszej ofercie znajdują się między innymi uwielbiany za wyjątkowy smak i ceniony za dobroczynne właściwości oryginalny syrop klonowy, znane z przepisów naszych babć syropy z pędów sosny, czarnego bzu i dzikiej róży czy korzenne syropy cynamonowe i imbirowe."],
			["Mleko", "Wzmacnia kości i zęby, wspomaga koncentrację, dodaje energii i po prostu pysznie smakuje! Mamy chętnie dają je swoim pociechom, dorośli udoskonalają nim smak swojej ulubionej kawy, jego fanem był sam Leon Zawodowiec. Nic dziwnego – mleko to podstawa!", "We Frisco.pl proponujemy Państwu szeroki wybór mleka świeżego i UHT o różnej zawartości tłuszczu, a także zagęszczonego i smakowego. Osobom preferującym substytuty pochodzenia roślinnego polecamy zaś bogaty wybór napojów sojowych, owsianych i ryżowych."],
		]
	},
	'spozywcze': { id: 2404, tag : 'general', title: "PRODUKTY<br> SPOŻYWCZE", subtitle: "Z dostawą do domu", menuSlider: true,
		subs: [467, 469, 465, [65, 2761], 24, [94, 3670], 468, 115, 9, 2969],
		texts: [
			ch(["Makaron<br> ryż, kasza", "Bogaty wybór makaronów, ryżu i kasz dostępny we Frisco.pl to inspiracja dla smacznych i niestandardowych dań. Amatorzy kuchni włoskiej znajdą u nas spaghetti, penne, lasagne, farfalle oraz wiele innych znakomitych makaronów. Z kolei na miłośników azjatyckich specjałów czekają różne rodzaje ryżu - biały, brązowy, dziki lub basmati. Dostarczamy również wiele odmian kasz, stanowiących cenne źródło witamin i błonnika - od gryczanych, jaglanych, jęczmiennych po kukurydziane."]),
			["Cukier<br> i słodziki", "We Frisco.pl słodzimy na wiele sposobów. Nasza oferta zawiera nie tylko dobrze znany biały i brązowy cukier, ale również  inne niecodzienne produkty jak syrop daktylowy, klonowy albo z agawy.  Dla tych, co dbają o linię, mamy wiele ciekawych alternatyw: naturalny słodzik stewię, ksylitol pozyskiwany z brzozy czy fruktozę.", "Duży wybór produktów sprawia, że słodzenie kawy i herbaty, pieczenie ciast i przygotowywanie deserów oraz konfitur nabiera nowego wymiaru. Słodki asortyment dostarczamy do domów i biur w całej Polsce."],
			["Płatki śniadaniowe", "Śniadanie to najważniejszy posiłek dnia. Frisco.pl dostarcza do każdej miejscowości w Polsce różnorodne płatki śniadaniowe i otręby, które sprawiają, że poranna przekąska jest zdrowa, smaczna i zapewnia dużo energii na nadchodzący dzień.", "Proponujemy wiele rodzajów znakomitych płatków, w tym klasyczne kukurydziane, jaglane, żytnie, czekoladowe, a także w wersji BIO oraz batoników. Nie brakuje w naszej ofercie lekkich, pożywnych, a przy tym bogatych w błonnik otrębów pszennych czy owsianych."],
			["Przetwory", "Nie zawsze jest czas na zakupy, warto zatem poprzez Frisco.pl zaopatrzyć kuchnię w różnego rodzaju przetwory, które urzekają smakiem i gwarantują długi termin przydatności do spożycia. Słoiczki lub konserwy zawierają pyszne mięsa, pasztety, smalce, a nawet kaczą wątróbkę.", "Nie brakuje również w naszym asortymencie przetworów rybnych, jak znanego tuńczyka lub śledzi w różnych postaciach, po bardziej wykwintne specjały z morza. Mamy również doskonałe marynowane warzywa, a także owocowe przysmaki gotowe do zjedzenia."],
			["Olej, oliwa<br> octy", "W dobrej kuchni nie może zabraknąć oleju i oliwy, produktów odpowiednich do smażenia i przyrządzania smacznych sałatek. Wiele odmian najlepszej oliwy, pochodzącej z Włoch, Grecji czy słonecznej Hiszpanii znajduje się w ofercie Frisco.pl. Posiadamy również duży wybór wyśmienitych olejów, od dobrze znanych słonecznikowych, po bardziej egzotyczne kokosowe, które świetnie sprawdzają się podczas gotowania. Charakterystyczny smak i aromat sosów podkreśla z kolei ocet, dostępny w naszym supermarkecie w różnych odmianach."],
			["Przyprawy, sosy<br>  i dressingi", "Odpowiednio dobrane zioła to sekret wielu smacznych dań. W supermarkecie Frisco.pl posiadamy przyprawy z różnych stron świata, doskonałe do mięs, ryb lub warzyw. Proponujemy produkty suszone, ziarniste, odpowiednio dobrane gotowe mieszanki, a także świeże, aromatyczne zioła.", "Oferujemy również gotowe sosy pozwalające szybko stworzyć niebanalną potrawę z prostych składników. Nie brakuje u nas ciekawych dressingów komponujących się idealnie z warzywami do sałatek."],
			["Dżemy<br> i miody", "Do naleśników, ciast i deserów proponujemy niskosłodzone dżemy, wspaniałe konfitury i naturalne miody. Truskawkowe, malinowe, wiśniowe czy śliwkowe przetwory owocowe zachwycają smakiem, a także wysoką jakością oferowanych przez Frisco.pl produktów. Mamy również miody z tradycyjnych i ekologicznych pasiek. Lipowy, wieloowocowy, gryczany lub akacjowy, każdy z miodów ma swój wyjątkowy smak, kolor i cenne właściwości odżywcze, lecznicze, a także pielęgnacyjne."],
			["Słodycze", "Mleczna, deserowa, biała lub gorzka czekolada, kruche ciasteczka, pyszne batony, lody, cukierki i żelki – wybór słodyczy we Frisco.pl jest ogromny, aby każdy mógł znaleźć dla siebie ulubione smaki. Nasze produkty gwarantują słodką chwilę przyjemności zarówno dzieciom, jak i dorosłym. Ponadto ekskluzywne tabliczki czekolady lub praliny z delikatnym nadzieniem umieszczone w eleganckim opakowaniu zawsze świetnie sprawdzają się w roli trafionego upominku."],
			["Do wypieków", "Z nami domowe ciasta to sama przyjemność pieczenia i radość jedzenia. Oferujemy we Frisco.pl wszystko, co niezbędne, by przygotować pyszne wypieki – ulubione ciasta, fantazyjne ciasteczka, wykwintne torty i inne pomysłowe desery. Wprost do kuchni klientów dostarczamy mąkę, cukier, proszek do pieczenia, drożdże, egzotyczne bakalie, aromatyczne olejki, słodkie kremy czy też gotowe ozdoby.  Zapewniamy znane marki, dobrej jakości produkty, co jest podstawą udanych wypieków."],
			["Przekąski<br> i orzechy", "Z Frisco.pl przygotowanie pysznych przekąsek na spotkanie ze znajomymi czy wieczór z dobrym filmem jest łatwym zadaniem. Chipsy, chrupki, paluszki, krakersy albo popcorn - to tylko niektóre przekąski, jakie można znaleźć w naszym supermarkecie. Mamy również ciekawe propozycje dla tych, którzy dbają o dietę, jak chociażby znakomite suszone owoce, szeroki wybór orzechów, a także wyjątkowo cenne dla zdrowia pestki dyni i słonecznika. Nasze produkty pochodzą od sprawdzonych, głównie krajowych dostawców."],
		]
	},
	'domowe': { id: 353, tag : 'home', title: "DOMOWE", subtitle: "Porządek w Twoim domu", menuSlider: true,
		subs: [[3553, 3552, 356], [362, 2204, 4116], 368, 4561, 383, 4082, 4341, 4388, 4398],
		extra: {4561: {category: "Domowe>>Biuro i artykuły papiernicze>>Baterie"}, 383: {without: "Baterie"}},
		texts: [
			["Pranie, łazienka,<br> kuchnia i dom", "Z Frisco.pl każdy zakamarek domu będzie pachniał świeżością, tym bardziej, że można zamówić u nas praktycznie każdy artykuł chemii gospodarczej. W ofercie mamy profesjonalne preparaty do czyszczenia łazienki i WC oraz pełen wachlarz produktów do utrzymania porządku w kuchni i innych pomieszczeniach. Z nami również ubrania będą czyste i przyjemne w zapachu. Posiadamy środki do prania pod każdą postacią – w proszku, płynie, żelu czy w kapsułkach, a także orzeźwiające płyny do płukania tkanin."],
			["Przybory<br>toaletowe", "Potrzebne są wydajne ręczniki papierowe, które poradzą sobie z różnymi zabrudzeniami, środki do pielęgnacji obuwia, a może delikatny, a jednocześnie wytrzymały papier toaletowy? Wszelkie tego typu produkty codziennego użytku są oczywiście dostępne w internetowym Frisco.pl.", "Ponadto, zamówić u nas można rozmaite chusteczki – zarówno higieniczne, jak i czyszczące – do szyb, mebli czy innych powierzchni. Nasz asortyment obejmuje również odświeżacze powietrza o różnych zapachach - do domu, ale też do auta."],
			["Przeciw<br>szkodnikom", "W domu pojawiły się mole albo inne szkodniki? Nic strasznego. Frisco.pl przyjdzie z pomocą, by szybko pozbyć się takich nieproszonych gości. Można u nas zamówić preparaty w sprayu, w formie trutki czy zawieszek na różnego rodzaju szkodniki, począwszy od moli spożywczych i odzieżowych, przez prusaki, po szczury czy myszy. Co więcej, z nami także insekty są niegroźne. W ofercie mamy rozmaite środki na komary, kleszcze, muchy czy też mrówki."],
			["Baterie", "Nie działa pilot, elektryczna zabawka dla dziecka, a może nie zadzwonił rano budzik? To już pewnie najwyższy czas, by wymienić baterie. Na takie sytuacje we Frisco.pl mamy popularne paluszki AA lub w wersji AAA, które doskonale sprawdzą się do sprzętów codziennego użytku, a także baterie 9V.", "A że zawsze stawiamy na produkty sprawdzone – pochodzą one od znanych na rynku firm. W naszej ofercie są więc niezawodne i wydajne wyroby Duracell, a także baterie firmy Energizer."],
			["Artykuły<br>papiernicze", "Pora na wyprawkę dla dziecka do szkoły?  A może trzeba uzupełnić braki na służbowym albo domowym biurku? We Frisco.pl w krótkim czasie można zamówić wszystkie potrzebne artykuły papiernicze, które kurier przywiezie prosto pod drzwi. W ofercie posiadamy długopisy, ołówki, gumki czy też przydatne w nauce zakreślacze i bloczki samoprzylepne.", "Nie brakuje też zeszytów z barwnymi okładkami, o różnej grubości i rozmiarze, czy nawet papieru do kserokopiarki. Najmłodszym wiele radości sprawią z kolei akcesoria do kolorowania – rozmaite kredki i flamastry."],
			["Do grilla", "We Frisco.pl wiemy, że grillowanie ma być czystą przyjemnością. Dlatego też z nami staje się ono jeszcze prostsze. Można u nas zamówić praktycznie każdy przedmiot potrzebny do biesiadowania w gronie najbliższych. Dostępne są różnorodne grille, ale i akcesoria do grillowania, jak rozpałka czy węgiel.", "Nie brakuje też piknikowej zastawy – jednorazowych talerzyków, tacek, kubków, łyżek, noży i widelców. Zakupy we Frisco.pl to po prostu dobry przepis na udane grillowanie."],
			["Chemia<br>z importu", "Zwolennicy chemii gospodarczej z importu we Frisco.pl z pewnością znajdą dla siebie wiele propozycji. Siedząc w domowym zaciszu można nabyć u nas zagraniczne produkty do prania tkanin jasnych lub kolorowych - w żelu albo w proszku i o różnych zapachach.", "Ponadto, nasz asortyment obejmuje też wiele importowanych płynów do płukania, które dzięki silnej koncentracji odznaczają się wysoką wydajnością. Oczywiście, wszystkie tego typu produkty dostarczy kurier prosto pod drzwi, nie ma więc konieczności dźwigania samemu ciężkich toreb z zakupami."],
			["Świece<br>zapachowe", "Frisco.pl zabierze Państwa w podróż po świecie zapachów dzięki rozmaitym świecom z firmy Yankee Candle. Słodka truskawka, Sen nocy letniej, Prawdziwa róża, Jaśmin o północy, Zachód słońca nad jeziorem, Smoczy owoc czy Korzenna pomarańcza – to tylko kilka z wielu aromatycznych propozycji, jakie można zamówić w naszym internetowym supermarkecie. Wystarczy kilka kliknięć, by móc cieszyć się przyjemną wonią, która rozniesie się w całym domu."],
			["Akcesoria", "Potrzebny jest pilnie ciekawy pomysł na prezent? We Frisco.pl mamy na to kilka propozycji. Dla dorosłych proponujemy ciekawe akcesoria, jak choćby magnetyczny otwieracz do butelek lub kubki do kawy z przewodnikiem koloru, które pozwalają dostosować barwę i smak tego napoju.", "Można też sprawić atrakcyjny prezent najmłodszym i zachęcić ich do wspólnego gotowania. Nie lada gratką dla malucha będzie z pewnością dziadek do orzechów w formie robota albo foremki do ciasteczkowych dinozaurów i pojazdów kosmicznych."],
		]
	},
	'dziecko': { id: 406, tag: 'baby', title: "DZIECKO", subtitle: "Wszystko dla<br>Najmłodszych",
		subs: [914, 908, [910, 909, 911], 915, 1874],
		texts: [
			["Mleko", "Producenci mleka modyfikowanego dla niemowląt pieczołowicie dbają, aby były one możliwe najbliższe mleku mamy i zawierały najlepiej skomponowane składniki, niezbędne w diecie maluszków. We Frisco.pl posiadamy mleka na każdy etap rozwoju dzieci. Do wyboru są mleka początkowe, dla niemowląt z tendencją do kolek i zaparć, hipoalergiczne, junior, z kaszką lub zalecane przed snem. Oferujemy mleka dobrze znanych i cenionych marek jak Bebilon, Bebiko, Humana, Hipp czy Nestlé."],
			["Karmienie", "We Frisco.pl mamy dla najmłodszych dzieci pełną gamę smacznych posiłków i napojów. Dostarczamy wprost do domów w całej Polsce obiadki, zupki i desery przygotowane ze zdrowych i bezpiecznych dla maluszków składników. W ofercie posiadamy również kaszki, kleiki oraz płatki.", "Ponadto w naszym asortymencie nie brakuje soczków, wody, herbatek, a także słodkich przekąsek odpowiednich dla niemowląt i starszych pociech. Znaleźć u nas można znane marki m.in. Bobovita, Gerber, Hipp, Nestlé, Baby Sun czy Humana."],
			["Pielęgnacja", "Posiadamy niezbędne produkty do pielęgnacji delikatnej skóry dzieci. Dostarczamy pieluchy we wszystkich rozmiarach, również w wersji ekologicznej wykonane z naturalnych materiałów. Mamy też pieluchomajtki oraz majteczki do pływania doskonałe na basen i plażę.", "Nie brakuje w naszym supermarkecie wilgotnych chusteczek, patyczków i płatków kosmetycznych, szamponów, płynów do kąpieli, kremów, oliwek, żelów antybakteryjnych czy past do zębów dla maluchów. Bez konieczności dźwigania warto także zaopatrzyć się we Frisco.pl w proszki do prania, płyny do płukania i odplamiacze."],
			["Akcesoria", "Butelki do karmienia, kubki niekapki, smoczki – to wszystko można zamówić we Frisco.pl z bezpośrednią dostawą do domu. Ponadto oferujemy akcesoria do pielęgnacji delikatnych paznokci dzieci, gruszki do czyszczenia nosa, termoopakowania, a także gryzaki i grzechotki. W każdym domu, w którym jest niemowlę przyda się również specjalny płyn i szczotki do mycia butelek i smoczków. Warto również zadbać o maluszki stawiające swoje pierwsze kroki i zaopatrzyć się w zabezpieczenia do gniazd, drzwi, szafek i szuflad."],
			["Dla mamy", "Dbając o komfort mam wprowadziliśmy produkty dla kobiet karmiących i spodziewających się dzieci. Bez wychodzenia z domu można we Frisco.pl zamówić chłonne wkładki laktacyjne firm: NUK, Canpol, Bella, Johnsons Baby czy też żelowy, kojący kompres na piersi.", "Z myślą o porodzie warto zaopatrzyć się u nas także w jednorazowe, higieniczne majtki i podpaski. Oferujemy również kremy Dax Perfecta przeciw rozstępom, przebarwieniom na twarzy oraz krem chłodzący na zmęczone i opuchnięte nogi."],
		]
	},
	'mrozonki': { id: 152, tag: 'frozen', title: "MROŻONKI", subtitle: "Dania gotowe w 5 minut",
		subs: [156, 157, [3631, 4119, 4123], [155, 647, 648, 4012], 161, 160],
		texts: [
			["Mięso", "Dobrej jakości surowe mięso podczas mrożenia nie traci swoich wartości odżywczych. Co ciekawe, nieraz nawet zyskuje na smaku, bo staje się w ten sposób bardziej kruche i aromatyczne. We Frisco.pl dostępny jest pełen wachlarz takich wybornych mrożonych mięs. Niezależnie od tego, czy jest to wołowina, wieprzowina, drób, jagnięcina czy dziczyzna – wszystkie rodzaje mięs zamawiamy u wyselekcjonowanych dostawców, by mieć pewność, że do Klienta trafi produkt najwyższej jakości.", "Podczas transportu mrożonki zawsze przechowujemy w chłodni w specjalnych izotermicznych pojemnikach. Dodatkowo zabezpieczamy je suchym lodem, co chroni je przed rozmrożeniem."],
			["Ryby i<br> owoce morza", "Węgorz, tilapia, limanda żółtopłetwa, halibut albo dorsz – to tylko kilka rybnych propozycji, jakie można zamówić we Frisco.pl i czerpać korzyści, które płyną z ich spożywania. Tym bardziej, że ryby odpowiednio mrożone, często zachowują więcej wartości odżywczych niż gdy przechowywane są w innych warunkach. U nas można posmakować jeszcze więcej morskich specjałów.", "We Frisco.pl zapewniamy szeroki wybór mrożonych owoców morza, w tym krewetki, małże i kalmary, które zawsze zamawiamy u zaufanych dostawców. Bez wychodzenia z domu Klienci mogą więc delektować się zdrowymi darami oceanów mając pewność, że jest to produkt najwyższej klasy."],
			["Owoce i warzywa, <br>grzyby, zioła", "We Frisco.pl przez cały rok można zamówić różne mrożone owoce czy warzywa i cieszyć się bogactwem witamin. Z nami mogą Państwo delektować się pysznymi malinami, wiśniami, truskawkami czy jagodami o każdej porze roku. W szerokiej ofercie mrożonych warzyw posiadamy m.in. brokuły, szpinak, bób i brukselkę. Nie brak też warzywnych mieszanek – te doskonale sprawdzą się jako baza do zup, dodatek do obiadu albo oddzielne danie.", "U nas nawet koszyk grzybiarza poza sezonem nie będzie pusty – w ofercie są mrożone podgrzybki, kurki, maślaki i borowiki. Przez okrągły rok można też cieszyć się aromatem świeżych ziół - wystarczy zamówić mrożoną bazylię, tymianek albo pietruszkę."],
			["Dania<br> gotowe", "Brakuje czasu na przygotowanie smacznego posiłku? A może przyszli niezapowiedziani goście?  Szczególnie w takich chwilach dobrze mieć w zamrażalniku małe co nieco, aby na szybko przyrządzić apetyczną przekąskę. We Frisco.pl zamówić można mrożone zapiekanki i frytki – karbowane, proste, w formie talarków lub łódeczek albo pizzę w każdej odsłonie - z serem, szynką czy pieczarkami.", "To jednak nie wszystko, bo mamy też gotowe dania, które doskonale sprawdzą się na takie okazje, zaczynając od zup jak kapuśniak i brokułowa, przez pyzy, pierogi albo kotlety, nawet po gotowe makarony."],
			["Lody", "Idealne na deser, poprawę humoru czy po prostu jedzone dla czystej przyjemności – lody! Uwielbiamy je pod każdą postacią – na patyku, w pudełku, w rożku i wafelku. We Frisco.pl na Klientów czeka całe mnóstwo smaków. Zamówić tu można lody sorbetowe, jogurtowe, owocowe, śmietankowe, czekoladowe, waniliowe i wiele innych.", "W skrócie - do wyboru, do koloru, z pewnością każdy więc znajdzie coś dla siebie. Z nami na słodką chwilę pozwolić sobie mogą nawet ci, którzy nie tolerują laktozy – w ofercie mamy również lody ryżowe czy sojowe."],
			["Ciasta", "Czy można na szybko przygotować pyszne przekąski? Oczywiście, że tak! Wystarczy zamówić we Frisco.pl mrożone ciasto jak na przykład francuskie czy greckie filo. Można przyrządzić je na wiele sposobów - korzystając z gotowej instrukcji albo improwizować łącząc ulubione składniki. Na słodko lub na słono, na zimno albo na ciepło – możliwości jest naprawdę sporo. W ofercie mamy też tradycyjne austriackie ciasto – strudel jabłkowy lub z kremowym serem."],
		]
	},
	'organic': { id: 2405, tag: 'organic', title: "ORGANIC", subtitle: "Zdrowie dla<br> każdego",
		subs: [[2407, 2408, 2409, 2410, 2411, 2412], [2413, 3289]],
		texts: [
			["Świeże, spożywcze, <br>pieczywo, mrożonki", "Nic co zdrowe, nie jest nam obce - naszym Klientom zapewniamy więc szeroki wybór organicznej żywności. We Frisco.pl prosto do domu można zamówić warzywa i owoce z naturalnych upraw, ekologiczne wędliny, mięsa i nabiał, a nawet pieczywo. W ofercie mamy też wiele innych organicznych produktów, począwszy od ryżu, kaszy i makaronu, przez dżemy, konfitury, przyprawy i oleje na słodkościach różnego typu kończąc.", "Nie brakuje też ekologicznych soków i napojów – owocowych, ale i orkiszowych czy owsianych. Znaleźć można u nas również organiczne wina i rozmaite naturalne produkty dla maluchów."],
			["Toaletowe, domowe", "Z Frisco.pl nie tylko żywność jest eko. Nasz asortyment obejmuje również szeroki wachlarz kosmetyków bio. Klienci, bez konieczności wychodzenia z domu czy dźwigania toreb, mogą więc kupić u nas rozmaite produkty do mycia czy kąpieli, do pielęgnacji twarzy i całego ciała, a także artykuły higieniczne. I wszystkie stworzone zostały na bazie naturalnych składników. Ponadto, w ofercie posiadamy też organiczne środki czystości - do sprzątania i zmywania, a także proszki oraz płyny do prania lub płukania - oczywiście bez dodatku chemii."],
		]
	},
	'piekarnia': { id: 2, tag: 'baking', title: "PIEKARNIA", subtitle: "Najlepsze wypieki <br>prosto z pieca",
		subs: [[3, 696, 4372], [559, 1014, 5, 558, 6], [7, 4408, 3545]],
		texts: [
			["Chleb, bułki i bagietki", "Dzięki niezwykle bogatej ofercie Frisco.pl mogą Państwo cieszyć się doskonałym smakiem swojego ulubionego rodzaju pieczywa. Nasz asortyment obejmuje różnego rodzaju chleby, bułki i bagietki produkowane przez popularną warszawską piekarnię Putka. Oprócz szerokiej gamy pieczywa – od pszennego poprzez razowe i żytnie aż po organiczne oraz ciemne – dostępne są również bagietki z masłem czosnkowym oraz bułka tarta. Ponieważ zamawiane wyroby są dodawane do zakupów tuż przed odjazdem kierowcy, mogą być Państwo pewni, że będą one zawsze chrupiące, aromatyczne i świeże."],
			["Pieczywo tostowe i fitness", "We Frisco.pl każdy znajdzie coś dla siebie!  Szeroki wybór produktów czeka zarówno na wielbicieli aromatycznych tostów, jak i zwolenników lekkiej i zdrowej żywności. Oferujemy smakowite pełnoziarniste chleby typu pumpernikiel, jak również pieczywo chrupkie, wafle, sucharki i macę.", "W naszym supermarkecie znajdują się też artykuły dla osób stosujących dietę bezglutenową – są to zarówno jasne i ciemne chleby, bułki, a nawet wafle. Amatorzy kuchni azjatyckiej i meksykańskiej mogą zaś rozsmakować się w kilkunastu rodzajach papieru ryżowego i wrapów."],
			["Ciastka i croissanty", "Na wszystkich, którzy mają ochotę na chwilę słodkiego zapomnienia czekają we Frisco.pl świeże i aromatyczne wyroby cukiernicze, takie jak ciastka, ciasta, drożdżówki, pączki i croissanty. W naszej ofercie są również najwyższej jakości wypieki renomowanej cukierni A. Blikle, wytwarzane wyłącznie z naturalnych składników. Oprócz gotowych słodkości mamy także produkty do pieczenia, dzięki którym stworzą Państwo wspaniałe przysmaki we własnej kuchni."],
		]
	},
	'swieze': { id: 2403, tag: 'fresh', title: "FRISCO FRESH", subtitle: "Najwyższa jakość<br> i świeżość produktów",
		texts: [
			["Owoce, warzywa<br>i zioła", "Owoce, warzywa i świeże zioła do Klientów Frisco.pl dostarczamy dwa razy dziennie w dniu, kiedy otrzymujemy je od naszych dostawców. Jeszcze w hurtowni takie produkty są porcjowane i kompletowane pod konkretne zamówienia. Pakowane są wówczas w specjalną folię, by jak najdłużej zachowały świeżość i najwyższą jakość. ", "Ponadto, w trakcie transportu umieszczamy je w chłodni, dzięki czemu do Klientów docierają w takim stanie, jakby przed chwilą zostały zerwane lub zebrane z ogrodu czy sadu."],
			ch(["Mleko<br> nabiał, jajka", "Dzięki częstym dostawom mleko z Frisco.pl jest zawsze świeże. Co więcej, podczas transportu do Klienta, przechowywane jest w odpowiednich warunkach chłodniczych, by ani trochę nie straciło ze swoich wartości odżywczych. W taki sam sposób przewozimy wszelkie inne produkty mleczne, jak choćby sery, jogurty czy masło, ale też i jajka. Tych również zapewniamy bardzo szeroki wybór.<br><br>Niezależnie od tego, czy Klient szuka jaj przepiórczych, z chowu ściółkowego czy wolnowybiegowego, eko albo od kury zielononóżki, wystarczy kilka kliknięć we Frisco, a kurier dowiezie je prosto pod drzwi."]),
			ch(["Mięsa", "Zamawiamy je u sprawdzonego dystrybutora wyrobów mięsnych i wędliniarskich. Tam porcjowane jest zgodnie z życzeniem Klienta, a następnie pakowane próżniowo, co pozwala przedłużyć jego trwałość i zachować właściwy wygląd i smak.", "Tego samego dnia, gdy odbieramy mięso od dostawcy, w samochodach-chłodniach wysyłamy je do Klientów. Dzięki temu mamy pewność, że do ich rąk dotrze produkt najwyższej jakości. Zamówić we Frisco.pl można praktycznie każdy rodzaj mięsa. W ofercie są m.in. żeberka, drób, steki typu T-bone, gicz cielęca czy rostbef wołowy. Dodatkowo mamy też szeroką gamę mięs z certyfikatami hodowli ekologicznej."]),
			ch(["Wędliny", "Wędliny dostarczane są do nas trzy razy dziennie przez najlepszego dystrybutora tego typu wyrobów. Jeszcze u dostawcy dzielone są na odpowiednie porcje zgodnie, z tym co zamówione zostało przez Klienta. Następnie w dniu, gdy trafiają do nas, wysyłamy je z zamówieniem prosto do Państwa drzwi.<br><br>Na czas transportu zawsze przechowywane są w przystosowanych do tego chłodniach, by jak najdłużej utrzymały najwyższą świeżość, aromat i smak. We Frisco.pl mamy szeroki wybór wędliniarskich specjałów. Zamówić u nas można wędliny produkowane z różnych mięs, w tym również przysmaki pochodzące z ekologicznych gospodarstw, tradycyjne, ale też i sojowe."]),
			["Ryby<br> owoce morza", "Dwa razy dziennie w ryby i owoce morza zaopatruje nas największy dostawca w Warszawie, gdzie kompletowane są pod indywidualne zamówienia. W specjalnych opakowaniach, które chronią je przed mikroorganizmami, ale też zabezpieczają przed uszkodzeniem, dostarczane są do Frisco.pl i tego samego dnia wyruszają do Klienta.", "W trakcie transportu zawsze przewożone są w chłodni, aby na dłużej zachowały swoje odżywcze właściwości. We Frisco.pl mamy więc wiele świeżych morskich specjałów do wyboru. Można u nas zamówić różne gatunki ryb – m.in. węgorze, sumy, szczupaki, halibuty, mieczniki czy turboty. W ofercie są też smakowite małże, krewetki, kalmary, ostrygi i homary."],
		]
	},
	'toaletowe': { id: 292, tag: 'bathroom', title: "PRZYBORY<br> TOALETOWE", subtitle: "Komfort każdego dnia", menuSlider: true,
		subs: [[1883, 293, 1882], 1885, [1884, 1886], 1881, 1888, 1890, 3875, 4133],
		texts: [
			["Kąpiel i mycie", "Aby zawsze czuli się Państwo świeżo i komfortowo, oferujemy szeroką gamę kosmetyków przeznaczonych do pielęgnacji twarzy, ciała i włosów. W naszym  e-supermarkecie znajdą Państwo m.in. kremy do twarzy, mleczka i płyny do demakijażu, balsamy, szampony, odżywki. Oferujemy również rozmaite artykuły przeznaczone do kąpieli, kosmetyki do higieny intymnej, produkty przeznaczone specjalnie dla dzieci, a także akcesoria kąpielowe. Z Frisco.pl zadbają Państwo o swoje ciało od stóp do głów!"],
			["Dezodoranty", "Aby uczucie idealnej świeżości trwało jak najdłużej, polecamy Państwu szeroki wybór dezodorantów przeznaczonych dla mężczyzn i kobiet. W naszej ofercie znajdują się produkty uznanych marek, takich jak Nivea, Rexona, Garnier, Dove, Lady Speed Stick, Axe i Gilette.", "W zależności od upodobań mogą Państwo wybrać swój ulubiony produkt w sprayu, w kulce lub w sztyfcie. Palące słońce czy intensywny wysiłek nie są już przeszkodą, by zawsze czuć się czysto i pewnie."],
			ch(["Toaletowe", "Panie i Panowie, we Frisco.pl dbamy o każdego!  Doskonale zdajemy sobie sprawę z odmiennych potrzeb kobiet i mężczyzn. Dokładamy więc starań, by obie grupy znalazły w naszym sklepie wszystko, czego im potrzeba i mogły każdego dnia czuć się swobodnie i komfortowo. Nasz asortyment obejmuje wysokiej jakości artykuły toaletowe takie jak waciki i patyczki, kosmetyki i narzędzia do depilacji, dezodoranty, żele do mycia i inne produkty codziennej higieny.", ""]),
			["Do zębów", "Piękny, śnieżnobiały uśmiech nie tylko dobrze się prezentuje, ale też dodaje pewności siebie. Warto dbać więc o to, żeby nasze zęby i dziąsła były mocne i zdrowe. By kompleksowo chronić je przed szkodliwym działaniem substancji, z którymi mają styczność każdego dnia, polecamy szeroki wybór past, szczoteczek, płynów do płukania ust i nici dentystycznych.", "Pamiętamy również o najmłodszych, dlatego w naszej ofercie mamy także produkty przeznaczone specjalnie dla dzieci."],
			["Opalanie", "Gdy na plaży słońce praży… pora zadbać o odpowiednią ochronę! Na szczęście we Frisco.pl wybór produktów przeznaczonych do pielęgnacji skóry jest bardzo szeroki. Oferujemy Państwu profesjonalne emulsje, olejki, oliwki i kremy z filtrem zabezpieczającym cerę narażoną na szkodliwe działanie promieni słonecznych. Wszystkim, którym pięknej, brązowej opalenizny wciąż jest mało, polecamy różnego rodzaju kosmetyki przyspieszające i przedłużające efekty opalania."],
			["Chusteczki", "Są pomocne przy przeziębieniu, katarze siennym, gdy przypadkiem się ubrudzimy, podczas upalnego dnia i w wielu innych sytuacjach - zawsze warto mieć przy sobie paczkę chusteczek. We Frisco.pl wybór różnego rodzaju chusteczek jest bardzo duży.", "Oprócz standardowych chusteczek higienicznych w naszej ofercie znajdą Państwo szeroką gamę chusteczek nawilżających, do demakijażu i odświeżających, do pielęgnacji skóry dziecięcej, a także do higieny intymnej."],
			ch(["Depilacja", "We Frisco.pl dbamy o to, by wszystko zawsze poszło gładko! Dlatego oferujemy Państwu rozmaite artykuły przeznaczone do depilacji. Znajdą u nas Państwo żele i maszynki do golenia marek Gilette i Wilkinson, a także profesjonalne kremy i plastry Veet, Joanna i Eveline Cosmetics, pozwalające cieszyć się idealnie gładką skórą nawet do kilku tygodni. Wiemy, że sekret tkwi w szczegółach, dlatego oferujemy produkty przeznaczone nie tylko do depilacji całego ciała, ale też specjalnie dopasowane do depilacji jego konkretnych partii."]),
			["Zestawy<br> kosmetyków", "Są sytuacje, w których trzeba myśleć o kilku rzeczach na raz. Aby takie chwile choć trochę ułatwić, Frisco.pl oferuje Państwa ulubione kosmetyki przygotowane w specjalnych, odpowiednio skomponowanych zestawach.", "Oferujemy komplety kosmetyków i akcesoriów higienicznych przeznaczonych do pielęgnacji twarzy, depilacji – zarówno dla mężczyzn jak i dla kobiet,  a także zestawy dezodorantów, żelów i kosmetyków po goleniu dla panów, dzięki którym uczucie świeżości i komfortu trwa przez cały dzień."],
		]
	},
	'zdrowie-i-uroda': { id: 331, tag: 'health', title: "ZDROWIE<br> I URODA", subtitle: "Jak wyglądać pięknie?", menuSlider: true,
		subs: [4192, 4193, 4194, 4196, 4197, 4200, 4202],
		texts: [
			["Zdrowie", "W domowej apteczce nie może zabraknąć podstawowych środków skutecznie zwalczających ból głowy, brzucha, mięśni lub gorączkę.  We Frisco.pl posiadamy szeroki wybór preparatów na przeziębienie i grypę, witaminy i minerały, a także środki wspomagające układ pokarmowy, krążenia i moczowo-płciowy. W naszym asortymencie znajduje się też wiele różnych suplementów diety, m.in. na odchudzanie i ujędrnianie ciała, poprawiające pamięć i koncentrację oraz kondycję włosów, skóry i paznokci."],
			["Bioekoorganic", "Ekologia to nie moda, ale dla wielu styl życia. We Frisco.pl posiadamy wysokiej jakości produkty przygotowane z poszanowaniem natury na bazie zdrowych składników. Można u nas zamówić zarówno ekologiczną żywność, jak i kosmetyki.", "Proponujemy również środki czystości, m.in. płyny do zmywania naczyń do skóry wrażliwej i delikatnej, tabletki do zmywarek czy też środki do szkła. Ponadto w naszym supermarkecie można zaopatrzyć się w ekologiczne płyny do prania, płukania i zmiękczania tkanin oraz wybielacze."],
			ch(["Ciąża i dziecko", "Kobiety w ciąży i z małymi dziećmi mogą u nas komfortowo zrobić codzienne zakupy - bez konieczności wychodzenia z domu i dźwigania toreb. We Frisco.pl można zaopatrzyć się w pielęgnacyjne kosmetyki idealne dla maluszków oraz odpowiednio skomponowane preparaty dla matek. Posiadamy również specjalne witaminy, suplementy diety dla ciężarnych i karmiących pań oraz ich pociech. Myśląc o powiększeniu rodziny warto również zaopatrzyć się w testy ciążowe dostępne w naszym supermarkecie."]),
			["Drogeria", "Drogeria we Frisco.pl jest doskonale zaopatrzona. Posiadamy orzeźwiające i przyjemne w zapachu szampony oraz płyny do kąpieli, pod prysznic dla kobiet i mężczyzn. Dostarczamy także dezodoranty antyperspiracyjne, produkty do depilacji i golenia, preparaty na cellulit i rozstępy czy też do demakijażu. Z nami łatwiej troszczyć się o zęby dzięki pastom do zębów oraz szczoteczkom, a także dbać o skórę używając skutecznych kremów do twarzy, dłoni i stóp."],
			["Odchudzanie", "Z produktami z Frisco.pl odchudzanie może być łatwiejsze. W naszej ofercie znajdują się suplementy diety, preparaty antycellulitowe, ograniczające wchłanianie tłuszczów, węglowodanów, skrobi i powstrzymujące uczucie łaknienia. Można też u nas nabyć gotowe dania dietetyczne, specjalne koktajle czy też zupy – z dostawą wprost do domu. Decydując się na zakupy w naszym supermarkecie łatwiej precyzyjnie zaplanować sprawunki, by nie ulec pokusie kalorycznych produktów."],
			["Strefa intymna", "Razem z Frisco.pl łatwiej przygotować się do intymnego spotkania we dwoje. W naszym asortymencie znajduje się szeroki wachlarz prezerwatyw o różnej strukturze i właściwościach, potęgujących doznania i zapewniających bezpieczeństwo zbliżenia. Można również zamówić wprost do domowego zacisza zmysłowe żele nawilżające i do masażu intymnego czy też stymulujące nakładki wibracyjne. Dla tych, co potrzebują nieco wsparcia, mamy również w ofercie afrodyzjaki."],
			["Apteczka", "Drobne skaleczenia, ranki oraz urazy mogą przydarzyć się każdemu i wszędzie. Warto być zawsze przygotowanym i mieć pod ręką plastry z opatrunkiem oraz płyny dezynfekujące jak woda utleniona i spirytus salicylowy dostępne w naszym supermarkecie.", "Frisco.pl dostarcza do odbiorców z całej Polski także preparaty antybakteryjne lub przeciw ukąszeniom owadów. Z kolei osoby odczuwające dyskomfort podczas jazdy środkami lokomocji mogą zawczasu zaopatrzyć się w specjalne środki łagodzące problemy układu pokarmowego."],
		]
	},
	'zwierzeta': { id: 369, tag: 'pets', title: "ZWIERZĘTA", subtitle: "Ulubione przysmaki <br>dla Twojego pupila",
		subs: [[2333, 2334, 2335], 4152],
		texts: [
			["Jedzenie dla kotów,<br> psów, gryzoni", "Aby Państwa czworonożni przyjaciele zawsze dostawali zawsze to, co najlepsze, swoją ofertę skomponowaliśmy z wysokiej jakości produktów sprawdzonych marek, takich jak m.in. Whiskas, Sheba, Kitekat, Pedigree, Chappi czy Animonda. W zależności od upodobań pupili mogą Państwo wybierać pomiędzy karmami suchymi, mokrymi w puszkach i saszetkach, a także uwielbianymi przez psy i koty przysmakami.", "Zakupami we Frisco uszczęśliwią też Państwo swoje króliki, chomiki, świnki morskie i inne gryzonie, bowiem w ofercie mamy również pokarmy przeznaczone specjalnie dla nich."],
			["Ściółka i żwirek", "Państwa ukochany kot może zawsze mieć komfortowe warunki, bowiem we Frisco oferujemy szeroką gamę wysokiej jakości żwirków uniwersalnych i silikonowych, a nawet o przyjemnym zapachu lawendy czy zielonego lasu. Znajdą u nas Państwo również ściółkę dla gryzoni w postaci drewnianych trocin i sianka, także z dodatkiem warzyw, dzięki czemu wszystkie króliki, świnki morskie, chomiki i inne gryzonie będą w swoich klatkach czuć się miękko i komfortowo."],
		]
	},
};

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/cms.js */
var CMS = (function(api){
    var pending = {};
    
    var get = function(section, parser, subsection, sort, callback, sortNum, sortDir) {
        subsection = subsection || '';
        var key = 'cms-' + section + '-' + subsection;
        
        var data = friscoStorage.getShallow(key);
        if (data)
            callback(data, true);
        else if (pending[key]) {
            pending[key].push(callback);
        }
        else {
            pending[key] = [callback];
            api.cms(section, subsection, function(data) {
                data = parser(data);
                friscoStorage.setShallow(key, data);
                while (callback = pending[key].pop())
                    callback(data, false);
                delete pending[key];
            }, sort, sortNum, sortDir);
        }
    };
    
    var getter = function(section, parser, subsection, sort, sortNum, sortDir) {
        return function(callback) {
            return get(section, parser, subsection, sort, callback, sortNum, sortDir);
        }
    };
    
    var getter2 = function(section, parser, sort, sortNum, sortDir) {
        return function(subsection, callback) {
            return get(section, parser, subsection, sort, callback, sortNum, sortDir);
        }
    };
    
    var now = _.throttle(function() {
        return Math.floor(new Date().getTime()/1000);
    }, 1000, {trailing: false});
    
    var parse_hp_banners = function(data) {
        var res = [];
        $.each(data, function (i, v){
            pub.assign_tags(v);
            if (!v.priority)
                v.priority = 999;
            if (v['dest-url'] && v['text-info'] && v['text-info'].length <= 28 && pub.check_dates(v))
                res.push(v);
        });
        res.sort(function(a,b){
            var diff = a.priority - b.priority;
            return diff != 0 ? diff : a.dateFrom.localeCompare(b.dateFrom);
        });
        return res;
    };

    var parse_lp_banners = function(data) {
        var res = {};
        $.each(data, function (i, v){
            pub.assign_tags(v);
            if (v['dest-url'] && v.html && pub.check_dates(v)) {
                var adr = v['dest-url'].replace(/^https?:\/\/[^\/]+/, '');
                res[adr] = {img: v.html, size: v.size || "normal"};
            }
        });
        return res;
    };

    var parse_products_banners = function(data) {
        var res = {};
        $.each(data, function (i, v){
            pub.assign_tags(v);
            if(!pub.check_dates(v)) { return; }
            for(var k in v) {
                var id = (k.match(/id(\d+)/) || [])[1];
                if(id) {
                    res[v[k]] = {
                        img: v['link' + id] || v['link'],
                        url: v['dest-url' + id] || v['dest-url']
                    }
                }
            }
        });
        return res;
    };
    
    var parse_catalog_banners = function(data) {
        var res = [];
        $.each(data, function (i, v){
            pub.assign_tags(v);
            if (!v.priority)
                v.priority = 999;
            if (v['dest-url'] && v.html && pub.check_dates(v))
                res.push({img: v.html, priority: v.priority, url: v['dest-url'], categories: v.categories ? v.categories.split(',').map(function(x){return +x}) : null});
        });
        res.sort(function(a,b){
            // Sort by priority; on draw: more specialized (with categories) first
            return a.priority != b.priority ? a.priority - b.priority : (b.categories||'').length - (a.categories||'').length;
        });
        return res;
    };

    var parse_video_lp_top_boxes = function(data) {
        var res = [];
        $.each(data, function (i, v){
            pub.assign_tags(v);
            v.priority = +v.priority || 999 + Math.random();
            if (v['dest-url'] && v.html && pub.check_dates(v)) {
                var adr = v['dest-url'].replace(/^https?:\/\/[^\/]+/, '');
                res.push({img: v.html, priority: v.priority, url: v['dest-url']});
            }
        });
        res.sort(function(a,b) { return a.priority - b.priority; });
        return res;
    };
    
    var parse_brands = function(data) {
        var res = [];
        $.each(data, function(i, brand) {
            var image = null, priority = null;
            $.each(brand.tags, function(i, e){
                if (e.key == "Link_Do_logotypu") {
                    image = e.val;
                }
                if (e.key == "priority") {
                    priority = +e.val;
                }
            });
            if (image) {
                var obj = {container: brand.container, image: image};
                if (priority)
                    obj.priority = priority;
                res.push(obj);
            }
        });
        return res;
    }
    
    var parse_brand = function(data) {
        if (!data.length)
            return null;
        var brand = data[0], also = [];
        $.each(brand.tags, function(i, t) {
            if (t.key.toLowerCase().indexOf('extra-info') === 0)
                also.push(t.val);
            else
                brand[t.key] = t.val;
        });
        var res = {container: brand.container, name: brand.name, text: brand.html, image: brand.Link_Do_logotypu, bg: brand.Link_Do_obrazka};
        if (also.length)
            res.also = also.join("||");
        return res;
    }
    
    var parse_ribbon = function(data) {
        var res = [];
        $.each(data, function (i, v){
            pub.assign_tags(v);
            if (typeof(v['switch']) == "undefined")
                v['switch'] = "on"
            v.color = v.kolor;
            if (v.html && pub.check_dates(v))
                res.push(v);
        });
        return res;
    };

    var parse_abc = function(data) {
        var res = [];
        $.each(data, function (i, v){
            v.products = [];
            $.each(v.tags, function(i, e){
                if (e.key.toLowerCase().match(/^(produkt|id)/))
                    v.products.push(e.val);
                else
                    v[e.key] = e.val;
            });
            delete v.tags;
            res.push(v);
        });
        return res;
    };

    var parse_fridge = function(data) {
        var res = {};
        var recipe_re = /Sposób przygotowania\n?((.|\n)*)/im;
        var ingredients_re = /\nSkładniki\n?((.|\n)*)/im;

        $.each(data, function (i, v){
            v.products = [];
            $.each(v.tags, function(i, e){
                if (e.key.toLowerCase().match(/^(produkt|id)/))
                    v.products.push(e.val);
                else
                    v[e.key] = e.val;
            });
            delete v.tags;
            var m = v.container.match(/^(.+)_(.+?)$/);
            if (!m)
                return true; //continue
            if (!res[m[1]])
                res[m[1]] = { header: {}, recipes: [] };
            if(m[2] == "title")
                res[m[1]].header = v;
            else {
                var html = v.html || '';
                v.text = (html.match(recipe_re) || [])[1];
                v.text = (v.text || '').replace(ingredients_re, '');
                v.ingredients = (html.match(ingredients_re) || [])[1];
                v.ingredients = (v.ingredients || '').replace(recipe_re, '');
                res[m[1]].recipes.push(v);
            }
        });
        return res;
    };

    var parse_menu_ads = function(data) {
        var res = {};
        $.each(data, function (i, v){
            var products = [];
            $.each(v.tags, function(i, e){
                if (e.key.toLowerCase().indexOf('produkt') === 0)
                    products.push(+e.val);
            });
            res[v.container.substr(3)] = products;
        });
        return res;
    };

    var parse_menu_shops = function(data) {
        var res = [];
        $.each(data, function (i, v){
            pub.assign_tags(v);
            var cats = _.map(v.categories.split(','), function(x) { return +x; });
            res.push({img: v['picture-link'], url: v['dest-url'], categories: cats, priority: +v.priority || 999});
        });
        res.sort(function(a,b) { return a.priority - b.priority; });
        return res;
    };

    var parse_product_list = function(data) {
        var res = [];
        var res = [], id;
        if (!data.length || !pub.check_dates(data[0]))
            return res;
        $.each(data[0].tags, function(i, e){
            if (id = +e.val || 0)
                res.push(id);
        });
        return res;
    };

    var _tags_to_lists = function(data) {
        var res = {}, id;
        $.each(data.tags, function(i, e){
            if (id = +e.val || 0) {
                var key = e.key.match(/^([a-z]+)\d/)[1];
                if (!res[key])
                    res[key] = [];
                res[key].push(id);
            }
        });
        return res;
    };

    var parse_product_list_extended = function(data) {
        if (!data.length)
            return null;
        var res = _tags_to_lists(data[0]);
        return {ids: _.flatten(res), lengths: _.pluck(res, 'length')};
    };

    var parse_many_product_lists = function(data) {
        var res = {};
        if (!data.length)
            return res;
        $.each(data, function(i, container){
            res[container.container] = _tags_to_lists(container);
        });
        return res;
    };

    var parse_bounce = function(data) {
        var config = data[0];
        pub.assign_tags(config);
        return {enabled: !!+config.active, delay: +config['delay-sec']};
    };
    
    var parse_partner_lp = function(data) {
        if (!data.length)
            return null;
        var v = data[0];
        pub.assign_tags(v);
        return v;
    };
    
    var parse_products_list = function(data) {
        var res = [];
        $.each(data, function (i, v){
            var ids=[];
            $.each(v.tags, function(i, t) {
                if (t.key.toLowerCase().indexOf('id') === 0)
                    ids.push(+t.val);
                else
                    v[t.key] = t.val;
            });
            delete v.tags
            delete v.action;
            v.ids = ids;
            if (pub.check_dates(v))
                res.push(v);
        });
        return res;
    };
    
    var parse_contest = function(data) {
        var res = {};
        if (!data.length)
            return res;
        $.each(data[0].tags, function(i, e){
            var parts = e.val.split("-"), multi=false;
            if (parts[parts.length - 1] == "zgrzewka") {
                multi = true;
                parts.pop();
            }
            var key = e.key.match(/^([a-z]+)\d/)[1];
            if (!res[key])
                res[key] = [];
            if (parts.length == 3)
                res[key].push({id: +parts[0], priority: +parts[1], show: parts[2] == "1", multipack: multi});
            else
                res[key].push({id: +e.val, priority: 999, show: true, multipack: multi});
        });
        _.each(res, function(r) {
            r.sort(function(a,b){
                 return a.priority - b.priority;
            });
        });
        return res;
    };

    var parse_menu_right = function(data) {
        if (!data.length)
            return [];
        var tags = data[0] && data[0].tags;
        var items = [];
        $.each(tags, function(i, t) {
            var match = t.key.match(/(.*?)(\d+)/);
            var type = match[1];
            var id = +match[2] - 1;
            items[id] = items[id] || {};
            items[id][type] = t.val;
        });
        return items;
    };

    var parse_menus = function(data) {
        var res = {};
        if (!data.length)
            return res;
        $.each(data, function(i, v){
            res[v.container] = pub.tags_to_list(v.tags);
        });
        return res;
    };

    var parse_fb_popup = function(data) {
        if (!data.length)
            return null;
        data = data[0];
        pub.assign_tags(data);
        var toDel = ["html", "action", "container", "target", "dateFrom", "dateTo"];
        for (i in toDel)
            delete data[toDel[i]];
        return data;
    };

    var parse_gift_popup = function(data) {
        if (!data.length)
            return null;
        data = data[0];
        var content = pub.tags_to_list(data.tags);
        pub.assign_tags(data);
        return {url: data.html, place: data.place, content: content};
    };

    var parse_nye_popup = function(data) {
        if (!data.length)
            return null;
        data = data[0];
        pub.assign_tags(data);
        return {url: data['dest-url'], place: data.place, text: data.html};
    };

    var parse_checkout_popup = function(data) {
        if (!data.length)
            return null;
        data = data[0];
        pub.assign_tags(data);
        if (pub.check_dates(data))
            return {head: data.headline, text: data.html, button: data.button};
        return null;
    };

    var parse_checkout_thanks = function(data) {
        if (!data.length)
            return null;
        if (pub.check_dates(data[0]))
            return data[0].html;
        return null;
    };

    var parse_kubus = function(data) {
        var res = {};
        $.each(data, function (i, v){
            var ids = new Array(v.tags.length);
            $.each(v.tags, function(i, t) {
                if (t.key.toLowerCase().indexOf('id') === 0)
                    ids[t.key.substr(2) - 1] = +t.val;
            });
            res[v.container] = ids;
        });
        return res;
    }
    
    var parse_collective = function(data) {
        var res = [];
        $.each(data, function (i, v){
            var m = v.container.match(/sekcja_(\d+)(\w)?/);
            var id = m[1] || 0;
            var subsection = m[2] ? m[2].charCodeAt(0) - 96  : false; // 'a' ~> 1
            var links = pub.tags_to_list(v.tags);
            pub.assign_tags(v);
            res[id] = res[id] || {};
            res[id].links = res[id].links || [];
            if(!subsection) {
                res[id].title = v.title;
                res[id].link_title = v['text-info'];
                res[id].link_url = v['dest-url'];
                res[id].subline = v.html;
                res[id].links[0] = links;
                res[id].id = id;
                res[id].priority = +v.priority || 999;
            } else {
                res[id].links[subsection] = links;
            }
        });
        res = _.filter(res, _.identity);
        res.sort(function(a,b){
            return a.priority != b.priority ? a.priority - b.priority : a.id - b.id;
        });
        return res;
    }

    var parse_pampers_products = function(data) {
        var products = [];
        $.each(data, function(i, container) {
            var line = $.trim(container.container);
            var types = [];
            $.each(['pieluchy', 'chusteczki', 'pieluchomajtki'], function(i, t) {
                if($.grep(container.tags, function(x) { return x.key == t && x.val == '1'; }).length) types.push(t);
            });
            $.each(container.tags, function(i, tag) {
                if(tag.key.match('id')) {
                    products.push({
                        id: (tag.val.match(/^(\d+)/) || [])[1],
                        size: (tag.val.match(/_(.+)/) || [])[1],
                        line: line,
                        types: types
                    });
                }
            });
        });
        return products;
    };

    var parse_ab_tests = function(data) {
        var options = {};
        var toDel = ["html", "action", "container", "target", "dateFrom", "dateTo"];
        $.each(data, function(i, container) {
            pub.assign_tags(container);
            if (pub.check_dates(container)) {
                for (i in toDel)
                    delete container[toDel[i]];
                options[container['test-parameter']] = container;
            }
        });
        return options;
    };
    
    var parse_codes = function(data) {
        if (!data.length)
            return null;
        data = data[0];
        var codes = pub.tags_to_list(data.tags);
        pub.assign_tags(data);
        return {h1: data.headline, h2: data.subline, img: data.logotyp, codes: codes};
    };
    
    var parse_promopaper = function(data) {
        if (!data || !data.length)
            return {active: false};
        res = {};
        $.each(data, function(i, container) {
            if (container.container == 'gazetka')
                res.active = pub.check_dates(container);
            else if (container.container == 'header') {
                pub.assign_tags(container);
                res.header = container;
            } else {
                res[container.container] = pub.products_list(container.tags);
            }
        });
        return res;
    };

    var parse_fridge_urls = function(data) {
        if (!data || !data.length)
            return [];
        var res = [];
        $.each(data[0].tags, function(i, t) {
            res[+t.key] = t.val;
        });
        return res;
    };
    
    var parce_action_home = function(data) {
        res = {};
        $.each(data, function(i, c) {
            var m = c.container.match(/^(.+)_(\d).*$/)
            if (m) {
                pub.assign_tags(c);
                if (!res[m[1]])
                    res[m[1]] = [];
                res[m[1]][m[2]-1] = {img: c.img, link: c['dest-url'], title: c.text, subline: c.cta, priority: +c.priority||99};
            }
            else if (c.container.match(/^hp_products/)) {
                res.products = pub.products_list(c.tags);
            }
        });
        _.each(res, function(v, k) {
            if (k != 'products')
                res[k].sort(function(a,b){ return a.priority - b.priority; });
        });
        return res;
    };
    
    var paragraphize = function(text) {
        return _.map(text.split("\n"), function(p){
            p = p.trim();
            var m = p.match(/^\[h\](.+)\[\/h\]$/);
            return m ? "<h2>" + m[1] + "</h2>" : "<p>" + p + "</p>";
        }).join("");
    };

    var parse_action_products = function(data) {
        if (!data || data.length == 0)
            return {};
        var res = {};
        $.each(data, function(i, c) {
            var sections = {}, more = '';
            
            $.each(c.tags, function(i, e){
                if (m = e.key.toLowerCase().match(/^(produkt|id)\d+(\w?)$/)) {
                    var sub = m[2].charCodeAt(0) - 96 || 0; // 'a' ~> 1 , nothing ~> 0
                    sections[sub] = sections[sub] || {title: '', ids: []};
                    sections[sub].ids.push(e.val);
                } else if (m = e.key.toLowerCase().match(/^sekcja(\d+)$/)) {
                    var sub = +m[1];
                    sections[sub] = sections[sub] || {title: '', ids: []};
                    sections[sub].title = e.val;
                } else
                    c[e.key] = e.val;
            });
            
            if (c.main) {
                var parts = c.html.split("\n\n");
                c.html = parts[0];
                more = _.map(parts.slice(1), paragraphize);
            }
            res[c.container] = {img: c.img, url: c.url, title: c.headline, text: c.html, moreText: more, sections: sections};
        });
        return res;
    };

    var parse_action_recipes = function(data) {
        var res = {}, m;
        $.each(data, function (i, v){
            v.products = {};
            $.each(v.tags, function(i, e){
                if (m = e.key.toLowerCase().match(/^(produkt|id)\d+(\w)$/)) {
                   var sub = m[2].charCodeAt(0) - 96; // 'a' ~> 1 
                    v.products[sub] = v.products[sub] || [];
                    v.products[sub].push(e.val);
                } else if (e.key == 'headline')
                    v.title = e.val;
                else
                    v[e.key] = e.val;
            });
            v.text = v.html;
            delete v.tags;
            delete v.html;
            res[v.container] = v;
        });
        return res;
    };

    var pub = {
        assign_tags: function(obj) {
            $.each(obj.tags, function(i, t) {
                obj[t.key] = t.val;
            });
            delete obj.tags;
        },
        check_dates: function(obj) {
            var _now = now();
            return (obj.timestampFrom <= _now && obj.timestampTo >= _now);
        },
        tags_to_list: function(tags, skip_filter) {
            var items = [];
            $.each(tags, function(i, t) {
                var match = t.key.match(/^(.*?)(\d+)$/);
                if (!match) return true;
                var type = match[1];
                var id = +match[2] - 1;
                items[id] = items[id] || {};
                items[id][type] = t.val;
            });
            return !skip_filter ? _.filter(items, _.identity) : items;
        },
        products_list: function(tags, prefix){
            var ids = [];
            prefix = prefix || 'id';
            _.each(tags, function(t) {
                if (t.key.toLowerCase().indexOf(prefix) === 0)
                    ids.push(+t.val);
            });
            return ids;
        },
        hp_banners: getter('baner-hp', parse_hp_banners),
        brands: getter('brands', parse_brands, undefined, 'priority', true, "asc"),
        brand: getter2('brands', parse_brand),
        ribbon: getter('ribbon', parse_ribbon),
        abc: function(num, callback) {return get('przepis' + (num>1?num:''), parse_abc, undefined, undefined, callback); },
        fridge: function(num, callback) {return get('Fridge' + (num>1?num:''), parse_abc, undefined, undefined, callback); },
        fridge_page: function(num, callback) {return get('Fridge' + num, parse_fridge, undefined, undefined, callback); },
        fridge_routing: getter('Fridge0', parse_fridge_urls),
        lp_banners: getter('landing', parse_lp_banners),
        cola_contest: getter('kontent', parse_product_list, 'cola'),
        content: getter2('kontent', parse_product_list_extended),
        catalog_banners: getter('side-clips', parse_catalog_banners),
        product_banners: getter('pv-baner', parse_products_banners),
        menu_ads: getter('ads_in_menu', parse_menu_ads),
        menu_shops: getter('shop_menu', parse_menu_shops),
        partner_lp: getter2('lp_dla partnerow', parse_partner_lp),
        bounce_config: getter('vars', parse_bounce, 'exit-popup'),
        octoberContest: getter('', parse_contest, 'jezyk'),
        free_prod: getter('promo', parse_products_list),
        menu_right: getter('menu', parse_menu_right, 'menu_right'),
        menu_ik: getter('menu_ik', parse_menus),
        video_lp_top_boxes: getter('boksy_top', parse_video_lp_top_boxes),
        category_lp_top_boxes: getter('boksy_cat', parse_video_lp_top_boxes),
        fb_popup: getter('popup', parse_fb_popup, 'popup-fb'),
        gift_popup: getter('popup', parse_gift_popup, 'popup-prezent'),
        nye_popup: getter('popup', parse_nye_popup, 'popup-karnawal'),
        checkout_popup: getter('popup', parse_checkout_popup, 'checkout-popup'),
        checkout_thanks: getter('', parse_checkout_thanks, 'thank-you-page'),
        kubus: getter('kubus', parse_kubus),
        collective: getter('strona_zbiorcza', parse_collective),
        pampers: getter('pampers', parse_pampers_products),
        ab_tests: getter('testyab', parse_ab_tests),
        codes_config: getter('kupony', parse_codes, 'kody_rabatowe'),
        category_lps: getter('kategorie', parse_many_product_lists),
        promopaper: getter('gazetka', parse_promopaper),
        action_home: function(name, callback) {return get('akcja-' + name, parce_action_home, undefined, undefined, callback); },
        action_recipes: function(name, callback) {return get('przepis-' + name, parse_fridge, undefined, undefined, callback); },
        action_recipes_old: getter('przepis-ziola', parse_action_recipes),
        action_lps: function(name, callback) {return get('lp-' + name, parse_action_products, undefined, undefined, callback); },
    };
    
    return pub;
});

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/fablo_config.js */
(function() {

window.FabloConfig = {};
var Sorter = (function() {
  function Sorter(_arg) {
    var attr, el, _fn, _ref;
    var _this = this;
    this.sort_filter = _arg.sort_filter, this.type_switcher = _arg.type_switcher, this.attributes = _arg.attributes;
    this.type = '+';
    this.attribute = '_accuracy_';
    this.defaultAttribute = '_accuracy_';
    this.type_switcher.find('li').click(function() {
      if(_this.type_switcher.is('.show')){
        if($(this).prev().length) {
          _this.type = _this.type === '+' ? '-' : '+';
          _this.refresh_ui();
          _this.update();
        }
        $(_this.type_switcher.removeClass('show'));
        return false;
      }
    });
    _ref = this.attributes;
    _fn = function(attr, el) {
      return el.find('a').click(function() {
        _this.attribute = attr;
        if(el.attr('x-ord') && el.attr('x-ord') != _this.type) {
            _this.type = el.attr('x-ord');
        }
        _this.refresh_ui();
        _this.update();
        return false;
      });
    };
    for (attr in _ref) {
      el = _ref[attr];
      _fn(attr, el);
    }
    this.sort_filter.filter_changed = function() {
      var __, _ref2;
      _ref2 = (_this.sort_filter.sort_str || '').match(/(\+|-)(.+)/) || ['', '-', _this.defaultAttribute], __ = _ref2[0], _this.type = _ref2[1], _this.attribute = _ref2[2];
      return _this.refresh_ui();
    };
  }

  Sorter.prototype.refresh_ui = function() {
    var el, k, _ref;
    _ref = this.attributes;
    for (k in _ref) {
      el = _ref[k];
      el.removeClass('selected');
    }
    this.attributes[this.attribute] && this.attributes[this.attribute].addClass('selected');
    var c = this.type_switcher.find('li:eq(0)').text() == 'malejąco';
    if((c && this.type == '+') || (!c && this.type == '-')) {
        this.type_switcher.find('li:eq(1)').detach().prependTo(this.type_switcher);
    }
    return this.type_switcher.toggle(this.attribute !== '_accuracy_');
  };

  Sorter.prototype.update = function() {
    if (this.attribute && this.attribute !== '_accuracy_') {
      return this.sort_filter.set_sort(this.type + this.attribute);
    } else {
      return this.sort_filter.set_sort('');
    }
  };

  Sorter.prototype.setDefaultAttribute = function(attr) {
    this.defaultAttribute = attr;
    this.sort_filter.filter_changed();
  };

  return Sorter;

})();

var trackProducts = function(res, userId) {
    if(res && res.products && res.products.results) {
        try{
            // Tradedoubler
            var prods = _.map(res.products.results, function(p) {
                return {id: p.id, price: p.attributes['#price'], currency: "PLN", name: p.name};
            });
            window.TDConf = window.TDConf || {};
            TDConf.Config = {
                products: prods,
                containerTagId : "5200"
            };
            if(typeof (TDConf) != "undefined"){
                TDConf.sudomain = ("https:" == document.location.protocol) ? "swrap" : "wrap";
                TDConf.host = ".tradedoubler.com/wrap";
                TDConf.containerTagURL = (("https:" == document.location.protocol) ? "https://" : "http://")  + TDConf.sudomain + TDConf.host;
                if (typeof (TDConf.Config) != "undefined") {
                        $.getScript(TDConf.containerTagURL  + "?id="+ TDConf.Config.containerTagId);
                }
            }
        } catch (e) {}

        // Criteo
        if (frisco.useTrackingCode("criteo"))
        try{
            if(!res.attributes) {
                var prods = _.pluck(_.first(res.products.results, 3), 'id');
                window.criteo_q.push(
                    { event: "setAccount", account: 4936 },
                    { event: "setCustomerId", id: userId },
                    { event: "setSiteType", type: "d" },
                    { event: "viewList", item: prods ,user_segment: "1" }
                );
            }
        } catch (e) {}
    }
};

var lastCategory = null;
var trackCategory = function(category, userId) {
    if (category == lastCategory) // change event (and this function) is fired twice per search result page.
        return;
    lastCategory = category;
    
    // Sociomantic
    if (frisco.useTrackingCode("sociomantic"))
    try {
        sociomantic.sonar.adv['frisco-pl'].clear();
        if (userId) window.customer = {identifier: userId};
        window.product = {category: category.split('>>')};
        sociomantic.sonar.adv['frisco-pl'].track();
    } catch (e) {}
}

var groupingFns = {
    'category1': function(p) { return p.attributes.categories[0].split('>>')[0]; }
};

var toInt = function(x) { return +x; }
var toBool = function(x) { return x === "1"; }
var templates;

var cartInfo = {};
FabloConfig.updateCartInfo = function() {
    cartInfo = friscoStorage.getShallow('cartData');
}
var productTranslator = function(p) {
    var attributes = p.attributes;
    var extraInfo = p['extra-info'];

    return {
        ean: attributes.ean[0],
        full_name: (attributes.brand_name || [''])[0] + ' ' + p.name,
        grammage_gross: attributes.grammage_gross[0],
        human_grammage_gross: extraInfo.human_grammage_gross[0],
        human_price_gross: extraInfo.original_price ? extraInfo.original_price[0].replace('.', ',') : p.attributes['#price'][0][0].toFixed(2).replace('.',','),
        image_id: p.images[0].split(',')[1] || '',
        is_multipack: toInt(extraInfo.is_multipack[0]),
        is_van_only: toBool(attributes.is_van_only[0]),
        is_variable_weight: toBool(extraInfo.is_variable_weight[0]),
        is_alcohol: toBool(attributes.is_alcohol[0]),
        multipack_id: toInt(extraInfo.multipack_id[0]),
        price_gross: p.attributes['#price'][0][0] * 100,
        product_id: toInt(p.id),
        promotion_human_price_gross: +extraInfo.promotion_human_price_gross,
        current_promotion: extraInfo.promotion ? 1 : undefined,
        promotions: extraInfo.promotion ? {1: JSON.parse(extraInfo.promotion)} : {},
        status: toInt(attributes.status[0]),
        tag_ids: _.map(attributes.tag_ids, toInt),
        fablo: 1,
        cartAmount: cartInfo && cartInfo.entries && cartInfo.entries[+p.id] ? cartInfo.entries[+p.id].amount : 0,
        octoberContest: $.inArray(+p.id, october_promo_products) >= 0
    };
};
var productRenderer = function(options, template) {
    template = template || 'product_shelf';
    return function(p) {
        var product_data = productTranslator(p);
        if(options) product_data = _.extend(product_data, options);
        if (Fablo.resultPanes.state.attributes.group)
            product_data.group = Fablo.resultPanes.state.attributes.group(p);
        return $($.jqote(templates[template], {product: product_data, gaAttr: 'Kategoria' }));
    };
};

FabloConfig.productTranslator = productTranslator;
FabloConfig.productRenderer = productRenderer();

FabloConfig.initFablo = function(api, cms, _templates, loggedUserId, userGroup) {
    FabloConfig.userGroup = userGroup;
    templates = _templates;
    var vertical_filters = true;
    
    Fablo.ready(function(){
        _.noConflict();
        if(vertical_filters) {
            $("#fablo_content").addClass("vertical-filters");
        }

        $("#searchPhrase").click(function() {
            if($(this).val().length < 2) return false;
        });

        $("#fablo_content").jqoteapp(frisco.getTemplate('footer_content'), {});

        var clr = Fablo.ExternalCategoryTreePanesView.__super__.render_pane;
        Fablo.ExternalCategoryTreePanesView.__super__.render_pane = function(){
            clr.apply(this, arguments);
            $('#fablo_categories .visible').removeClass('visible up');
            $('#fablo_categories .cat-0').addClass('visible');
            $('#fablo_categories .active').addClass('visible');
            $('#fablo_categories .active').parents('li').addClass('visible up');
            $('#fablo_categories .active').parents('li').prev().addClass('visible up');
            var n = $('#fablo_categories .active').next();
            if(!n.is('[class^="cat"]')) n.addClass('visible').find('li[class^="cat"]').addClass('visible');
            if($('#fablo_categories .cat-0').is('.active')) {
                $('#fablo_categories > ul > li[class^="cat"]').addClass('visible');
            }

        };
        var categories, activateCategory;
        var categoryListRendered = function(_categories, _activateCategory) {
            categories = _categories;
            activateCategory = _activateCategory;
        };

        var changeActiveCategory = function(id) {
            var current = _.find(categories, function(x) { return x.id == id; });
            var currPath = current.name.split('>>');

            var subCategories = _.filter(categories, function(cat) {
                var path = cat.name.split('>>');
                if(((current.name == "Wszystkie wyniki" && cat.name != "Wszystkie wyniki") || (current.name == "All results" && cat.name != "All results")) && path.length == 1) {
                    return true;
                }
                if(path.length != currPath.length + 1) { return false; }
                var match = true;
                for(i = 0; i < currPath.length; i++) {
                    match = match && (path[i] == currPath[i]);
                }
                return match;
            });

            var parents = _.filter(categories, function(cat) {
                if(cat.name == "Wszystkie wyniki" || cat.name == "All results") {
                    return true;
                }
                var path = cat.name.split('>>');
                for(i = 0; i < path.length; i++) {
                    if(path[i] != currPath[i]) {
                        return false;
                    }
                }
                return true;
            });
            var firstParent = _.first(parents);
            parents = _.rest(parents);

            $("#fablo_categories").toggle(!!(parents.length || subCategories.length > 1));
            var subUl = $("#fablo_categories ul.subcategories").empty();
            var topCategory = $("#fablo_categories .top-category").empty();
            var parentsUl = $("#fablo_categories ul.parents").empty();

            subUl.toggle(subCategories.length > 1);

            var link = function(cat, path, notli) {
                var active = id !== cat.id;
                var li_el = $('<li/>');
                var path_el = $('<span class="tri">▶</span>');
                var content = (active ? ' <a href="#">' : '') + _.last(cat.name.split('>>')) + ' <span>(' + cat.products_count + ')</span>' + (active ? '</a>' : '');
                var el;
                if(!notli) {
                    if(path) { li_el.append(path_el); }
                    el = li_el.append(content);
                } else {
                    el = $('<span>' + content + '</span>');
                }
                el.find('a').click(function() { activateCategory(cat.id); return false; });
                return el;
            };

            _.each(subCategories, function(cat) { subUl.append(link(cat)); });
            _.each(parents, function(cat) { parentsUl.append(link(cat, true)); });

            topCategory.append(link(firstParent, false, true));

            if((parents.length || vertical_filters) && subCategories.length > 1) {
                parentsUl.append('<li class="up-trig"><img src="/img/filters-up-triangle.jpg"/></li>');
            }
            if(parents.length === 0 && subCategories.length > 1 && !vertical_filters) {
                topCategory.find('a').append('<img src="/img/filters-left-triangle.jpg"/>');
            }

            subUl.append('<li style="clear:left;float:none;"/>');
            $(window).trigger('resize');
        };

        // workaround for bug in fablo
        var old_display_name_for_attribute_fn = Fablo.Slot.prototype.display_name_for_attribute;
        Fablo.Slot.prototype.display_name_for_attribute = function() {
            var n = this.get('attribute');
            var dict = {
                has_promotion: __("Pokaż>>Promocje"),
                is_new: __("Pokaż>>Nowości"),
                has_gratis: __("Pokaż>>Z gratisem"),
                frisco_bargain: __("Pokaż>>Frisco Okazja")
            };
            return dict[n] || old_display_name_for_attribute_fn.call(this);
        };

        Fablo.offsetProducts = 0;

        var globalFilters = {
            sort: new Fablo.SimpleFilter(),
            is_van_only: new Fablo.SimpleFilter({omit_in_url: true, auto_apply: false}),
            // prefilter for brand pages, urls with /filters,_brand_name=x/ sets this prefilter
            _brand_name: new Fablo.SimpleFilter({alias_for_attribute: 'brand_name', auto_apply: false}),
            _is_new: new Fablo.SimpleFilter({alias_for_attribute: 'is_new', auto_apply: false}),
            _has_promotion: new Fablo.SimpleFilter({alias_for_attribute: 'has_promotion', auto_apply: false})
        };

        frisco.friscoVanAvailable(function(available) {
            globalFilters.is_van_only.set_attribute_filter(available ? '' : 'is_van_only=0');
        });
        FabloConfig.vanOnly = function(val) {
            globalFilters.is_van_only.set_attribute_filter(val ? '' : 'is_van_only=0');
            $('#fablo_content .hotword-content').remove();
            $('#fablo_products .product-van-only').toggle(val);
            $('#fablo_products .all-products-pane .catalogImage').remove();
            Fablo.resultPanes.trigger('products-rendered');
        };
        
        Fablo.searchInput({
            searchInput: '#searchPhrase',
            resultDiv: '#fablo_products',
            timeDiv: '#not-display',
            searchDelay: 500,
            slowConnectionMsgTimeout: 10000,
            filtersContainerSelector: '#fablo_filters',
            layout: {
                type: 'custom-category-list',
                renderer: categoryListRendered,
                onChange: changeActiveCategory
            },
            categoryListSelector: '#fablo_categories',
            placeholderText: __('Jakiego produktu szukasz?'),
            weakSort: '-priority',
            attributePrefilter: 'status=0||3&&acc'+userGroup+'=1',
            history: false,
            separatePurchased: !!loggedUserId,
            userId: loggedUserId,
            paneOptions: {
                cssPaneView: true,
                showOnlyText: "Filtruj wyniki po",
                defaultSelectedFilters: ["has_promotion", "brand_name", "tags", "wine_country", "wine_aging", "wine_colour", "wine_dryness", "wine_year"],
                presentations: [{
                    type: 'grid',
                    paginator: 'infinity-scroll',
                    productHeight: false,
                    productWidth: false,
                    placeholders: 12,
                    productTemplate: productRenderer()
                },{
                    type: 'grid',
                    paginator: 'infinity-scroll',
                    productHeight: false,
                    productWidth: false,
                    placeholders: 3,
                    productTemplate: productRenderer({bigImage: 1})
                }]
            },
            globalFilters: globalFilters,
            toggleActive: function(is_active) {
                $('#fablo_content').toggle(is_active);
            }
        });
        $("form.search-form").submit(function() { return false; });

        var sorter = new Sorter({
            type_switcher: $('#sort-type'),
            sort_filter: globalFilters.sort,
            attributes: {
              '_accuracy_': $('#sort-attrs .sort-list li:eq(0)'),
              'priority': $('#sort-attrs .sort-list li:eq(1)'),
              '#price': $('#sort-attrs .sort-list li:eq(2)'),
              'unit_price': $('#sort-attrs .sort-list li:eq(3)'),
              '#name': $('#sort-attrs .sort-list li:eq(4)')
            }
        });
        $('#sort-type').click(function() { $(this).addClass('show'); });
        $(document).click(function() { $('#sort-type').removeClass('show'); });

        if (_gaq)
            $("#sort-attrs .sort-list a").click(function() {
                _gaq.push(['_trackEvent','Lista-produktow','Sortowanie',$(this).html()]);
                return true;
            });

        Fablo.resultPanes.bind('results-received', function(res) {
            _.defer(function(){
                $("#fablo_content .list-filter").toggle(!!Fablo.resultPanes.currentlyShowing);
                if (!Fablo.resultPanes.currentlyShowing) {
                    // Custom defined no-result page
                    frisco.onNoResults(Fablo.resultPanes.state.attributes.query, $("#fablo_products .hotword-content"));
                }
            })
        });

        var setProductsPresentation = function(n) {
            var presentation_switcher = Fablo.resultPanes.paneOptions.presentation_switcher;
            presentation_switcher.set({presentation: presentation_switcher.get(n)}, {silent: true});
        };

        var bigImagesEnabled = function() {
            var presentation_switcher = Fablo.resultPanes.paneOptions.presentation_switcher;
            return presentation_switcher.get('presentation') === presentation_switcher.get(1);
        };

        var toggleOffset = function(cat, brand) {
//             var show = cat && cat.split('>>').length == 1 && $(window).width() > 1024;
            var show = $(window).width() > 1024  && !brand;
            if(show && Fablo.offsetProducts == 0) { Fablo.offsetProducts = 3; }
            if(!show && Fablo.offsetProducts > 0) { Fablo.offsetProducts = 0; }
        }
        var toggleBanners = function() {
            if(Fablo.offsetProducts == 0) {
                $('#fablo_products .all-products-pane .catalogImages').remove();
                $('#fablo_products .all-products-pane .catalogImage').remove();
            }
            if(Fablo.offsetProducts == 3 && !bigImagesEnabled()) {
                frisco.addCatalogBanners("#fablo_products .all-products-pane", true, Fablo.resultPanes.state.attributes.category_path, Fablo.resultPanes.state.attributes.query);
            }
        }
        
        var loadBrand = function(state) {
            var url_brand = (state.filters && state.filters.match(/_brand_name=([^/,;]+)/) || [])[1];
            var hide = function(hide_popular) {
                $("#fablo_content").removeClass("brand-page");
                $("#fablo_content #banner").remove();
                Fablo.resultPanes.state.attributes.brand = state.brand = undefined;
                if (hide_popular)
                    $("#popular_products").hide();
            }
            if (!url_brand) {
                hide();
                return;
            }
            var brand = url_brand.replace(/_/g, ' ');
            state.brand = brand;
            if (brand != url_brand)
                state.filters = '_brand_name=' + state.brand;
            if (!state.sort)
                state.sort = 'categories';
            document.title = brand + " - z dostawą do domu - Frisco.pl";
            $("#fablo_content").addClass("brand-page");
            cms.brand(brand, function(data, instant) {
                if (data) {
                    var fix = brand != data.name;
                    if (fix) {
                        // Correct in case the container name could not hold some special characters.
                        state.brand = brand = data.name;
                        state.filters = '_brand_name=' + state.brand;
                    }
                    $("#fablo_content #banner").remove();
                    $('#fablo_products').before($.jqote(frisco.getTemplate('brand_data'), {brand: brand, text: data.text, icon: data.image, image: data.bg}));
                    if (data.also) {
                        state.brand += "||" + data.also;
                        state.filters = '_brand_name=' + state.brand;
                        fix = true;
                    }
                    // If instant=true, then the info is served from cache. We can alter state immediately and that's what have been done.
                    if (fix && !instant) {
                        // If instant=false, then the info is served after request. Page can be already shown, so set new state and show new results.
                        newState = $.extend({}, Fablo.resultPanes.state.attributes);
                        newState.brand = state.brand;
                        newState.filters = state.filters;
                        Fablo.resultPanes.clear();
                        Fablo.resultPanes.setNewState(newState);
                    }
                }
                else
                    hide(true);
            });
        };

        var setFabloRoutes = function () {
            var categoryIdToFullNameAndPath = function(id, cb) {
                api.getCachedCategory(id, function(category) {
                    var ids = _.pluck(category.path, 'category_id');
                    ids.unshift(category.category_id);
                    var n = _.pluck(category.path, 'name').reverse();
                    n.push(category.name);
                    cb(n.join('>>'), ids);
                });
            };
            var equalStates = function(a,b) {
                var keys = _.without(_.keys(a).concat(_.keys(b)), 'category_path');
                var eq = true;
                _.each(keys, function(k) {
                    if(!(a[k] === b[k] || (!a[k] && !b[k]))) {
                        eq = false;
                    }
                });
                return eq;
            }
            var previousState = {};
            var fabloFromUrl = function() {
                var params = core.getCurrentParameters();
                if(params.stn == 'searchResults') {
                    $('#page_content').empty();
                } else {
                    // Don't clear resultPanes in order to allow auto-scrolling when navigating back
                    // Fablo.resultPanes.clear();
                }
                $('#fablo_content').toggle(params.stn == 'searchResults');
                
				var translateSortFromObject = function(obj) {
					var p = Object.keys(obj)[0];
					switch (p) {
						case "full_name":
						case "full_name_ord": return (obj[p]=="a"?"+":"-")+";name";
						case "price_gross": return (obj[p]=="a"?"+":"-")+";price";
						case "priority": return (obj[p]=="a"?"+":"-")+"priority";
						case "price_per_unit": return (obj[p]=="a"?"+":"-")+"unit_price";
						default: return "";
					}
				}

                if(params.stn == 'searchResults') {
                    var filters = params.filters || '';
                    if (params.brand_name)
                        filters += (filters ? '&&' : '') + '_brand_name='+params.brand_name;
                    var state = {
                        query: params.q,
                        category: params.cat,
                        category_id: params.c,
                        filters: filters,
                        activeCategory: params.acat,
                        group: groupingFns[params.group],
                        sort: (params.sort && (typeof (params.sort) == "object" ? translateSortFromObject(params.sort) : params.sort.replace(';', '#')) )  // "#price" can not be passed to url
                    }
                    loadBrand(state);
                    toggleOffset(state.category, state.brand);
                    globalFilters.sort.set({sort: state.sort || null}, {silent: true});
                    globalFilters._brand_name.set({filter_string: ''}, {silent: true});
                    if(params.t) {
                        state.filters = "tag_ids=" + _.values(params.t).join('||')
                    }
                    Fablo.resultPanes.paneOptions.separatePurchased = !state.query && loggedUserId;

                    setProductsPresentation(params.big_images ? 1 : 0);

                    var setFabloState = function() {
                        var realPrevious = previousState;
                        if (equalStates(state, realPrevious)) {
                            return;
                        }
                        previousState = state;
                        if(params.c) {
                            categoryIdToFullNameAndPath(params.c, function(n, path) {
                                if(!params.cat || n != state.category) {
                                    state.category = n;
                                    previousState = state;
                                    toggleOffset(state.category, state.brand);
                                    //Fablo.resultPanes.setNewState({});
                                }
                                state.category_path = path;
                                if (equalStates(state, realPrevious)) {
                                    return;
                                }
                                Fablo.resultPanes.setNewState(state);
                            });
                        }
                        else
                            Fablo.resultPanes.setNewState(state);
                    };

                    frisco.friscoVanAvailable(function(available) {
                        globalFilters.is_van_only.set_attribute_filter(available ? '' : 'is_van_only=0');
                        setFabloState();
                    });
                }
            }
            fabloFromUrl();
            $(window).bind('statechange', function() {
                try { fabloFromUrl(); } catch (e) {}
            });
            Fablo.resultPanes.state.bind('change', function() {
                var state = Fablo.resultPanes.state.attributes;
                if(!equalStates(state, previousState) && (state.query || state.category)) {
                    var filters = Fablo.extract_filter_string_for_url(state.filters || '', globalFilters);
                    // pass undefined instead of empty string to prevet params with empty value
                    params = {
                        c: state.category_id || undefined,
                        q: state.query || undefined,
                        cat: (state.category && helpers.clearCategory(state.category)) || undefined,
                        filters: filters || undefined,
                        acat: state.activeCategory || undefined,
                        sort: (state.sort && state.sort.replace('#',';')) || undefined
                    };
                    var customGAPageview =  previousState.query != state.query;
                    if (_gaq && customGAPageview)
                        _gaq.push(['_trackPageview', window.location.pathname + '?q=' + params.q]);
                    if (customGAPageview && window.__insp && __insp.push)
                        _.delay(function(){
                            __insp.push(["virtualPage", {url: core.getUrl('searchResults', null, params)}]);
                        }, 1000);
                    previousState = state;
                    core.setState('searchResults', null, params, state.query, customGAPageview, true); 
                    // kroszak@29.08.2013: restored, seems to break search input on main page
                }
            });
        }
        setFabloRoutes();

        var tooglePurchased = function() {
            if(!$("#bought_products").length) {
                $('#fablo_products .purchased-products-pane').wrap('<div id="bought_products"/>');
                $("#bought_products").prepend('<h4 class="part_header">' +  __("Kupione wcześniej") + '</h4>');
            }
            if(!$("#other_products").length) {
                $('#fablo_products .all-products-pane').wrap('<div id="other_products"/>');
                $("#other_products").prepend('<h4 class="part_header">' +  __("Pozostałe produkty") + '</h4>');
            }

            var purchased = ((Fablo.resultPanes.currentlyShowing && Fablo.resultPanes.currentlyShowing.get('purchasedProducts')) || []).length;
            $("#bought_products").toggle(!!purchased);
            $("#other_products").toggleClass("active", !!purchased);
        }
        
        var toggleCategoryBanner = function() {
			var state = Fablo.resultPanes.state.attributes;
			var p = core.getCurrentParameters();
            if (state.category || p.cat || p.c )
				frisco.addCategoryBanner(p.c);
        }

        var hideRepeatedPopulars = function() {
            var to_hide = $();
            var normal = $("#other_products .productId");
            $("#popular_products .productId").each(function(){
                var id = $(this).attr('product_id');
                to_hide = to_hide.add(normal.filter('[product_id="' + id + '"]'));
            });
            if (to_hide.remove().length)
                toggleBanners();
        };
        
        var togglePopular = function() {
            var cat = Fablo.resultPanes.state.attributes.category;
            var acat = Fablo.resultPanes.state.attributes.activeCategory;
            var brand = Fablo.resultPanes.state.attributes.brand;
            
            var create_dom = function(title) {
                $('#fablo_products #other_products').parent().prepend($('<div id="popular_products"><h4 class="part_header">' + title + '</h4><ul class="products"></ul></div>').hide());
            };
            
            var load = function() {
                // Count how many product will fit
                var productSize = $(".productId:visible").outerWidth(true) || 165;
                var count = Math.floor(($("#fablo_products").width()-2) / productSize);
                FabloConfig.showPopular($("#popular_products"), acat || cat, count, brand, function(){
                    // If there is fewer products than 12, don't show popular.
                    if ((!Fablo.resultPanes.currentlyShowing || Fablo.resultPanes.currentlyShowing.attributes.resultCount > 12)
                            && brand == Fablo.resultPanes.state.attributes.brand) { // check if brand wasn't deactivated in the meantime.
                        $("#popular_products .productId").after(document.createTextNode(' '));
                        $("#popular_products").show();
                        hideRepeatedPopulars();
                    }
                });
            };
            
            if (!loggedUserId && (cat || acat) && !Fablo.resultPanes.state.attributes.filters) {
                if ($("#popular_products").length) {
                    if(!Fablo.resultPanes.currentlyShowing || Fablo.resultPanes.currentlyShowing.attributes.resultCount > 12) {
                        $("#popular_products").show();
                        hideRepeatedPopulars();
                    }
                    return;
                }
                create_dom(__("Najpopularniejsze produkty w tej kategorii"));
                load();
            }
            else if (brand) {
                if ($("#popular_products").length) {
                    if ($("#popular_products").data("brand") == brand) {
                        if(!Fablo.resultPanes.currentlyShowing || Fablo.resultPanes.currentlyShowing.attributes.resultCount > 12) {
                            $("#popular_products").show();
                            hideRepeatedPopulars();
                        }
                        return;
                    }
                    $("#popular_products").hide().find(".products").empty();
                }
                else
                    create_dom(__("Najpopularniejsze produkty"));
                $("#popular_products").data("brand", brand);
                load();
            }
            else {
                $('#popular_products').hide();
            }
        }
        
        var addGroupSeparators = function() {
            var prev = null;
            var query = $(".group:last ~ .productId");
            if (!query.length) {
                prev = true;
                query = $("#fablo_products #other_products .productId");
            }
            query.each(function(i, e){
                var cur = $(e).data("group");
                if (prev !== cur && prev) {
                    var el = $(e);
                    var html = '<div class="contentHeader home group"><div><div class="title"><h3>' + cur + '</h3></div><span class="decorationLine"></span></div></div>';
                    if (prev !== true)
                        html = new Array(12).join(' <div class="elem-placeholder2"></div> ') + html;
                    el.before(html);
                }
                prev = cur;
            });
        };
        
        Fablo.resultPanes.bind('products-rendered', function() {
            if (Fablo.resultPanes.state.attributes.group)
                _.defer(addGroupSeparators);
            else
                _.defer(toggleBanners);
        });
        
        Fablo.resultPanes.bind('results-received', function(res) {
            _.defer(tooglePurchased);
            _.defer(togglePopular);
            _.delay(function(){trackProducts(res, loggedUserId)}, 1000);
            if(res.products.results.length == 0) {
                Fablo.resultPanes.state.set({query: $('#searchPhrase').val()});
            }
            FabloConfig.updateCartInfo();
            toggleCategoryBanner();
        });
        
        Fablo.resultPanes.state.bind('change', function() {
            var state = Fablo.resultPanes.state.attributes;
            $('#fablo_content .list-filter .expand-text-box').remove();

            var title;
            if(!state.category && state.query) {
                title = __('Wyniki wyszukiwania dla') + ' "' + state.query + '"';
                document.title = "Supermarket online Frisco.pl";
                $("#contentHeader .title h1").text(title);
                frisco.setMetaDescription("Zakupy spożywcze przez Internet - Frisco.pl: Największe delikatesy internetowe zapraszają na zakupy online.")
                $("#contentHeader .breadcrumbs").html("<ol/>");
                $("#contentHeader .breadcrumbs ol").html('<li><a href="/">Strona główna</a><span class="icon"></span></li>');
            }
            if (state.category_id) {
                trackCategory(state.category, loggedUserId);
                CategoryDescriptions.get(state.category_id + '_' + lang.getCurrentLang(), function(seoDescription){
                    if (seoDescription.short) {
                        $('#fablo_content .list-filter .expand-text-box').remove();
                        $('#fablo_content .list-filter').jqoteapp(frisco.getTemplate('category_descriptions'), seoDescription);
                        $('#fablo_content .expand-text-box a.toggle').click(function(){
                            $('.expand-text-box .text').toggleClass('active');
                            return false;
                        });
                    }
                });
            }
            if (state.brand) {
                _.defer(togglePopular);
            }
            if(!state.category && !state.query) {
                if (core.getCurrentParameters().cn)
                    document.title = core.getCurrentParameters().cn + " - Supermarket online Frisco.pl";
                title = core.getCurrentParameters().cn || ''
                $("#contentHeader .title h1").text(title);
                $("#contentHeader .breadcrumbs").html("<ol/>");
                $("#contentHeader .breadcrumbs ol").html('<li><a href="/">Strona główna</a><span class="icon"></span></li>');
            }
            if(!title && state.filters && state.filters.match('_brand_name')) {
                title = (state.filters.match('_brand_name=([^&|]+)') || [])[1];
                $("#contentHeader .title h1").text(title);
            }

            $('#sort-attrs .sort-list li:eq(0)').toggle(!!state.query); // show accuracy sort only on search results page
            sorter.setDefaultAttribute(state.query ? '_accuracy_' : 'priority');

            if(Fablo.resultPanes.currentlyShowing) {
                var count = Fablo.resultPanes.currentlyShowing.attributes.resultCount;
                if (count != Fablo.resultPanes.currentlyShowing.unfilteredNum) {
                    count += " z " + Fablo.resultPanes.currentlyShowing.unfilteredNum;
                }
                _.defer(tooglePurchased);
            }
        });

        var nq = Fablo.resultPanes.constructor.prototype.newQuery;
        Fablo.resultPanes.constructor.prototype.newQuery = function(query) {
            if(query.query.length < 2) return;
            // reset prefilters on new query
            _.each(globalFilters, function(v, k) {
                if(k.match(/^_/)) v.set_attribute_filter('');
            })
            Fablo.resultPanes.paneOptions.separatePurchased = false;
            setProductsPresentation(0);
            nq.call(Fablo.resultPanes, query);
        };

        Fablitics.init({account: "frisco.pl"});
        if(loggedUserId) Fablitics.visitor({id: loggedUserId});
        Fablitics.track("page-view");
        $(window).bind('statechange', function() { Fablitics.track("page-view"); });
    });
};

var callWithVanCheck = function(fn, default_filter) {
    if (typeof(default_filter) === "undefined")
        default_filter = 'status=0&&acc'+FabloConfig.userGroup+'=1';
    frisco.friscoVanAvailable(function(available) {
        fn(available ? default_filter : default_filter + '&&is_van_only=0');
    });
}

FabloConfig.showRecommendations = function(pid, container, category, count, image_filter, callback) {
    if (typeof(count) == 'undefined') count = 6;
    var fn = function(filter) {
        Fablo.recommendations.forProduct({
            product: pid,
            container: container.find('ul'),
            productTemplate: productRenderer(),
            results: count,
            attributes: filter + (image_filter ? "&&has_image=1" : ""),
            category: category,
            productHeight: false,
            productWidth: false,
            onNoRecommendations: function() { container.hide(); },
            onProductsRendered: callback
        });
    };
    callWithVanCheck(fn);
};

// This don't hide container on no result, and container should be "direct", not wrapper
FabloConfig.showRecentlyVisited = function(user, container, remove, category, count, image_filter, callback) {
    if (typeof(count) == 'undefined') count = 20;
    var fn = function(filter) {
        Fablo.recommendations.recentlyVisited({
            user: user,
            removeProducts: remove,
            container: container,
            productTemplate: productRenderer(),
            results: count,
            attributes: filter + (image_filter ? "&&has_image=1" : ""),
            category: category,
            productHeight: false,
            productWidth: false,
            onProductsRendered: callback
        });
    };
    callWithVanCheck(fn);
};

// This don't hide container on no result, and container should be "direct", not wrapper
FabloConfig.showRecentlyPurchased = function(user, container, visits, remove, category, count, callback) {
    var fn = function(filter) {
        Fablo.recommendations.recentlyPurchased({
            user: user,
            visits: visits || 10,
            removeProducts: remove,
            container: container,
            productTemplate: productRenderer(),
            results: count,
            attributes: filter,
            category: category,
            productHeight: false,
            productWidth: false,
            onProductsRendered: callback
        });
    };
    callWithVanCheck(fn);
};

FabloConfig.showPopular = function(container, category, count, brand, callback, template) {
    if (typeof(count) == 'undefined') count = 6;
    var fn = function(filter) {
        Fablo.recommendations.popular({
            container: container.find('ul'),
            productTemplate: productRenderer(null, template),
            results: count,
            attributes: filter + (brand ? ("&&brand_name=" + brand) : ""),
            category: category,
            productHeight: false,
            productWidth: false,
            onNoRecommendations: function() { container.hide(); },
            onProductsRendered: callback
        });
    };
    callWithVanCheck(fn);
};

})();

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/bounce.js */
/**
 * Bounce module
 * 
 * Its purpose is to perform some action when user is leaving the site and defined conditions are met.
 * "leaving the site" = user moves mouse up outside the browser stage as if he wants to close tab or browser window
 * 
 * @author jacek@fablo.eu
 */

var Bounce = (function(){
    var enabled = null;
    var counter = null;
    var condition = function(){ return true; };
    var action = function(){};
    
    return {
        // enable is weak
        enable: function() {
            if (enabled = enabled !== false)
                this.startTracking();
        },
        // disable is strong
        disable: function() {
            enabled = false;
            if (counter)
                clearTimeout(counter);
            this.stopTracking();
        },
        
        setCondition: function(cond) {
            condition = cond;
        },
        setAction: function(a) {
            action = a;
        },
        count: function(seconds) {
            setTimeout($.proxy(this.enable, this), seconds * 1000);
        },
        
        startTracking: function() {
            var self = this;
            $(window).on("mouseleave.bounce", function(e){
                e = e ? e : window.event;
                if (e.clientY < 5 && condition()) {
                    self.stopTracking();
                    action();
                }
            });
        },
        stopTracking: function() {
            $(window).off("mouseleave.bounce");
        }
    };
})();

/* /var/lib/jenkins/jobs/deploy-NEW-frisco-frontend/workspace/src/js/frisco.js */
var DEBUG_EXCLUDED_TAGS = ['FRISCO_STORAGE', 'EVENT_SYSTEM', 'CHECKOUT_SLIDERS', 'NEAREST_DELIVERY', 'REFRESHING_ROUTINES', 'SIDEBAR'];
var DEBUG = true;
var CLICKING_DELAY = 200;
var FB_APP_ID = CONFIG.DEV ? "247756428628280" : "409041405899358";
 
var FRISCO = {
	PRODUCT_STATUS_AVAILABLE   : 0,
	PRODUCT_STATUS_DELETED     : 1,
	PRODUCT_STATUS_UPDATED     : 2,
	PRODUCT_STATUS_UNAVAILABLE : 3,
	PRODUCT_STATUS_WITHDRAWN   : 4,

	ORDER_STATUS_CANCELLED     : 30,

	DELIVERY_TYPE_VAN          : 1,
	DELIVERY_TYPE_COURIER      : 2,
	DELIVERY_TYPE_POU          : 4,
	
	WINDOW_OPEN                : 1,
	WINDOW_CLOSED              : 5,

	DEVICE_PIXEL_RATIO         : 1
};

var catalog = null;

Sidebar.init();

showLoginLightBox = function() {
	$.colorbox({html : $('div.contentHome > div.loginPanel').clone() });
	$('#cboxLoadedContent a.register').bind("click", function() { $.colorbox.close(); });
};

isClaimBonusLP = function(state) {
    return state === 'tdLandingPage' || state === 'tdFBLandingPage' || state === 'mobile-kupon' || state === 'promo-lp' || state === 'promo-lp-v2' || state === 'partner' || (state && state.match(/^(promo-lp-ab[012]|^odbierz-bon-[ow][1-6])$/));
};

DeliveryCheckup.init();

/**
 * Frisco application
 */
var Frisco = function() {

	/* DO NOT EDIT HERE */
	var apiUsers = FriscoApiManager.getUsersApiClient();
	var apiReservations = FriscoApiManager.getReservationsApiClient();
	var api = FriscoApiManager.getShopApiClient();
	var apiFablo = FriscoApiManager.getFabloApiClient();
	var friscoClient = new FriscoFrontendClient();
	DeliveryCheckup.setApi(api);
	/* PLS !*/
	lang.bindApi(api);
	var sidebarStatusHidden = false;

	// lately bought products
	var latelyBoughtProducts = null;

	var CART_SLIDER_STATUS_CLOSED = 0;
	var CART_SLIDER_STATUS_OPENED = 1;

	var DATE_PICKER_SLIDER_STATUS_CLOSED = 0;
	var DATE_PICKER_SLIDER_STATUS_OPENED = 1;

	var datePickerStatus = DATE_PICKER_SLIDER_STATUS_CLOSED;
	var checkoutCalendarStatus = DATE_PICKER_SLIDER_STATUS_CLOSED;

	var PRODUCST_PAGE_SIZE = 20;

	var cartSliderStatus =  CART_SLIDER_STATUS_CLOSED;
	var templates = {};

	// SESSION DATA
	var loggedUserId = session ? session.user_id : null;
	var shopId = 0;
	var lastRecheckUserReservationTimeout = null;
	// var catalog = null;
	var cms = CMS(api);

	var REGISTRATION_ADDRESS = 'REG_ADDR';

	// status routine stuff
	var STATUS_REQUEST_FLAG  = null;
	var STATUS_TIMER_HANDLER = null;
	var STATUS_TIMER_CYCLE   = 600 * 1000; // 10 min
	var STATUS_TIMER_GUARD_CYCLE = 300 * 1000; // 5 min

	var ONLINE_CHECK_TIMER_HANDLER = null;
	var ONLINE_CHECK_TIMER_CYCLE =  60 * 1000;
	
	/* Load minimal value for order for the current user */
	var minimalOrderValue = 5000; // hardcoded default minimal value ?

	/* Initialize savingplans object */
	var savingplans = new Savingplans(api, loggedUserId); // savingplans handling is now initialized, everything is in place, no need to do more

	var lastStateChangeDate = 0;
	
	// Google Tag Manager for SALESMORE
	var tagEventSentInThisState = false; // indicate whether state function has send any gtm event.
	var sendGTMEvent = function(gtmdata) {
		smdataLayer.push(gtmdata);
		tagEventSentInThisState = true;
	};
	
	var tradedoubler = new Tradedoubler();
	var salesmore    = new Salesmore();

	var lpBannerDisplayed = false;

	var dontForgetTreshold = null, dontForgetCounter = 0;
	
	// sticky header info - cached, 39 is layout's default value
	var headerStartY = 39;
	
	var postCodeVanCache = {};
    
// 	var octoberContestActive = function() { return new Date().getTime() < CONFIG.OCT_CON_END; };
	var octoberContestActive = function() { return false; };
	
	var pampersMonthProductIds = [84617, 84615, 88131, 88133, 88129, 84607, 88123, 88127, 88125];

	var initPBTrackingPixel = function() {
		var _fbq = window._fbq || (window._fbq = []);
		if (!_fbq.loaded) {
			var fbds = document.createElement('script');
			fbds.async = true;
			fbds.src = '//connect.facebook.net/en_US/fbds.js';
			var s = document.getElementsByTagName('script')[0];
			s.parentNode.insertBefore(fbds, s);
			_fbq.loaded = true;
		}
	}

	var checkoutUpdateTotalValue = function() {
		var state = core.getCurrentState();
		if (state == 'cart' || state == 'orderCart' || state == 'checkout') {
			var cartData = friscoStorage.getShallow('cartData');
			var deliveryPrices = friscoStorage.getShallow('deliveryPrices');
			if (cartData == null) return;
			var curDeliveryCost  = parseInt( friscoStorage.getShallow('orderDeliveryPrice') ) || 0;
			var curBalanceValue  = parseInt( friscoStorage.getShallow('userBalance') )||0;
			var curCartValue     = parseInt( cartData ? cartData.price_gross : 0 )||0;
			var realPaymentValue = 0;
				
			if (curBalanceValue >= (curDeliveryCost+curCartValue))
				realPaymentValue = 0;
			else if (curBalanceValue < (curDeliveryCost+curCartValue))
				realPaymentValue = Math.abs(curBalanceValue-curDeliveryCost-curCartValue);
			else
				realPaymentValue = curDeliveryCost+curCartValue;
			
			$("div.cart.details ul.head.deliveryTime li.subtotal span.price").html(cartData.human_price_gross);
			$("div.cart.details ul.head.deliveryTime li.subtotal span.amount").html(cartData.entries.length);
			$("div.cart.details ul.head.deliveryTime li.deliveryCost span.price").html(deliveryPrices.min || cartData.human_delivery_price);
			$('.deliveryTime .totalvalue .price:not(.protected)').html( friscoHelpers.priceFormat ( realPaymentValue ) );
			$('.subtotal p.price:not(.protected)').html(friscoHelpers.parsePrice(cartData.human_price_gross, {currency: true}));
			
			var table = $('.checkboxContent #orderContent tbody');
			if (table.length) {
				table.find(".summaryCart").text(cartData.human_price_gross);
				table.find(".summaryDelivery").text(friscoHelpers.priceFormat(curDeliveryCost));
				table.find(".summaryTotal").text(friscoHelpers.priceFormat(curDeliveryCost + curCartValue));
			}
		} else if (state == 'checkoutFinal') {
			var cartData = friscoStorage.getShallow('cartData');
			if (cartData == null) return;
			$('.subtotal p.price:not(.protected)').html(friscoHelpers.parsePrice(cartData.human_price_gross, {currency: true}));
		}
	}; // var checkoutUpdateTotalValue = function()

	var checkIfAddressAlreadyExists = function(adata) {
		var deliveryAddresses = friscoStorage.get('deliveryAddresses');
		var mainAddress = null;
		if (deliveryAddresses && deliveryAddresses.length) {
			for (var i = 0, l = deliveryAddresses.length; i < l; i++) {
				if ( (deliveryAddresses[i].city == adata.city ) &&
					(deliveryAddresses[i].postcode == adata.postcode.replace('-', ''))&&
					(deliveryAddresses[i].street == adata.street) &&
					(deliveryAddresses[i].street_no == adata.street_no) &&
					(deliveryAddresses[i].flat_no == adata.flat_no)
					)
						return true;
			}
		}
		return false;
	} // var checkIfAddressAlreadyExists = function(adata)

	var loadMinimalOrderValue = function(event) {
		if (event)
			address_no = event.eventData;
		else
			address_no = null;
			
		friscoStorage.setShallow("minimalOrderValue", minimalOrderValue);
		var addressNo = null;
		
		if (loggedUserId) {
			if (!address_no) {
				/* Try first to get it from profile */
				var curUserProfile = friscoStorage.get('userProfile');
				if (curUserProfile && curUserProfile.delivery_address_no) 
					addressNo = address_no = curUserProfile.delivery_address_no;
			}
		
			if (!address_no) {
				var deliveryAddresses = friscoStorage.get('deliveryAddresses');
				var mainAddress = null;
				if (deliveryAddresses && deliveryAddresses.length) {
					for (var i = 0, l = deliveryAddresses.length; i < l; i++) {
						if (deliveryAddresses[i].is_main) {
							mainAddress = deliveryAddresses[i];
							addressNo = mainAddress.address_no;
						}
					}
				}
			} else 
				addressNo = address_no;
		
			if (!addressNo)
				addressNo = 1; // not existent - for user's that does not have any address yet
		
			// update delivery price ..
			if (addressNo) {
				api.getMinimalOrderValueForUser(loggedUserId, addressNo, function(price) {
/*
					if (price === null || price === undefined) {
						Popup.loadMessage({ messageId: Popup.MESSAGES.MIMIMUM_ORDER_VAL_GETTER_ERROR, timeout: Popup.TIMEOUT.NORMAL });
						return;
					}
*/
					minimalOrderValue = price;
					friscoStorage.setShallow("minimalOrderValue", minimalOrderValue);
				});
			} // if (addressNo)
		} // if (loggedUserId)
	}; // var loadMinimalOrderValue = function()
	
	var updateHomeDeliveryOrderBox = function(params) {
		var curLastOrder = undefined;
		/* Show edit & delete[cancel] option for orders on main page */
		if (!params || params.force == false)
			curLastOrder = friscoStorage.getShallow('lastOrder');
		
		if (curLastOrder == undefined) {
			curLastOrder = api.getLastEditableOrder(session.user_id , null, true);
			friscoStorage.set('lastOrder', curLastOrder);
		}
		
		if (curLastOrder)
			$('#homeTermOfDelivery').show().jqotesub(templates.home_left_deliveryorder, { lastOrder: curLastOrder });
		
		var cartData = friscoStorage.getShallow("cartData");
// 		if (cartData && cartData.order_id) {
// 			return; // dont render reservation chooser box
// 		}
		
		var deliveryTypes = friscoStorage.getShallow('deliveryMethod');
		if (!frisco.currentPostcode) {
// 			$("#homeTermOfDelivery").show();
// 		} else {
			$("#homeTermOfDelivery").hide();
		}
	
		if (!!frisco.currentPostcode && (!deliveryTypes || deliveryTypes.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_VAN)) {
			var curNearestWindow = (params && params.eventObj && params.eventObj.sender == "nearestWindowGuard" && params.eventData != null) ? params.eventData : friscoStorage.get("nearestWindow"); 
			var curDeliveryDate = friscoStorage.get("deliveryDate"); 
			// we should find some way around a problem caousing TypeError at loading getFresh('windowList) when currentWindow == undefined,
			// for now just don't render the template (it's ok, refresher does this later anyway)
			
			if (curNearestWindow !== undefined && curNearestWindow !== null) {
				curNearestWindow = curNearestWindow.window_id;
				$('#homeTermOfReservation').show().jqotesub(templates.home_left_reservation, { curNearestWindow: curNearestWindow, curDeliveryDate: curDeliveryDate });
			}
		}
	}; // var updateHomeDeliveryOrderBox = function()
	
	var updateHomeSavingplansBox = function(activePlan) {
		var _bindSavingplansBoxButtons = function() {
			$("div#savingPlansCompact a.change").bind("click", function() {
				if ($("div.programsContent.active").length) {
					$("div.loggedUserPanel").removeClass("withPlans");
					$(".homepage #navigation .level-1").attr({'style' : null}); // this hides the menu or not - depending on media queries in css, rather than force-show overriding those
	// 				$('body').addClass('homepage');
					
					$("div.showOtherPrograms.active").removeClass("active");
					$("div.programsContent.active").removeClass("active");
					
					var userProfile = friscoStorage.getShallow("userProfile");
					if (userProfile.savingplan_type == null)
						$("div#savingPlansCompact a.change").html(__("Wybierz"));
					else
						$("div#savingPlansCompact a.change").html(__("Zmień"));
					$("div#savingPlansCompact a.change").removeClass("active");
				} else {
					$(".homepage #navigation .level-1").hide();
					
					$("div.loggedUserPanel").addClass("withPlans");
					$('#savingPlansPlaceHolder').show();
					
					$("div.showOtherPrograms").addClass("active");
					$("div.programsContent").addClass("active");
					
					$("div#savingPlansCompact a.change").html("<span>► </span>" + __("Zwiń"));
					$("div#savingPlansCompact a.change").addClass("active");
				}
			});
			
			$("a#loadNutriciaRegulations").bind("click", function() {
				loadNutriciaRegulation(null, null, {loadOnLayer : true});
			});
		};
		
		if (activePlan) {
			$('#savingPlansCompact').jqotesub(templates.savingplans_compact, { 'plan' : activePlan });
			$('#savingPlansPlaceHolder').jqotesub(templates.savingplans, { 'plan' : activePlan });
			_bindSavingplansBoxButtons();
		} else {
			$('#savingPlansCompact').hide();
		}
		
		if (!loggedUserId) {
			// TODO: check if this is still needed
			$("ul.homeBoxes > li.savingPrograms").bind("click", function() { 
				var content = $("div.programsContent").clone();
				content.addClass("active").removeClass("notChosen");
				$.colorbox({html : content  });
				$("#cboxLoadedContent div.programsContent").wrap("<div></div>");
			});
			
			$("ul.homeBoxes > li.friscoFresh").bind("click", function() {
				showFriscoFreshLightbox();
				var content = $("div.friscoFreshContent").clone();
				content.addClass("active").removeClass("hidden");
				$.colorbox({html : content  });
				$("#cboxLoadedContent div.friscoFreshContent").wrap("<div></div>");
			});
		} else {
			$("div.programsContent.notChosen li > div").bind("click", function() { 
				$("div.programsContent.notChosen").addClass("active").removeClass("notChosen");
				
				$("div#savingPlansCompact a.change").html("<span>► </span>" + __("Zwiń"));
				$("div#savingPlansCompact a.change").addClass("active");
			});
		}
		
		var programsChangedCbk = function() {
			$("div.loggedUserPanel").removeClass("withPlans");
			$(".homepage #navigation .level-1").attr({'style' : null}); // this hides the menu or not - depending on media queries in css, rather than force-show overriding those
			
			$("div.showOtherPrograms.active").removeClass("active");
			$("div.programsContent.active").removeClass("active");
			
			var newPlan = friscoStorage.get('savingPlan');
			$('#savingPlansCompact').jqotesub(templates.savingplans_compact, { 'plan' : newPlan });
			_bindSavingplansBoxButtons();
		};
		friscoEvents.hook('savingPlanChanged', friscoEvents.FEV_SAVINGPLAN_CHANGED, programsChangedCbk);
	};
	
	var bannerTimeOver = null;
	var homeBannersChanger = function() {
		var openedBanner = -1; // if li.index is 0-based, then so be it
		var count = $('#main-banner .banners li').length;

		var spinnerImage = new Image();
		spinnerImage.src = '/img/home-banners/zegar_10s.gif';

		var openMainBanner = function(nr) {
			if (typeof nr === 'undefined') { nr = openedBanner+1; }
			if (nr != openedBanner) {
				try { clearTimeout(bannerTimeOver); } catch (e) {}
				count = $('#main-banner .banners li').length;
				if (count) {
					if (nr >= count) { nr=0; }

//					var spinnerImage = new Image();
// // 					spinnerImage.src = '/img/home-banners/zegar_10s.gif';

					$('#main-banner .banners li a.img').fadeOut();
					$('#main-banner .banners li:eq('+nr+') a.img').fadeIn();
					var title = $('#main-banner .banners li:eq('+nr+') a.title')[0];
					if(title) {
						title.style.backgroundImage='';
						title.style.backgroundImage='url('+spinnerImage.src+'?'+Math.round(1000*Math.random())+')';
					}
					$('#main-banner .banners li.selected').removeClass('selected');
					$('#main-banner .banners li:eq('+nr+')').addClass('selected');

					$('#main-banner .index li:eq('+nr+') a')[0].style.backgroundImage='';
					$('#main-banner .index li:eq('+nr+') a')[0].style.backgroundImage='url('+spinnerImage.src+'?'+Math.round(1000*Math.random())+')';
					$('#main-banner .index li.selected').removeClass('selected');
					$('#main-banner .index li:eq('+nr+')').addClass('selected');

					openedBanner = nr;
					if (count > 1)
						bannerTimeOver = setTimeout(openMainBanner, 10000);
				}
			}
		};

		if (count >= 1) {
			try { clearTimeout(bannerTimeOver); } catch (e) {}
			$('#main-banner').append('<ul class="index"></ul>');
			for (var a=0; a<count; a++) {
				$('#main-banner .index').append('<li><a href="#">'+(a+1)+'</a></li>');
			}

			$('#main-banner .index li a').click(function(){
				openMainBanner($(this).parent().index());
				return false;
			});
			$('#main-banner .banners li a.title').not(".link").click(function(){
				openMainBanner($(this).parent().index());
				return false;
			});
			openMainBanner();
		}
	};
	
	var actionCheckPostcode = function(old, n) {
		if (!core.getCurrentState() || core.getCurrentState() == 'defaultState')
			frisco.friscoVanAvailable(function(wasAvailable){
				frisco.friscoVanAvailable(function(isAvailable){
					if (wasAvailable != isAvailable)
						loadDefaultState(null, {actionSpecial: isAvailable});
				}, n);
			}, old);
	};

	/**
	* dummy default state
	*/
	var loadDefaultState = function (prevState, parameters) {
		if (catalog) { catalog.disable(); }
		SlotManager.clearSlots();
		var renderContent = session.backend_rendered ? false : true;

// 		$("#rightNavigation").html("");
		$("body").addClass("homepage");

		if (loggedUserId) {
			var profile = friscoStorage.get('userProfile');
			
			var homePageParams = { userProfile : profile };
			
			if (renderContent) {
				$('#page_content').jqotesub(templates.home_content_logged, homePageParams);
			}
			
			$('body').addClass('forUser');
			$("div.loggedUserPanel div.inner .head strong").html(profile.name);
			$("div.loggedUserPanel div.inner .head").show();

			frisco.setUsersPostcode(); // moved here so that postcode info is avaliable for methods below
			
			if (profile) {
// 				var params = {};
// 				params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_SYNC;
// 				params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function(plan) {
// 				};
				var plan = friscoStorage.get('savingPlan');
				if (plan != null) {
					plan.id = profile.savingplan_id;
					plan.type = profile.savingplan_type;
				} else if (profile.savingplan_type == 14) {
					plan = { id: null, type: 14 };
				}
				updateHomeSavingplansBox(plan);
				updateHomeDeliveryOrderBox();
			}
			
			$("a[id*=homeShowOrder_]").die('live').live('click', function() {
				var curOrderId = $(this).attr('id').split('_')[1];
				var curOrderYear = $(this).attr('id').split('_')[2];
				core.setState('orderCart', null, {orderId: curOrderId, year: curOrderYear});
			});
				
			$("a[id*=homeEditOrder_]").die('click').live('click',function() {
				var curOrderId = $(this).attr('id').split('_')[1];
				var curOrderYear = $(this).attr('id').split('_')[2];
				core.setState('order', null, {orderId: curOrderId, year: curOrderYear});
			});
			
			$("a[id*=homeCancelOrder_]").die('click').live('click',function() {
				var curOrderId = $(this).attr('id').split('_')[1];
				var curOrderYear = $(this).attr('id').split('_')[2];
				// cancel order and reload default state
				var callbacks = {
					"#popupYes" : function() {
						api.updateOrderStatus(loggedUserId, curOrderId, curOrderYear, FRISCO.ORDER_STATUS_CANCELLED, function(data) {
							if (!data) {
								Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_CANCEL_ERROR, timeout: Popup.TIMEOUT.NORMAL });
							} else {
								friscoEvents.fire('homeCancelOrder', friscoEvents.FEV_ORDER_STATUS_CHANGED, {orderId: curOrderId, orderYear: curOrderYear, orderStatus: FRISCO.ORDER_STATUS_CANCELLED});
								friscoStorage.getFresh('userProfile');
								friscoStorage.getFresh('savingPlan');
								friscoStorage.set('lastOrder', null);
								friscoStorage.set('orderList', undefined);
								/* If there is cart in edit mode, cancel edit mode */
								pub.getBalance();
								
								var cartData = friscoStorage.get('cartData');
								// if cart bound to order, and the order is the one that we've just cancelled then cancel edit mode
								if (cartData && cartData.order_id && cartData.order_id == curOrderId && cartData.order_year && cartData.order_year == curOrderYear ) {
									leaveOrderEditionMode({ noRedirect:true, silent:false });
								}
								
								// SalesManago Delete Sale
// 								setTimeout(function() {
// 							        var curProfile = friscoStorage.getShallow('userProfile');
// 							        if (curProfile.salesManagoContactId && curProfile.salesManagoContactId != null) {
// 	    								api.smCancelSale(loggedUserId, curOrderYear, curOrderId, function() {});
// 									}
// 								}, 3000);
								
								Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_CANCELLED, timeout: Popup.TIMEOUT.NORMAL });
								loadDefaultState();
							}
						});
						Popup.hide();
					},
					"#popupNo" : function() { 
						Popup.hide();
					},
				};
				Popup.loadMessage({ messageId: Popup.MESSAGES.CANCEL_ORDER, callbacks: callbacks });
			});
		} else { /* Not logged user */ 
			// uncomment if a switch to template rendering of login panel is required
			// $('form#loginBox>div').jqotesub(templates.loginbox_content, {});
			
			if (prevState) {
				$('#page_content').jqotesub(templates.home_content, {});
			}
		}
		
		$('#tesco-popup .close a').click(function(){ $('#tesco-popup').hide(); return false; });
		$("#tesco-popup .scroll").click(function() { return false; });
		$('#tesco-lista .list a.show-popup').click(function(){
			$('#tesco-popup').show();
			$(document).one('click', function(){
				$('#tesco-popup').hide();
			})
			return false;
		});
		
		// load promo products configuration
		var promoCbk = function(data) {
			if (data && data.length) {
				if (renderContent) {
					SlotManager.registerSlot("ul#productsPromoted", data);
				} else {
					SlotManager.registerSlot("ul#productsPromoted", data, null, { offset : 2 });
					$("#page_content").jqoteapp(frisco.getTemplate('footer_content'), {});
				}
			} else // TODO: what then?
				console.error('[ERR][loadDefaultState][getPromoProducts] Got no data!')
		};
		
		// load slot products callback - generic version
		var slotCbk = function(data, slotNo) {
			if (!slotNo) {
				console.log('[DBG][loadDefaultState][slotCbk] No slot number passed');
				return
			}
			
			if (data && data.length) {
				SlotManager.registerSlot("ul#featuredproductsSlot"+slotNo, data, null, {headerId : "#featuredproductsSlot"+slotNo+"Header"});
			} else {
				console.log('[DBG][loadDefaultState][slotCbk] No product data');
				$('ul#featuredproductsSlot'+slotNo).prev(".contentHeader").remove();
				$('ul#featuredproductsSlot'+slotNo).remove();
			}
		};
		
		var actionSpecial = (parameters && parameters.actionSpecial);
		if (!_.isBoolean(actionSpecial)) actionSpecial = frisco.friscoVanAvailable();
		if (_.isUndefined(actionSpecial)) actionSpecial = true;
		
		if (actionSpecial) {
		// action homepage
		$("#octoberContest, #products4You, .bestProducts, .contentHeader.home:not(.enjoy), .contentHeader.home + .products").hide();
		$("#main-banner-container").addClass("wide");
		$("#navigation, #page_content .loggedUserPanel").addClass("for-wide-banners");
		
		// Load home banners
		var container = $("#main-banner-container");
		if (container) {
			var display = function(res) {
				res = _.filter(res, function(b){ return b.img; });
				container.jqotesub(frisco.getTemplate('homehead_frisco'), {banners: res, action: true});
				homeBannersChanger();
			};
			cms.hp_banners(display);
		}
		
		if (!renderContent)
			$("#page_content").jqoteapp(frisco.getTemplate('footer_content'), {});
		
		displayActionHome('wege', true, renderContent);
		
		} else {
		$("#products4You, .bestProducts, .contentHeader.home, .contentHeader.home + .products").show(); // #octoberContest,
		$("#main-banner-container").removeClass("wide");
		$("#navigation, #page_content .loggedUserPanel").removeClass("for-wide-banners");
		$("#action-home").remove();
		
		// Load home banners
		var container = $("#main-banner-container");
		if (container && renderContent) {
			var display = function(res) {
				res = _.filter(res, function(b){ return b.html && b.html != 'null'; });
				container.jqotesub(frisco.getTemplate('homehead_frisco'), {banners: res});
				homeBannersChanger();
			};
			cms.hp_banners(display);
		}
		else if (container && !renderContent)
			homeBannersChanger();
		
		var cbk = function(data) {
			if (data) {
				promoCbk(data.promoted);
				slotCbk(data.eathealthy, 1); // load slot1 - eat healthy
				slotCbk(data.vegetablesfruits, 2); // load slot2 - vegetables & fruits
				slotCbk(data.worldkitchen, 3); // load slot3 - world kitchen
				slotCbk(data.forkids, 4); // load slot4 - for kids
				slotCbk(data.forhome, 5); // load slot5 - for home
				SlotManager.enableLoadSlots();
			}
		};
			
		var p={}; p[friscoStorage.PARAM_FOLLOWER_CALLBACK] = cbk;
		friscoStorage.get("promoproducts", p);
		
		// Load products for you
		var count = 25; // two lines at 2048 width, suffices always + some spare just in case
		var load4u = function() {
			var score = function(x) {
				return (x.current_promotion && 1 || 0) + ($.inArray(friscoHelpers.TAG_NEW, x.tag_ids) >= 0) + ($.inArray(friscoHelpers.TAG_BEST_PRICE, x.tag_ids) >= 0);
			};
			var sort = function(products) {
				products.sort(function(a,b){
					return score(b) - score(a);
				});
			};
			var load4u_fablo = function(cbk) {
				var attrs = 'status=0&&has_image=1&&is_alcohol=0&&acc'+FabloConfig.userGroup+'=1';
				if (!frisco.friscoVanAvailable())
					attrs += '&&is_van_only=0';
				
				apiFablo.getRecommendations(loggedUserId, $.cookie('fablo-tid'), count, attrs, function(results) {
					var rl = results.length;
					if (results.length >= 6) {
						FabloConfig.updateCartInfo();
						var products = $.map(results, FabloConfig.productTranslator);
						sort(products);
						$("ul#list4You").empty(); // if appending products from fablo after products from frisco, duplicates can happen.
						frisco.renderProducts($("ul#list4You"), products, function(x){
							return x.cartAmount == 0;
						}, {gaAttr: "Strona-glowna"});
						$("#products4You").show();
					}
						
					if (cbk && cbk instanceof Function) 
						cbk(products);
				});
			};
			
			var load4u_frisco = function(cbk) {
				// show only available and updated products that are currently not in cart
				var filters = {
					'status' : [FRISCO.PRODUCT_STATUS_AVAILABLE, FRISCO.PRODUCT_STATUS_UPDATED], 
					'in_cart' : true
				}; 
				
				api.getProfiledBoughtProducts(loggedUserId, 1, count, null, filters, function(products) {
					if (products.length >= 6) {
						sort(products); // maybe one can define this sorting order an sortArray parameter to getProfiledBoughtProducts?
						frisco.renderProducts($("ul#list4You"), products, function(x) {
							return !x.is_alcohol && x.image_id > 0;
						}, {gaAttr: "Strona-glowna"});
						$("#products4You").show();
					}
					
					if (cbk && cbk instanceof Function) 
						cbk(products);
				});
			};
			
			if (loggedUserId) {
				if (renderContent) { // loaded from tpl, full home page load
					load4u_frisco(function(ps) {
						if (ps.length < 6)
							load4u_fablo(); // ugly, flickery, crappy - but hey, maybe will show something
					}); 
				} else {
					var cart_prods = document.querySelector("#products4You .productId.active");
					if (cart_prods) cart_prods.remove();
					if ($("#products4You ul .productId").length < 6) { // right now, there are either 0 or more than 6 from PHP
						load4u_fablo(); // iList empty, try Fablo
					} else {
						$("#products4You").show(); // elements backend rendered, good, show them
					}
				}
			} else {
				load4u_fablo();
			}
		};
		
		var loadOctoberPromo = function() {
			if (renderContent && octoberContestActive()) {
				api.getCampaignProducts('2014 October Contest', function(data) {
					if (data && data.productsIds && data.productsIds.length) {
						api.getProducts(data.productsIds, function(data) {
							frisco.renderProducts($("ul#octoberContestProducts"), data, function(x) {
								return !x.is_alcohol && x.image_id > 0;
							}, {gaAttr: "Strona-glowna"});
							$("#octoberContest").show();
						}, loggedUserId, 1, 25);
					}
				});
			}
		};
		
		if (friscoStorage.getShallow('cartData')) {
			loadOctoberPromo();
			load4u();
		} else {
			friscoEvents.hook('homepage4u', friscoEvents.FEV_CART_DATA_ARRIVED, function() {
				loadOctoberPromo();
				load4u();
			}, {type: friscoEvents.FEV_TYPE_ONETIME});
		}
		} // !actionSpecial
			
		// Load brands slider
		if (!$("#page_content #footer .footer-bottom #rotator-partners").length)
		cms.brands(function(brands){
			var data = _.filter(brands, function(x){ return x.priority; });
			var out = '';
			$.each(data, function(i, brand){
				out += '<li><a href="/brand_name,'+brand.container.replace(/ /g, '_')+'/stn,searchResults" title="Zobacz produkty marki '+brand.container+'"><img src="'+brand.image+'" alt="'+brand.container+'"></a></li>';
			});
			$("#page_content #footer .footer-bottom").jqotepre(templates.rotator_partners, {out: out});
			
			var objList = $('#rotator-partners .list-box .list'), stepProduct=0, minStepProduct=0, interval;
			
			if(data.length)
			{
				$("#rotator-partners, #rotator-partners-title").show();
				var pos = objList.css('marginLeft') || 0;
				pos = Number(pos.replace('px', ''));
				
				var startAnimation = function() {
					interval = setInterval(function(){
						if (stepProduct<minStepProduct) stepProduct++;
						else if (stepProduct>minStepProduct) stepProduct--;
						pos -= stepProduct;
						var halfWidth = objList.width()/2; // this shouldn't be computed before setInterval, because some images might not be loaded yet
						if (pos > 0) { pos -= halfWidth; }
						else if (pos < -halfWidth) { pos += halfWidth; }
						else if (stepProduct==0) {
							try { clearInterval(interval); } catch (e) { }
						}
						objList.css({marginLeft: pos+'px'});
					}, 30);
				};
				
				$('.partners-slider ul.nav-arrows li.next a').click(function(ev){
					stepProduct = 40;
					startAnimation();
					ev.preventDefault();
				});
				$('.partners-slider ul.nav-arrows li.prev a').click(function(ev){
					stepProduct = -40;
					startAnimation();
					ev.preventDefault();
				});
				
				friscoEvents.hook('partners-slider', friscoEvents.FEV_ON_STATE_ENTER, function(){
					clearInterval(interval);
				}, {type: friscoEvents.FEV_TYPE_ONETIME});
			}
		});
		
		// Criteo
		if (frisco.useTrackingCode("criteo"))
		try {
			window.criteo_q = window.criteo_q || [];
			window.criteo_q.push(
				{ event: "setAccount", account: 4936 },
				{ event: "setCustomerId", id: loggedUserId },
				{ event: "setSiteType", type: "d" },
				{ event: "viewHome" , user_segment: "1" }
			);
		} catch (e) {}
        
		// Sociomantic
		if (frisco.useTrackingCode("sociomantic"))
		try {
			sociomantic.sonar.adv['frisco-pl'].clear();
			if (loggedUserId) window.customer = {identifier: loggedUserId};
			sociomantic.sonar.adv['frisco-pl'].track();
		} catch (e) {}

		document.title = "Supermarket online, zakupy spożywcze z dostawą do domu - Frisco.pl";
		frisco.setMetaDescription("Frisco.pl - supermarket online z pełnym asortymentem spożywczym i nie tylko. Zrób zakupy online, dostarczymy je nawet tego samego dnia. Zakupy przez Internet jeszcze nigdy nie były tak wygodne. Spróbuj!");
		frisco.setCanonical('https://'+window.location.hostname+'/');
		
		// cloudtechnologies
		friscoEvents.fire('homepage', friscoEvents.FEV_LOAD_HOMEPAGE);
	};
	
	var loadSidebarForLogged = function() {
		if (loggedUserId) {
			$('#header div.userPanel li.login').hide();
			$('#header div.userPanel li.register').hide();
			$('#header div.userPanel li.username').show();
		} else {
			$('#header div.userPanel li.login').show();
			$('#header div.userPanel li.register').show();
			$('#header div.userPanel li.username').hide();
			friscoEvents.hook('sidebar', friscoEvents.FEV_STATE_CHANGED, function() { loadSidebarForState(); });
		}
	};

	var loadSidebarForState = function() {
		var state = core.getCurrentState();
		if (state == 'searchResults' || state == 'product'  || state == 'christmasLandingPage') {
			$('#sidebar div.contentHome').hide(); $('#sidebar div.content').show(); $('.helpdesk').hide();
		}
		else if(state == 'register') {
			$('#sidebar div.contentHome').hide(); $('#sidebar div.content').hide(); $('.helpdesk').show();
			$('#rightNavigation').html('');
		}
		else {
			$('#sidebar div.contentHome').show(); $('#sidebar div.content').hide(); $('.helpdesk').hide();
			$('#rightNavigation').html('');
		}
	};

	var reserveNearestDeliveryDate = function() {
		var nearestDeliveryDate = friscoStorage.get("nearestWindow");
		if (!nearestDeliveryDate) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.RSV_PLACE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
		} else {
			return reservationSwitch(nearestDeliveryDate.window_id);
		}
	};

	var checkIfActiveOrderForDate = function(windowId) {
		var orderList = friscoStorage.get('orderList');
		var curOrder = friscoStorage.getShallow('workingOrder'); // order in edit mode
		
		if (!orderList || curOrder) {
			Loader.hide();
			Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_PLACE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
		}
		
		/* Now check if there is active order with same timestamp */
		var found = false;
		$.each(orderList, function(index) {
			var order = orderList[index];
			
			var dateOrder = new Date(order.delivery_date*1000);
			var dateWindow = new Date(windowId*1000);
			
			var orderDeliveryDate  = dateOrder.getFullYear()+'-'+dateOrder.getMonth()+'-'+dateOrder.getDate();
			var windowDeliveryDate = dateWindow.getFullYear()+'-'+dateWindow.getMonth()+'-'+dateWindow.getDate();
			
			if ( (friscoHelpers.isOrderActive(order)) && (orderDeliveryDate == windowDeliveryDate) ) {
				if ( !curOrder || (curOrder.order_id != order.order_id) ) {
					found = true;
					return false;
				}
			}
		});
		
		return found;
	};


	var reservationSwitch = function(windowId) {
		if (windowId == undefined || windowId == null) {
			DBG('DELIVERY_DATE', "Reservation gone bad, no windowId");
			return;
		}

		windowId = parseInt(windowId, 10);
		if (!windowId) {
			DBG('DELIVERY_DATE', "Reservation gone bad invalid windowId");
			return;
		}

		
		DBG('DELIVERY_DATE', "Reservation switch for", typeof windowId, windowId);
		friscoStorage.set('deliveryDate', windowId);
		var status = friscoStorage.getShallow('deliveryDate');
		if (status) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.RSV_PLACED, timeout: Popup.TIMEOUT.NORMAL });
		} else {
			Popup.loadMessage({ messageId: Popup.MESSAGES.RSV_PLACE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
			/* Refresh windows */
			var wWindows = friscoStorage.getFresh('windowsList');
		}
		
		var state = core.getCurrentState();
		if(state == 'default' || state == undefined ) 
		updateHomeDeliveryOrderBox();

		// update delivery prices
		friscoStorage.getFresh('deliveryPrices');
		checkoutUpdateTotalValue();

		var params = {};
		params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function() { behaveDueToCart( friscoStorage.getShallow('cartData')); };
		friscoStorage.getFresh('deliveryMethod', params);
	};

    var renderCheckoutSliders = function(reservation_window) {

        var oldReservation = reservation_window ? {window_id: reservation_window} : friscoStorage.getShallow('deliveryDate');

        if (oldReservation) {
            $("#reservationChooser .reservationsList .dayPicker").html(friscoHelpers.timeWindowToDayPart(oldReservation.window_id, true));
            $("#reservationChooser .reservationsList .hoursPicker").html(friscoHelpers.timeWindowToHourPart(oldReservation.window_id));
        }
    };

	var renderSelectedPaymentType = function(paymentsTypes, selectedPaymentMethod) {
		if (!selectedPaymentMethod) {
			$('.checkoutContener .payment .selected').hide();
			$('.checkoutContener .payment .option').hide();
			return false;
		}

		var finalRenderItem = function(payment) {
			var paymentName = lang.getTranslation(payment.name);
			var labelBackgroundImage = payment.img ? "url(" +  payment.img + ")" : "";
			var labelClass = "payment" + payment.type.charAt(0).toUpperCase() + payment.type.substr(1);
			
			// PayPal special handling	
			if (payment.type == "PayPal") {
				paymentName = "PayPal<br/><span class='line2'>" + __("Płać szybko i bezpiecznie") + "</span><br/><a class='paypalPopup' title='"+__("Czym jest PayPal?")+"'>"+__("Czym jest PayPal?")+"</a>";
			}
			
			var container = $('.checkoutContener .payment div.type p');
			container.html(paymentName);
			container.attr('class', labelClass);
			container.attr("style", "background-image: " + labelBackgroundImage);

			$('.checkoutContener .payment .selected').show();
			$('.checkoutContener .payment .option').show();
		};
		
		for (var i in paymentsTypes) {
			var paymentType       = paymentsTypes[i].type;
// 			var paymentClientName = paymentsTypes[i].paymentClientName;
			var isEnabled         = paymentsTypes[i].enable ? true : false;

			if (paymentType == selectedPaymentMethod && isEnabled) {
				finalRenderItem(paymentsTypes[i]);
				return true;
			}
		}

// 		$('.checkoutContener .payment .selected').show();
// 		return true;
	};

	var renderPaymentsTypes = function(paymentsTypes, selectedPaymentMethod) {
		$('.checkoutContener .payment .reservationsList .paymentMethods').html('');
		var method = friscoStorage.get('deliveryMethod');
		
		for (var i in paymentsTypes) {
			var paymentType = paymentsTypes[i].type;
			var paymentName = lang.getTranslation(paymentsTypes[i].name);
			var paymentClientName = paymentsTypes[i].paymentClientName;
			var isEnabled   = paymentsTypes[i].enable;
			
			// PayPal special handling	
			if (paymentType == "PayPal") {
				paymentName = "PayPal<br/><span class='line2'>" + __("Płać szybko i bezpiecznie") + "</span><br/><a class='paypalPopup' title='"+__("Czym jest PayPal?")+"'>"+__("Czym jest PayPal?")+"</a>";
			}
			
			var labelStyle = paymentsTypes[i].img ? "style='background-image: url(" +  paymentsTypes[i].img + ")' " : "";
			var labelClass = "class='payment" + paymentType.charAt(0).toUpperCase() + paymentType.substr(1) + "'";
			var inputChecked = isEnabled && selectedPaymentMethod && paymentType == selectedPaymentMethod ? "checked='checked'" : "";

			if (isEnabled) {
				$('.checkoutContener .payment .reservationsList .paymentMethods').append("<li><label " + labelClass + " " + labelStyle + " ><input name='paymentMethod' type='radio' " + inputChecked  + " value='" + paymentType + "' payment_type='" + paymentType + "' />" + paymentName + "</label></li>");
			}
			else {
				labelClass = "class='payment" + paymentType.charAt(0).toUpperCase() + paymentType.substr(1) + " disabled'";
				labelStyle = paymentsTypes[i].img ? "style='opacity: 0.4; background-image: url(" +  paymentsTypes[i].img + ")' " : "style='opacity: 0.4;'";
				paymentName += " <span>" + (paymentsTypes[i].textStatus ? __(paymentsTypes[i].textStatus) : __("zablokowana")) + "</span>"

				$('.checkoutContener .payment .reservationsList .paymentMethods').append("<li><label " + labelClass + " " + labelStyle + " >" + paymentName + "</label></li>");
			}
		}

		if (renderSelectedPaymentType(paymentsTypes, selectedPaymentMethod)) {
			$('.checkoutContener .payment .reservationsList').hide();
		} else {
			$('.checkoutContener .payment .reservationsList').show();
		}

		$('.checkoutContener .payment p.change').click( function(){
			$('.checkoutContener .payment .reservationsList').show();
		});

		var hideSelectionsAndRenderCurrent = function() {
			$('.checkoutContener .payment .reservationsList').hide();
			var selectedPayment = $('.checkoutContener .paymentMethods label.checked input').val();
			renderSelectedPaymentType(paymentsTypes, selectedPayment);
			friscoStorage.set("paymentMethod", selectedPayment);
			checkVoucherForSupportedPayments({allowChoice: true});
		};

		var allLabels = $(".checkoutContener .payment .reservationsList .paymentMethods label");
		
		$("#paymentCheckoutContener").on('click', 'a.paypalPopup', function(e) {
			e.stopImmediatePropagation(); e.preventDefault();
			window.open('https://www.paypal.com/pl/webapps/mpp/paypal-popup','WIPaypal','toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, width=1060, height=700');
		});

		var selectPaymentCbk = function(e) {
			var clickedPaymentElement = $(this);
			if (clickedPaymentElement.hasClass("disabled")) {
				return;
			}
			
			if (_gaq && _gaq.push && !$(this).hasClass("checked") ){
				_gaq.push(['_trackEvent','Checkout','Platnosc',$(this).text()]);
			}
			
			allLabels.removeClass("checked"); 
			clickedPaymentElement.addClass("checked"); 
			clickedPaymentElement.children("input").attr( 'checked', true ); 
			hideSelectionsAndRenderCurrent(); 
		};
		
		$('#paymentCheckoutContener').on("click", '.payment .reservationsList .paymentMethods label', selectPaymentCbk);
	};

    var hideCheckoutAddressesBox = function() {
        $("#page_content .addresses").removeClass("editable");
    };

	var addCheckoutVoucher = function(voucherNumber) {
		voucherNumber = $.trim(voucherNumber);
		var userProfile = friscoStorage.getShallow('userProfile');
		var cartData = friscoStorage.getShallow('cartData');
		var curOrder = friscoStorage.getShallow('workingOrder');

		var voucherErrorNo2Str = function(voucher) {
			switch (voucher.errorCode) {
				case -1: errorMessage = __('Data ważności vouchera ulegała przedawnieniu lub voucher nie jest jeszcze aktywny. Ważny od: '+friscoHelpers.timestamp2day(voucher.valid_from*1000)+' do: '+friscoHelpers.timestamp2day(voucher.valid_to*1000)); break;
				case -2: errorMessage = __('Voucher został już wykorzystany'); break;
				case -3: errorMessage = __('Nie posiadasz odpowiednich uprawnień by skorzystać z vouchera'); break;
				case -4: errorMessage = __('Minimalna wartość zamówienia by skorzystać z vouchera to: ')+friscoHelpers.priceFormat(voucher.min_order_value)+' zł'; break;
				case -5: errorMessage = __('Maksymalna wartość zamówienia by skorzystać z vouchera to: ')+friscoHelpers.priceFormat(voucher.max_order_value)+' zł'; break;
				case -6: errorMessage = __('Tego vouchera nie można używać przy aktywnym planie oszczędnościowym. W celu użycia kupony prosimy skontaktować się z BOK w celu wyłączenia planu oszczędnościowego.'); break; 
				case -7: errorMessage = __('Ten voucher jest przeznaczony dla nowych klientów i nie można go użyć gdy posiadasz już zamówienie.'); break; 
				case -8: errorMessage = __('Ten kod rabatowy przeznaczony jest wyłącznie dla Nowych Klientów.'); break; 
				case -10: errorMessage = __('Tego vouchera nie można użyć w okresie świątecznym.'); break;
				case -12: errorMessage = __('Ten voucher obowiązuje tylko na wybrane produkty, których aktualnie brak w koszyku.'); break;
				default: errorMessage = __('Nie można użyć tego vouchera, skontaktuj się z biurem obsługi klienta'); break;
			}
		
			return errorMessage;
		};
	
		DBG('CHECKOUT', 'Adding voucher');
		var voucherContent = voucherNumber ? voucherNumber : $.trim($("#page_content .typeVoucher input[type=text]").val());
		if (voucherContent) {
			api.getVoucher(loggedUserId, voucherContent, function(voucher) {
				if (!voucher) {
					Popup.loadMessage({ messageId: Popup.MESSAGES.VOUCHER_GET_ERROR, timeout: Popup.TIMEOUT.NORMAL });
					setTimeout(function() {
						Rum.rumEvent(Rum.VOUCHER_EVENT, voucherContent, loggedUserId);
					}, 3000);
					
					if (_gaq && _gaq.push){
						_gaq.push(['_trackEvent','Checkout','Voucher','Nie-OK',0]);
					} 
					return;
				}
				
				if ( (!voucher.canUse) && (cartData.original_price_gross) && (core.getCurrentState() !='viewOrder') ) {
					if (!curOrder || !curOrder.voucher_id || curOrder.voucher_id != voucher.number) {
						Popup.load({ content: voucherErrorNo2Str(voucher), type: Popup.TYPE.ERROR, size: Popup.SIZE.FLASH, timeout: Popup.TIMEOUT.NORMAL });
						
						setTimeout(function() {
							Rum.rumEvent(Rum.VOUCHER_EVENT, voucherContent, loggedUserId);
						}, 3000);
						
						if (_gaq && _gaq.push){
							_gaq.push(['_trackEvent','Checkout','Voucher','Nie-OK',0]);
						} 
					return;
					}
				}
				
				if (voucher.balance_auto_commit) {
					if (!voucher.balanceAutoCommitted) {
						Popup.load({ content: __('Voucher został już uwzględniony.'), type: Popup.TYPE.ERROR, size: Popup.SIZE.FLASH, timeout: Popup.TIMEOUT.NORMAL });
					} else {
						Popup.load({ content: 'Twój kupon o wartości ' + friscoHelpers.priceFormat(voucher.value) + ' zł został dodany na saldo. Jeśli chcesz dodać kolejny kupon, wpisz jego numer i kliknij "Dodaj".', type: Popup.TYPE.MESSAGE, size: Popup.SIZE.NORMAL, close: true });
						$("#page_content .typeVoucher input[type=text]").val('');
						pub.getBalance();
					}
				} else {
					friscoStorage.setShallow("checkoutVoucher", voucher);
					$("#page_content .typeVoucher input[type=text]").val('');
					if (voucher.type == 1){
						$("#page_content .enteredVoucher .voucherBonus").html(voucher.value+' %');
						if (_gaq && _gaq.push){
							_gaq.push(['_trackEvent','Checkout','Voucher','Ok',0]);
						}
					} else {
						// COCA-COLA 03/2015 megaugly hack - remove after action is done
						if (voucher.vouchercampaign_id == 551 || voucher.vouchercampaign_id == 555)
							$("#page_content .enteredVoucher .voucherBonus").html("do " + friscoHelpers.priceFormat(voucher.value)+' zł');
						else
							$("#page_content .enteredVoucher .voucherBonus").html(friscoHelpers.priceFormat(voucher.value)+' zł');
						
						if (_gaq && _gaq.push){
							_gaq.push(['_trackEvent','Checkout','Voucher','Ok',0]);
						}
					}

					if (voucher.price_delivery != null) {
						$("#page_content .voucherDeliveryPrice").text(friscoHelpers.priceFormat(voucher.price_delivery) + ' zł');
						$("#page_content .voucherPromoDelivery").show();
					} else {
						$("#page_content .voucherPromoDelivery").hide();
					}
					
					checkVoucherForSupportedPayments();
				
					$("#page_content .enteredVoucher").show();
					$("#page_content .enteredVoucher code").html(_$(voucherContent));
				}
			}.bind(this));
		}
	};

	var cancelCheckoutVoucher = function(allowChoice) {
		var voucher = friscoStorage.getShallow("checkoutVoucher");
		if (voucher) {
			$("#page_content .enteredVoucher").hide();
			$("#page_content .voucherPromoDelivery").hide();
			$("#page_content .enteredVoucher code").html('');
		}
		$("#page_content .typeVoucher").show();
		friscoStorage.setShallow("checkoutVoucher", null);
		
		// needs to be redrawn as it type "3" vouchers can narrow down selection
		var pTypes = friscoStorage.getShallow('paymentsTypes');
		renderPaymentsTypes(pTypes);
	};
	
	var checkVoucherForSupportedPayments = function(params) {
		var voucher = friscoStorage.getShallow("checkoutVoucher");
		var payment = friscoStorage.getShallow("paymentMethod");
		
		if (!voucher || !voucher.payment_method)
			return;
		
		// treat PayPal vouchers the most cumbersome way we can UX-wise - due to marketing decisions
		if (payment != "PayPal" && $.inArray("PayPal", voucher.payment_method) >= 0 && (!params || params.allowChoice == false)) {
			var pTypes = friscoStorage.getShallow('paymentsTypes');
			renderSelectedPaymentType(pTypes, "PayPal"); // voucher.payment_method);
			return;
		}
		
		
		var callbacksMulti = {
			"#popupYes" : function() {
				var pTypes = friscoStorage.getShallow('paymentsTypes');
				for (var t in pTypes) {
					( $.inArray(pTypes[t].type, voucher.payment_method) < 0 ) && ( pTypes[t].enable = false );
				}
				renderPaymentsTypes(pTypes);
				Popup.hide();
			},
			"#popupNo" : function() { 
				cancelCheckoutVoucher();
				Popup.hide();
			},
		};
		
		var callbacksSingle = {
			"#popupYes" : function() {
				friscoStorage.set("paymentMethod", voucher.payment_method[0]);
				var pTypes = friscoStorage.getShallow('paymentsTypes');
				renderSelectedPaymentType(pTypes, voucher.payment_method[0]);
				Popup.hide();
			},
			"#popupNo" : function() { 
				cancelCheckoutVoucher();
				Popup.hide();
			},
		};
		
		// now, check other "normal" payment enforcements
		var isPaymentOK = false;
		if (voucher.payment_method && voucher.payment_method instanceof Array) { 
			// if no payemnt chosen so far, narrow down the list
			if (!payment) {
				var pTypes = friscoStorage.getShallow('paymentsTypes');
				for (var t in pTypes) {
					( $.inArray(pTypes[t].type, voucher.payment_method) < 0 ) && ( pTypes[t].enable = false );
				}
				renderPaymentsTypes(pTypes);
				return;
			}
			
			// check the list
			($.inArray(payment, voucher.payment_method) >= 0) && (isPaymentOK = true);
			if (isPaymentOK) { // on old checkout, do nothing
				// 				if (!params || params.silentIfOK == false) 
				// 					voucherSwitch({ action: "add", voucher: voucher });
			} else if (voucher.payment_method.length == 1) {
				// let's stick with the flow we had until now
				Popup.load({ content: '<div class="text">' + __('Tego vouchera nie możesz użyć z wybranym typem płatności. Zmień ją na ' + friscoHelpers.translatePaymentMethod(voucher.payment_method[0]) + ', by skorzystać z tego vouchera.') + '<div class="popup_buttons"><div class="button green" id="popupYes">'+__('Zmień typ płatności')+'</div><div class="button red" id="popupNo">'+__('Zrezygnuj z vouchera')+'</div></div>' + '</div>', size: Popup.SIZE.NORMAL, type: Popup.TYPE.WARNING, callbacks: callbacksSingle });
			} else if (voucher.payment_method.length > 1) {
				var avPlist = '<ul class="avp_list">';
				for (p in voucher.payment_method)
					avPlist += '<li class="avp">' + friscoHelpers.translatePaymentMethod(voucher.payment_method[p]) + '</li>';
				avPlist += '</ul>';
				
				Popup.load({ content: '<div class="text">' + __('Tego vouchera nie możesz użyć z wybranym typem płatności. Czy chcesz ją zmienić na jedną z poniższych:' + avPlist + 'by skorzystać z tego vouchera?') + '<div class="popup_buttons"><div class="button green" id="popupYes">'+__('Zmień typ płatności')+'</div><div class="button red" id="popupNo">'+__('Zrezygnuj z vouchera')+'</div></div>' + '</div>', size: Popup.SIZE.NORMAL, type: Popup.TYPE.WARNING, callbacks: callbacksMulti });
			}
			
		}
	};
	

	var loadCheckoutFinal = function(prevState, prevSubState, parameters) {
		if (!loggedUserId) {
			frisco.loginPopup();
			return;
		}
		if (!parameters.orderId) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak orderId");
			return;
		}
		if (!parameters.year) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak year");
			return;
		}
		var orderId = parameters.orderId;
		var orderYear = parameters.year;
		var paymentStatus = parameters.payment;

		DBG('CHECKOUT_FINAL', 'getting order');
		var order = api.getOrder(loggedUserId, orderId, orderYear, null, true, ['items', 'product', 'savingplan', 'voucher', 'profit']);

		if (!order) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak order");
			return;
		}

		Ribbon.hide("voucher-info");

		var firstOrder = true;
		try { firstOrder = !friscoStorage.get('userProfile').lastOrderTime; } catch (e) {}
		var orderN = String(loggedUserId).lpad(0, 6) + "/" + String(order.year).substr(2,2) + "/" + String(order.order_id).lpad(0, 3);

		DBG('CHECKOUT_FINAL', 'rendering template');

		// OCTOBERcontest
		var octoberContestStep3 = octoberContestActive() && order.octoberContest;
		var time = __("w ciągu jednego dnia roboczego");
		cms.checkout_thanks(function(_time){
			time = _time || __("w ciągu jednego dnia roboczego");
			$("#deliveryStart").text(time);
		});
		$('#page_content').jqotesub(templates.checkout_landing, {octoberContest: octoberContestStep3, deliveryStart: time, tdTrackImgTag: tradedoubler.saleTrackBackTag(order), order: order, user: friscoStorage.get('userProfile'), logout_url: session.logout_url, wire_accountno: (parameters.wire_accountno)?parameters.wire_accountno:null, wire_title: (parameters.wire_title)?(parameters.wire_title.replace(/_/g, '/')):null });

		$('.landingPage.checkout .questions textarea').focus(function() {
			if($(this).attr("value") == $(this).attr("title")) { $(this).attr("value",""); $(this).addClass("active"); }
		});
		$('.landingPage.checkout .questions textarea').blur(function() {
			if($(this).attr("value") == "") { $(this).attr("value",$(this).attr("title")); $(this).removeClass("active"); }
		});
		$('.landingPage.checkout .suggestions textarea').focus(function() {
			if($(this).attr("value") == $(this).attr("title")) { $(this).attr("value","") }
		});
		$('.landingPage.checkout .suggestions textarea').blur(function() {
			if($(this).attr("value") == "") { $(this).attr("value",$(this).attr("title")) }
		});
		
		if (BrowserDetect.browser == "Explorer" && BrowserDetect.version < 10) {
			$("textarea#textMessage").on("click", function() { 
				if ($(this).text() == "Lubię zakupy we Frisco, bo...") $(this).text("");
			});
			$("textarea#textMessage").on("blur", function() {
				if ($(this).text() == "") $(this).text("Lubię zakupy we Frisco, bo...");
			});
		}
		
		$(window).scrollTop(180);

		// OCTOBERcontest
		if (octoberContestStep3) {
			var popup = $(".pop-up-holiday");
			popup.find(".close a").click(function(){
				popup.parent().hide();
			});
			popup.find("form").submit(function(){
				var message = $(this).find("#textMessage").val().trim();
				if (!message) {
					Popup.load({content: __("Wpisz treść wiadomości."), size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING, timeout: Popup.TIMEOUT.NORMAL});
					return false;
				}
				/*if (!$(this).find("#acceptcheck").prop("checked")) {
					Popup.load({content: __("Zaakceptuj regulamin konkursu."), size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING, timeout: Popup.TIMEOUT.NORMAL});
					return false;
				}*/
				api.sendOctoberContest(order, message, function(result){
					if (result && result.success) {
						popup.parent().addClass("big");
						popup.find(".left-box").addClass("pop-up");
					}
					else {
						Popup.load({content: __("Nie udało się wysłać wiadomości."), size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR});
					}
				});
				return false;
			});
			startFacebookAndPinterest();
		}

		$("a[id*=checkoutCancelOrder_]").click(function() {
			var curOrderId = $(this).attr('id').split('_')[1];
			var curOrderYear = $(this).attr('id').split('_')[2];
			
			// cancel order and reload default state
			var callbacks = {
				"#popupYes" : function() {
					api.updateOrderStatus(loggedUserId, curOrderId, curOrderYear, FRISCO.ORDER_STATUS_CANCELLED, function(data) {
						if (!data) {
							Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_CANCEL_ERROR, timeout: Popup.TIMEOUT.NORMAL });
						} else {
							friscoEvents.fire('checkoutFinalCancelOrder', friscoEvents.FEV_ORDER_STATUS_CHANGED, {orderId: curOrderId, orderYear: curOrderYear, orderStatus: FRISCO.ORDER_STATUS_CANCELLED});
							friscoStorage.set('lastOrder', null);
							friscoStorage.getFresh('userProfile');
							friscoStorage.getFresh('savingPlan');
							
							pub.getBalance();
							Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_CANCELLED, timeout: Popup.TIMEOUT.NORMAL });
							core.setState('defaultState');
								
							// SalesManago Delete Sale
// 							setTimeout(function() {
// 								var curProfile = friscoStorage.getShallow('userProfile');
// 								if (curProfile.salesManagoContactId && curProfile.salesManagoContactId != null) {
// 									api.smCancelSale(loggedUserId, curOrderYear, curOrderId, function() {});
// 								}
// 							}, 3000);
						}
					});
					
					Popup.hide();
				},
				"#popupNo" : function() { 
					Popup.hide();
				},
			};
			Popup.loadMessage({ messageId: Popup.MESSAGES.CANCEL_ORDER, callbacks: callbacks });
		});
		
		$('div.suggestions button').bind("click", function() { 
			$(this).after('<span class="sending">'+ __("Wysyłanie") +'...</span>');
			$(this).remove();
			var random = Math.floor(Math.random() * 2000 + 100 );
			setTimeout(function(){
				$('div.suggestions textarea').after('<div class="success"><h4>'+ __("Dziękujemy") + '</h4>' + __("Twoje sugestie postaramy się uwzględnić w najbliższym czasie.") +'</div>');
				$('div.suggestions textarea').remove();
				$('div.suggestions .sending').remove();
				$('div.success').siblings("p").remove();
			},random)
		});
		
		if (!parameters.dontTrackEdition || parameters.dontTrackEdition == false) {
			if (_gaq && _gaq.push) {
				if(firstOrder) {
					_gaq.push(['_setCustomVar', 3, 'Zakup', 'Pierwszy zakup', 2]);
				} else {
					_gaq.push(['_setCustomVar', 3, 'Zakup', 'Kolejny zakup', 2]);
				}
			}

			if (_gaq && _gaq.push && order.items) {
				_gaq.push(['_clearTrans']);
				_gaq.push(['_addTrans',
					orderN,
					"",
					(order.price_gross + order.price_delivery) / 100,
					order.profit/100,
					order.price_delivery/100,
					"",
					order.voucher && order.voucher.campaign ? order.voucher.campaign.name : "brak",
					order.voucher && order.voucher.human_number ? order.voucher.human_number : "brak"]);

				for (i in order.items) {
					var orderItem = order.items[i];
					if (orderItem.product) {
						_gaq.push(['_addItem',
							orderN,
							orderItem.product.ean,
							orderItem.product.visible_name,
							null,
							orderItem.price_gross / 100,
							orderItem.amount
						]);
					}
				}
				_gaq.push(['_trackTrans']);
			}

			// Google Code for Zakup Conversion Page
			window.google_conversion_id = 991877159;
			window.google_conversion_language = "pl";
			window.google_conversion_format = "2";
			window.google_conversion_color = "ffffff";
			window.google_conversion_label = "la7-CMHalgQQp7D72AM";
			window.google_conversion_value = order.price_gross / 100;
			document.write = function(text) { $('body').append(text); }; // workaround to make conversion.js work - document.write doesn't work when page is fully loaded
			$.getScript("//www.googleadservices.com/pagead/conversion.js");

			Fablo.ready(function(){
				// todo: remove Fablo.trace after next fablo release
				Fablo.trace.purchased({user: loggedUserId, products: _.map(order.items, function(x) {return x.product_id})});
				Fablitics.track("purchased", {
					id: orderN,
					products: _.map(order.items, function(x) {
						var in_pack = x.product.items_count || 1;
						return {
							id: '' + (x.product.singlepack_id || x.product_id),
							quantity: x.amount * in_pack,
							price: (x.price_gross / 100) / in_pack
						};
					})
				});
			});
            
			if (window.__insp && __insp.push) {
				__insp.push(["tagSession", "purchase"]);
			}

			// Żywiec pixel
			_.each(order.items, function(x) {
				if (x.product_id == 86235) {
					initPBTrackingPixel();
					var value = x.amount * x.price_gross / 100;
					window._fbq.push(['track', '6020676225017', {'value': value.toFixed(2), 'currency': 'PLN'}]);
				}
			});
			
			// Pampers pixel
			_.each(order.items, function(x) {
				if (_.contains(pampersMonthProductIds, +x.product_id)) {
					initPBTrackingPixel();
					var value = x.amount * x.price_gross / 100;
					window._fbq.push(['track', '6025342355061', {'value': value.toFixed(2), 'currency': 'PLN'}]);
				}
			});

			//tradedoubler
			window.TDConf = window.TDConf || {};
			TDConf.Config = {
				products: $.map(order.items, function(x) {
					return {id: x.product_id, price: x.price_gross / 100, currency: "PLN", name: x.full_name, qty: x.amount};
				}),
				orderId: orderN,
				orderValue: (order.price_gross + order.price_delivery) / 100,
				currency: "PLN",
				containerTagId : "5202"
			};
			if (typeof (TDConf) != "undefined"){
				TDConf.sudomain = ("https:" == document.location.protocol) ? "swrap" : "wrap";
				TDConf.host = ".tradedoubler.com/wrap";
				TDConf.containerTagURL = (("https:" == document.location.protocol) ? "https://" : "http://")  + TDConf.sudomain + TDConf.host;
				if (typeof (TDConf.Config) != "undefined") {
						$.getScript(TDConf.containerTagURL  + "?id="+ TDConf.Config.containerTagId);
				}
			}

			// Criteo
			if (frisco.useTrackingCode("criteo"))
			try {
				var criteo_products = [];
				for (i in order.items) {
					var orderItem = order.items[i];
					criteo_products.push({id: orderItem.product_id, price: (orderItem.price_gross / 100).toFixed(2), quantity: orderItem.amount});
				}
				window.criteo_q = window.criteo_q || [];
				window.criteo_q.push(
					{ event: "setAccount", account: 4936 },
					{ event: "manualDising" },
					{ event: "setCustomerId", id: order.user_id },
					{ event: "setSiteType", type: "d" },
					{ event: "trackTransaction" , id: orderN, new_customer: +firstOrder, item: criteo_products}
				);
			} catch (e) {}
			
			// Sociomantic
			if (frisco.useTrackingCode("sociomantic"))
			try {
				var sociomantic_products = [];
				for (i in order.items) {
					var orderItem = order.items[i];
					sociomantic_products.push({identifier: orderItem.product_id, amount: (orderItem.price_gross / 100).toFixed(2), currency: 'PLN', quantity: orderItem.amount});
				}
				sociomantic.sonar.adv['frisco-pl'].clear();
				if (loggedUserId) window.customer = {identifier: loggedUserId};
				window.basket = {
					products: sociomantic_products,
					transaction : orderN,
					amount: (order.price_gross + order.price_delivery) / 100,
					currency: 'PLN'
				}
				sociomantic.sonar.adv['frisco-pl'].track();
			} catch (e) {}
			
			// Google Tag Manager for SALESMORE
			var gtm_products = [];
			for (i in order.items) {
				var orderItem = order.items[i];
				gtm_products.push({sku: orderItem.product_id, name: orderItem.product.full_name, price: (orderItem.price_gross / 100).toFixed(2), quantity: orderItem.amount});
			}
			var gtmdata = {
				'event': 'info', 
				'pageTitle': 'thx',
				'transactionId': orderN,
				'transactionTotal': ((order.price_gross + order.price_delivery) / 100).toFixed(2),
				'transactionProducts': gtm_products,
			};
			sendGTMEvent(gtmdata);

			// SalesManago Sale report
// 			setTimeout( function() {
// 				var curProfile = friscoStorage.getShallow('userProfile');
// 				if (curProfile.salesManagoContactId && curProfile.salesManagoContactId != null) {
// 					api.smReportSale(loggedUserId, order.year, order.order_id, function(){});
// 					api.smReinitCart(loggedUserId, [], function(data){ console.log("[renderCartContent] cleared cart for salesmanago"); });
// 				}
// 			}, 3000);
			
			// cloudtechnologies
			var more_than_3_orders = api.getOrderList(order.user_id, 0, 4, null, 1).length > 3;
			var product_ids = $.map(order.items, function(x) {return x.product_id});
			friscoEvents.fire('checkout_final', friscoEvents.FEV_ORDER_COMPLETED, {products: product_ids, moreThan3: more_than_3_orders});
			
			// PAYBACK
			try {
				var value = order.price_gross;
				// Don't count alcohol and tobacco products.
				for (i in order.items) {
					var orderItem = order.items[i];
					if (orderItem.product.is_alcohol || orderItem.product.is_tobacco)
						value -= orderItem.amount * orderItem.price_gross;
				}
				var voucherId = (order.voucher_id || "").toLowerCase();
				var val = (value / 100).toFixed(2) + "|" + orderN + "|" + voucherId + "|";
				$.get("/pbhash," + encodeURIComponent(val), function(hash) {
					try {
						$("#page_content .landingPage.checkout .content").after('<div id="pbtw"><div class="semi-widget-transaction" data-transaction="' + val + hash + '"></div></div>');
						window._STW.build();
						$(".semi-widget-main, .semi-widget-main-bookmark").hide();
						$(".semi-widget-main-margin").hide().addClass("hidden");
						friscoEvents.hook('checkout_final_pbw', friscoEvents.FEV_ON_STATE_ENTER, function(){
							$(".semi-widget-main, .semi-widget-main-bookmark").show();
							$(".semi-widget-main-margin").show().removeClass("hidden");
						}, {type: friscoEvents.FEV_TYPE_ONETIME});
					} catch (e) {}
				});
			} catch (e) {}
		}
	};

	var loadPaymentFinal = function(prevState, prevSubState, parameters) {
		if (!loggedUserId) {
			frisco.loginPopup();
			return;
		}
		if (!parameters.orderId) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak orderId");
			return;
		}
		if (!parameters.year) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak year");
			return;
		}
		var orderId = parameters.orderId;
		var orderYear = parameters.year;
		var paymentStatus = parameters.payment;

		DBG('PAYMENT_FINAL', 'getting order');
		var order = api.getOrder(loggedUserId, orderId, orderYear, null, true, ["items"]);
		if (!order) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak order");
			return;
		}

		DBG('PAYMENT_FINAL', 'rendering template');
		$('#page_content').html('');
		$('#page_content').jqoteapp(templates.payment_landing, {order: order});
	};

	var renderOrderDeliveryAddresses = function(deliveryAddresses, newone) {
		if (newone) {
			$.each(deliveryAddresses, function(index) {
				var elem = tt = $.jqote(templates.checkout_delivery_shelf, {address : this});
				$(elem).insertBefore('#deliveryAddresses ul.addresses li.new');
				if (deliveryAddresses.length > 1) $('#deliveryAddresses ul.addresses li.change').show();
				else $('#deliveryAddresses ul.addresses li.change').hide();
// 				('#deliveryAddresses ul.addresses').jqotepre(templates.checkout_delivery_shelf, {address : this});
			});
			
			if ($('#deliveryAddresses ul.addresses li[address_no]').length > 1)
				$('#deliveryAddresses ul.addresses li.change').show();
		} else {
			$.each(deliveryAddresses, function(index) {
				$('#deliveryAddresses ul.addresses').jqoteapp(templates.checkout_delivery_shelf, {address : this});
			});
			$('#deliveryAddresses ul.addresses').jqoteapp(templates.checkout_delivery_shelf_options, { addressCount: deliveryAddresses.length });
		}
		
// 		active callbacks
// 		var selectedCheckoutAddress = friscoSession.get("checkoutAddress");
		var selectedCheckoutAddress = friscoStorage.get('checkoutAddressNo');

// 		if (newone) {
			$('#deliveryAddresses ul.addresses li').removeClass('active');
			$('#deliveryAddresses ul.addresses li[address_no='+selectedCheckoutAddress+']').addClass('active');
// 		}

// 		$('.currentAddress > ul').jqoteapp(templates.checkout_delivery_shelf, {address : deliveryAddresses[0]});

		
		$.each(deliveryAddresses, function(index) {
			var address_no = this.address_no;
			var cbk = function() {
				setCheckoutAddress(address_no);
// 					friscoSession.set("checkoutAddress", address_no);
			};
			
			if (this.address_no) {
				$("#deliveryAddresses ul.addresses.editable li[address_no=" + this.address_no + "]").live("click", cbk);
			}
			if (selectedCheckoutAddress == this.address_no || (!selectedCheckoutAddress && this.is_main)) {
// 				if (newone)
					setCheckoutAddress(this.address_no, newone);
// 				else
// 					setCheckoutAddress(this.address_no);
			}
		});
	};

	var _checkoutHideShowReservation = function(force) {
		/* if delivery is courier, do no show this */
		var method = null;
		if (force) {
			method = friscoStorage.getFresh('deliveryMethod');
		} else {
			method = friscoStorage.get('deliveryMethod');
		}
		
		var ret = true;
		if (method && method.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_VAN) {
			/* Some action here? */
			$('#page_content a.changeCheckoutDelivery').show();
			$('#reservationChooser').show();
		} else if (method && method.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_POU) {
			// what then?
		} else if (!frisco.currentPostcode || (method && method.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_COURIER) || !method) {
			$('#page_content a.changeCheckoutDelivery').hide();
			$('#reservationChooser').hide();
			ret = false;
			
			var paymentMethod = friscoStorage.get("paymentMethod");
			if ( (paymentMethod=='delivery')||(paymentMethod=='delivery_cash') )
				friscoStorage.set("paymentMethod", null);
		}
		return ret;
	};
	
	var _checkoutRedrawPayments = function() {
		var paymentMethod = friscoStorage.get("paymentMethod");
		
		var refreshPaymentsAfterAddressChanged = function(paymentsTypes) {
			renderPaymentsTypes(paymentsTypes, paymentMethod);
		}
		
		var params = {};
		params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = refreshPaymentsAfterAddressChanged;
		
		// show loading indicator
		$('ul.paymentMethods > li').remove();
		$('ul.paymentMethods').append( $('<li/>').html( $('<img/>').attr('src', '/img/ajax-loader.gif')) );
		friscoStorage.getFresh('paymentsTypes', params);
	};
	
	var addressesEditor = function() {
		var userProfile = friscoStorage.getShallow('userProfile');
		DBG('CHECKOUT', 'deliveryAddresses check');
		var deliveryAddresses = friscoStorage.get('deliveryAddresses');
		var selectedAddress = null;
		if (deliveryAddresses && deliveryAddresses.length) {
			for (var i = 0, l = deliveryAddresses.length; i < l; i++) {
				if (deliveryAddresses[i].is_main && !selectedAddress) {
					mainAddress = deliveryAddresses[i];
					selectedAddress = deliveryAddresses[i];
				} else if (userProfile.delivery_address_no == deliveryAddresses.address_no) {
					selectedAddress = deliveryAddresses[i];
					break;
				}
			}
			
			if (!selectedAddress && deliveryAddresses.length == 1) {
				selectedAddress = deliveryAddresses[0];
			}
		}
		if (deliveryAddresses && deliveryAddresses.length) {
			renderOrderDeliveryAddresses(deliveryAddresses);
			$('.deliveryAddresses #addressChooserPanel').show();
			$('.deliveryAddresses #noAddressPanel').hide();
			_instantAddressAddForm();
		} else {
			renderOrderDeliveryAddresses([]);
			$('.deliveryAddresses #addressChooserPanel').hide();
			$('.deliveryAddresses ul.addressOptions').hide();
			$('.deliveryAddresses div.deliveryMethod').hide();
			$('.deliveryAddresses div.addressesNavBar > h3').hide();
			$('.deliveryAddresses #noAddressPanel').show();
			_instantAddressAddForm();
		}
		
		/* ugly way to do so, but since there are no business objects for states... */
		var isAddressChooseMode = false;
		var isAddressAddMode = false;
		
		$('#deliveryAddresses li.change').click(function() {
			isAddressAddMode = false;
			$('#deliveryAddresses li.new').removeClass('active');
			
			if (isAddressChooseMode /*$('#page_content #deliveryAddresses ul.addresses.editable li.active').length*/ ) {
				$(this).removeClass('active');
				$('#deliveryAddresses ul.addresses').removeClass('editable');
				$('div.addressesNavBar > h3').html(__("Aktualny adres dostawy:"));
			} else {
				$(this).addClass('active');
				$('#deliveryAddresses ul.addresses').addClass('editable');
				$('#noAddressPanel').hide();
				$('div.addressesNavBar > h3').html(__("Kliknij, żeby wybrać adres dostawy") + ":");
			}
			
			isAddressChooseMode = !isAddressChooseMode;
		});
		
		$('#deliveryAddresses li.new').click(function() {
			isAddressChooseMode = false;
			$('#deliveryAddresses li.change').removeClass('active');
			
			if (isAddressAddMode /*$('#page_content #noAddressPanel:visible').length*/ ) {
				$(this).removeClass("active");
				$('.deliveryAddresses #noAddressPanel').hide();
			} else {
				$(this).addClass("active");
				$('#noAddressPanel').show();
				$('#deliveryAddresses ul.addresses').removeClass('editable');
				$('div.addressesNavBar > h3').html(__("Aktualny adres dostawy:"));
			}
			
			isAddressAddMode = !isAddressAddMode;
		});
		
		// instant address editing
		$('#noAddressPanel .cancel').click(function() {
			$('.deliveryAddresses #addressChooserPanel').show();
			$('.deliveryAddresses #noAddressPanel').hide();
			$('#deliveryAddresses li.new').removeClass('active');
			isAddressAddMode = false;
		});
		
		$('#noAddressPanel .submit').click(function() {
			var addr_data = getAddressFromInstantForm();
			var callbacks = {
				"#popupYes" : function() {
					Popup.hide();
					
					/* There is no submit handler so we validate here before we go any further */
					if (!$("#instantAddress").valid()) 
						return false;
					
					/* Check if entered street is a custom street so we can handle it internally */
					if ( $("#street").attr('custom-street') ) {
						addr_data['custom_street'] = true;
					}
					
					var result = apiUsers.addUserAddress(loggedUserId, addr_data, null, true);
					if (!result) {
						Popup.loadMessage({ messageId: Popup.MESSAGES.ADDRESS_ADD_ERROR, timeout: Popup.TIMEOUT.NORMAL });
					} else {
						api.setUserAddressNo(loggedUserId, result.address_no, function(res) {
							if (res.success) {
								isAddressAddMode = false;
								$('#deliveryAddresses li.new').removeClass('active');
								
								finishInstantAddressAddition(result.address);
// 								var cartData = friscoStorage.getShallow("cartData");
// 								friscoEvents.fire('orderSetCheckoutAddress', friscoEvents.FEV_CART_DATA_CHANGED, cartData);
								friscoEvents.fire('orderMinimalValueAddressChanged', friscoEvents.FEV_ORDER_MINIMAL_VALUE_CHANGED, address_no);
							}
						}, true);
					}
					$('#deliveryAddresses ul.addresses').removeClass('editable');
					$('div.addressesNavBar > h3').html(__("Aktualny adres dostawy:"));
					
				},
				"#popupNo" : function() { 
					Popup.hide();
				},
			};
			
			if (checkIfAddressAlreadyExists(addr_data)) {
				Popup.loadMessage({ messageId: Popup.MESSAGES.ADD_ADDRESS, callbacks: callbacks });
			} else {
				callbacks["#popupYes"].call();
			}
		}.bind(this));
	};
	
	var supportNutriciaPlan = function(params) {
		var userProfile = friscoStorage.getShallow('userProfile');
		if (userProfile.savingplan_type == 14) {
			// pou chooser
			var pouAddressesObj = [{
				'pickupPointId' : 1,
				'address_no' : 'pou1',
				'address_name' : "Punkt odbioru Nutricia",
				'visible_name' : "Nutricia",
				'street' : "Bobrowiecka",
				'street_no': "6",
				'postcode' : '00728',
				'city' : 'Warszawa'
			}];
			friscoStorage.set("pouAddressesObj", pouAddressesObj);
			
			for (var a in pouAddressesObj) {
				$('#pouChooserPanel ul.addresses').jqoteapp(templates.checkout_delivery_chosen, {address : pouAddressesObj[a]});
			}
			
			// check for pouId in profile
			if (friscoStorage.getShallow('pouId') == undefined && userProfile.pickup_point_id)
				friscoStorage.setShallow('pouId', userProfile.pickup_point_id);
				
			if (params && params.order_edit && params.pouTs && params.pouId) {
				friscoStorage.setShallow('pouId', params.pouId); 
				// is this overwrite necessary?
				// coherent with what comes in in profile?
				
				friscoStorage.setShallow('oldCheckoutAddressNo', friscoStorage.getShallow('checkoutAddressNo'));
				setCheckoutAddress(0, false, true);
				
				if ( !friscoStorage.getShallow('pouTs') )
					friscoStorage.setShallow('pouTs', params.pouTs*1000);
			}
			
			// reservation: ventana + nutricia dates
			var nearestWindow = friscoStorage.get('nearestWindow') || {start_at: (new Date()).getTime() / 1000};
			var defaultDate = null; //new Date((nearestWindow.start_at + 3600*24) * 1000);
			var dayIndex = null; //friscoHelpers.timestamp2day((nearestWindow.start_at + 3600*24) * 1000);
			
			var reservationMade = null, nutriciaReservationMade = null;
			
			var _mangleReservations = function() {
				reservationMade = friscoStorage.getShallow('deliveryDate');
				nutriciaReservationMade = friscoStorage.getShallow('pouTs');
				
				if (!nutriciaReservationMade && reservationMade) {
					nutriciaReservationMade = (reservationMade.window_id + 3600*24) * 1000;
					friscoStorage.set('pouTs', nutriciaReservationMade);
				}
				
				if (nutriciaReservationMade) {
					defaultDate = new Date(nutriciaReservationMade);
					dayIndex = friscoHelpers.timestamp2day(nutriciaReservationMade);
				}
			};
			/*
			var _refreshPaymentsAfterAddressChanged = function() {
				var paymentsTypes = friscoStorage.get('paymentsTypes');
				var paymentMethod = friscoStorage.get("paymentMethod");
				renderPaymentsTypes(paymentsTypes, paymentMethod);
			}
			*/
			// open correct accordion tab depending on pou being previously set or not
			if (friscoStorage.getShallow('pouId')) 
				$('.checkoutContener .accordion').toggleClass('closed');
			
			// TODO: active pou for now is hardcoded, to rewrite when necessary api becomes available
			$('#pouChooserPanel ul.addresses li[address_no=pou1]').addClass("active");
			$('.checkoutContener .accordion').bind('click', function() {
				if ($(this).hasClass('closed'))
					$('.checkoutContener .accordion').toggleClass('closed');
				
				var _checkoutAddressFinalCbk = function() {
					_mangleReservations();
					_checkoutRedrawPayments();
				};
				
				if ($(this).hasClass('nutricia')) {
					var reservationMade = friscoStorage.getShallow('deliveryDate');
					if (reservationMade) {
						// first, cancel this reservation
 						apiReservations.deleteReservation(loggedUserId, reservationMade.reservation_id, function() {});
 						friscoStorage.del('deliveryDate');
					}
					friscoStorage.setShallow('pouId', 1);
					
					// try to restore lastly selected user address
					friscoStorage.setShallow('oldCheckoutAddressNo', friscoStorage.getShallow('checkoutAddressNo'));
					setCheckoutAddress(0, false, true, _checkoutAddressFinalCbk);
				} else if ($(this).hasClass('ventana')) {
					var deliveryAddresses = friscoStorage.getShallow("deliveryAddresses");
					var mainAddress = null;
					if (deliveryAddresses && deliveryAddresses.length) {
						mainAddress = $.map(deliveryAddresses, function(e) { return e.is_main ? e.address_no : false });
						mainAddress = $.grep(mainAddress, function(e) { return e; })[0];
					}
					var selectedCheckoutAddress = friscoStorage.get('oldCheckoutAddressNo') || mainAddress;
					console.log("supportNutriciaPlan: re-applying active address_no: " + mainAddress);
					
//  					friscoStorage.setShallow('checkoutAddressNo', selectedCheckoutAddress);
					friscoStorage.del('pouId');
					setCheckoutAddress(selectedCheckoutAddress, false, true, _checkoutAddressFinalCbk);
					friscoStorage.del('oldCheckoutAddressNo');
					
					$('#deliveryAddresses ul.addresses li').removeClass('active');
					$('#deliveryAddresses ul.addresses li[address_no='+selectedCheckoutAddress+']').addClass('active');
				}
			});
			
			if (params && params.order_edit)
				getDeliveryMethodForCart();
			else
				_mangleReservations();
			
			// embed calendar for pou reservations
			var datePickerHolder = "#pouCheckoutCalendar";
			if (lang.getCurrentLang() == "pl" ) { frisco.datepickerLanguage(); }
			
			var today = new Date(), 
				tomorrow = new Date(today.getFullYear(), today.getMonth(), today.getDate()+1),
				day = today.getDay(), hour = today.getHours(),
				reqParams = {};
				
			reqParams[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_SYNC;
			
			if (params && params.pouTs) {
				defaultDate = new Date(params.order_edit ? params.pouTs * 1000 : params.pouTs);
				dayIndex = friscoHelpers.timestamp2day(params.order_edit ? params.pouTs * 1000 : params.pouTs);
				$("#pouReservationChooser .reservationsList .dayPicker").html(friscoHelpers.timeWindowToDayPart(new Date(params.order_edit ? params.pouTs : params.pouTs/1000), true));
				
			} else {
				var nearestWindow = friscoStorage.get('nearestWindow') || {start_at: (new Date()).getTime() / 1000};
				defaultDate = new Date(nearestWindow.start_at * 1000);
			}
			reqParams[friscoStorage.PARAM_OTHER_DATA] = { month: defaultDate.getMonth()+1, year : defaultDate.getFullYear() };
			friscoStorage.getFresh('daysList', reqParams);
			
			$(datePickerHolder).datepicker({
				"onChangeMonthYear": function(year, month, inst) {
					$('#'+inst.id).datepicker('disable');
					reqParams[friscoStorage.PARAM_OTHER_DATA] = { month: month, year : year };
					friscoStorage.getFresh('daysList', reqParams);
					$('#'+inst.id).datepicker('enable');
				},
				// filtering available days
				"beforeShowDay": function(date) {
					var dayIndex = friscoHelpers.timestamp2day(date.getTime());
					var avDayList = friscoStorage.getShallow('daysAvList');
					
					// filter out too close days
					if (dayIndex == friscoHelpers.timestamp2day(today))
						return [0]; // disable today
					
					if (day >= 1 && day <= 5 && hour >= 15) { // mo-fr
						if (dayIndex == friscoHelpers.timestamp2day(tomorrow))  {
							return [0]; // disable next day
						}
					} else if (day == 6) { // sat
						// nothing?
					} else if (day == 0 && hour >= 11) { // sun
						if (dayIndex == friscoHelpers.timestamp2day(tomorrow))  {
							return [0]; // disable next monday
						}
					}
					
					if (avDayList[dayIndex]) {
						return [1];
					}
					return [0];
				},
				"onSelect": function(dateText, instance) {
					$("#pouReservationChooser .reservationsList .dayPicker").html(friscoHelpers.timeWindowToDayPart(new Date(instance.selectedYear, instance.selectedMonth, instance.selectedDay).getTime()/1000, true));
					friscoStorage.set('pouTs', new Date(instance.selectedYear, instance.selectedMonth, instance.selectedDay).getTime());
					behaveDueToCart(friscoStorage.getShallow('cartData'));
				},
				"defaultDate": defaultDate,
				"calculateWeek": $.datepicker.iso8601Week,
				"firstDay" : 1,
				"minDate" : 0,
				"maxDate" : "+2m"
			});
			
			$('#page_content #pouReservationChooser .calendar').show();
		} 
	};
	
	var loadCheckout = function(prevState, prevSubState, parameters) {
		DBG('CHECKOUT', 'Init');
		
		if (!loggedUserId) {
			frisco.loginOrCheckoutPopup();
			if (_gaq && _gaq.push)
				_gaq.push(['_trackPageview', '/niezalogowany-warstwa-opcji']);
			return;
		}

		// OCTOBERcontest
		var ribbon = Ribbon.get("voucher-info");
		if (ribbon.length) {
			ribbon.find("p span").hide();
			friscoEvents.hook('octoberContestCheckout', friscoEvents.FEV_ON_STATE_ENTER, function() {
				ribbon.find("p span").show();
			}, {type: friscoEvents.FEV_TYPE_ONETIME});
		}

// 		$("#rightNavigation").html("");
		$("body").addClass("order-edit-or-checkout");
		$("body").addClass("notfixed");
		if (catalog) { catalog.disable(); }
		Sidebar.hide();
		
		$('#page_content').html('');
		Loader.load(Loader.TYPE.COVER, "div#page_content", "ładuję dane, zaczekaj chwilę...");
		
		var cartData = null, userProfile = null, paymentsTypes = null, oldReservation = null, curPrices = null, paymentMethod = null;
		var params = {}; // params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_SYNC;
		
		var _loadData = function() {
			pub.getBalance();
			
			DBG('CHECKOUT', 'getting userProfile');
			userProfile = friscoStorage.getShallow('userProfile');
			
// 			DBG('CHECKOUT', 'paymentsTypes check');
// 			paymentsTypes = friscoStorage.getFresh('paymentsTypes');
			
// 			DBG('CHECKOUT', 'windowsList check');
// 			var windowsList = friscoStorage.get('windowsList');
			
// 			DBG('CHECKOUT', 'oldReservation getting');
// 			oldReservation = friscoStorage.get('deliveryDate');
			
			DBG('CHECKOUT', 'curPrices getting');
			params = {}; params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function(data) {
				curPrices = data; 
				_checkoutTemplateAction();
			};
			friscoStorage.getFresh('deliveryPrices', params);
		};
		
		var _cartTest = function() {
			// if cart bound to order, load order stuff
			if (cartData && cartData.order_id && cartData.order_year) {
				return core.setState('order', null, {'orderId': cartData.order_id, 'year': cartData.order_year});
			}
			
			if (!prevState && !cartData || !cartData.entries || cartData.entries.length == 0) {
				Popup.loadMessage({ messageId: Popup.MESSAGES.EMPTY_CART, timeout: Popup.TIMEOUT.NORMAL });
				Loader.hide();
				return loadDefaultState();
			}
			
			_loadData();
		};
		
		DBG('CHECKOUT', 'getting cartData');
		if (prevState) {
			cartData = friscoStorage.getShallow('cartData');
			_cartTest();
		} else {
			params = {}; params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function(data) {
				cartData = data;
				_cartTest();
			};
			friscoStorage.getFresh('cartData', params);
		}
		
		var _checkoutTemplateAction = function() {
		DBG('CHECKOUT', 'template preparation');
		
		if (curPrices != null)
			$('#page_content').jqoteapp(templates.checkout_content, {cart: cartData, main_address: userProfile.delivery_address_no, curDeliveryPrice: parseFloat(curPrices.min), profile: userProfile });
		else
			$('#page_content').jqoteapp(templates.checkout_content, {cart: cartData, main_address: userProfile.delivery_address_no, curDeliveryPrice: 25, profile: userProfile });
		
		bindDeliveryMinimalPrice();
		addressesEditor();
		
		Loader.hide();
		
		// Load dontForget section
		/* Disabled, but kept for future
		var remove = _.map(cartData.entries, function (item) { return item.product.product_id});
		FabloConfig.showRecentlyPurchased(loggedUserId, $("#dontForget ul > div").eq(0), 10, remove, undefined, 10, function(res){
			$("#dontForget").show();
		});
		FabloConfig.showRecentlyVisited(loggedUserId, $("#dontForget ul > div").eq(1), remove, undefined, 10);
		*/
		
		// delivery date changing
		$('#page_content a.changeCheckoutDelivery').click(function() {
				if(!$('#page_content #reservationChooser .calendar:visible').length) {
					$('#page_content #reservationChooser .calendar').show("fast");
					renderDatePicker(false);
					$(this).hide();
				} else {
					$('#page_content #reservationChooser .calendar').hide();
					$(this).show();
				}
		});
		
		// this is fired from addresses editor anyways, so it makes no sense to double it from here
// 		_checkoutHideShowReservation();
// 		_checkoutRedrawPayments();
		
		// voucher editing
		$('#page_content .typeVoucher button').click(function() {
			addCheckoutVoucher();
			if ($(this).siblings("input#code").val().length == 0){
				if (_gaq && _gaq.push){
					_gaq.push(['_trackEvent','Checkout','Voucher','Pusty',0]);
				}
			}
		});
		$('#page_content .typeVoucher > input#code').keyup(function() {
			var $this = $(this);
			if ($this.val().length >= 3){
				$('#page_content .typeVoucher button').addClass("active");
			} else {
				$('#page_content .typeVoucher button').removeClass("active");
			}
		});
		
		$('#page_content .voucherChooser .cancelVoucher').click(function() {
			cancelCheckoutVoucher();
		});
		
		// render sliders
		renderCheckoutSliders();
		
		// bind sliders to refresh func
		$('.buttons a.checkout').click(function(e) { storeCheckout(e) });
		
		renderDatePicker(false);
		
		// nutricia program delivery content
		supportNutriciaPlan({
			'pouId' : friscoStorage.getShallow('pouId'), 
			'pouTs' : friscoStorage.getShallow('pouTs')}
		);
		
		friscoEvents.hook('checkoutView', friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, function() { 
			renderCheckoutSliders(); 
			renderDatePicker(false); 
		});
		
		bindCartPriceGuard();
		behaveDueToCart(cartData); //ugly hack to hide undeliverable products list when user has no addresses defined
		
		/* Description counter */
		$('textarea#description').keyup(function() {
			$('#descriptionCounter').html( $(this).val().length );
			if ($(this).val().length > 254 )
					$('#descriptionCounter').css('color', 'red');
			else
				$('#descriptionCounter').css('color', '');
		});
		
		frisco.recheckUserReservations();
		
		// Criteo
		if (frisco.useTrackingCode("criteo"))
		try {
			var criteo_products = [];
			for (i in cartData.entries) {
				var orderItem = cartData.entries[i].product;
				criteo_products.push({id: orderItem.product_id, price: (orderItem.price_gross / 100).toFixed(2), quantity: cartData.entries[i].amount});
			}
			window.criteo_q = window.criteo_q || [];
			window.criteo_q.push(
				{ event: "setAccount", account: 4936 },
				{ event: "setCustomerId", id: loggedUserId },
				{ event: "setSiteType", type: "d" },
				{ event: "viewBasket", user_segment: "1", item: criteo_products}
			);
		} catch (e) {}
		
		// Sociomantic
		if (frisco.useTrackingCode("sociomantic"))
		try {
			var sociomantic_products = [];
			for (i in cartData.entries) {
				var orderItem = cartData.entries[i].product;
				sociomantic_products.push({identifier: orderItem.product_id, amount: (orderItem.price_gross / 100).toFixed(2), currency: 'PLN', quantity: cartData.entries[i].amount});
			}
			sociomantic.sonar.adv['frisco-pl'].clear();
			if (loggedUserId) window.customer = {identifier: loggedUserId};
			window.basket = {products: sociomantic_products};
			sociomantic.sonar.adv['frisco-pl'].track();
		} catch (e) {}
		
		// Google Tag Manager for SALESMORE
		var gtm_products = [];
		for (i in cartData.entries) {
			var orderItem = cartData.entries[i].product;
			gtm_products.push({sku: orderItem.product_id, name: orderItem.full_name, price: (orderItem.price_gross / 100).toFixed(2), quantity: cartData.entries[i].amount});
		}
		var gtmdata = {
			'event': 'info', 
			'pageTitle': 'koszyk',
			'transactionTotal': (cartData.price_gross / 100).toFixed(2),
			'transactionProducts': gtm_products,
		};
		sendGTMEvent(gtmdata);
		
		}; 
	};

	var getDeliveryMethodForCart = function() {
		var deliveryReservation = friscoStorage.get('deliveryDate');
		var windowId = deliveryReservation  == null ? null : ( typeof deliveryReservation == "object" ? deliveryReservation.start_at : deliveryReservation);

		var method = api.getDeliveryMethodForUserAddressedCart(loggedUserId, friscoStorage.get('checkoutAddressNo'), windowId, null, true);
		friscoStorage.set('deliveryMethod', method);
		
		DBG('getDeliveryMethodForCart', method);
		return method;
	};

	var finishInstantAddressAddition = function(address) {
		friscoStorage.set("checkoutAddressNo", address.address_no);
		renderOrderDeliveryAddresses([address], true);
// 		fillDeliveryAddress(getAddressFromInstantForm());
// 		setCheckoutAddress(address.address_no, true);
		
		friscoStorage.getFresh("deliveryAddresses");
		friscoStorage.getFresh('deliveryMethod');

		$.cookie('postcode', friscoHelpers.formatPostCode(address.postcode), { path : '/', expires: 762 });
		frisco.setUsersPostcode();
		
		$('.deliveryAddresses #noAddressPanel').hide();
		$('.deliveryAddresses #addressChooserPanel').show();

		$('.deliveryAddresses ul.addressOptions').show();
		$('.deliveryAddresses div.deliveryMethod').show();
		$('.deliveryAddresses div.addressesNavBar > h3').show();

		$('#addressChooserPanel #deliveryAddresses ul.addresses').removeClass('editable');
		$('div.addressesNavBar > h3').html(__("Aktualny adres dostawy:"));

        if (friscoStorage.getShallow('deliveryAddresses').length == 0) {
            friscoStorage.setShallow('deliveryAddresses', [address]);
        }
	};

	// common replacement for loadTermDatepicker and renderCheckoutCalendar, which were nearly the same
	var renderDatePicker = function(launchedFromSidebar) {
		var lockedSidebar = !frisco.currentPostcode || core.getCurrentState() == 'order' || core.getCurrentState() == 'checkout';
		
		if (!loggedUserId) {
// 			Popup.loadMessage({ messageId: Popup.MESSAGES.CALENDAR_NOT_AVAILABLE, timeout: Popup.TIMEOUT.NORMAL });
			if (BrowserDetect.browser == "Explorer" && parseInt(BrowserDetect.version) < 9) {
			} else { frisco.loginPopup(); }
			return;
		}
		
		if (!_checkoutHideShowReservation())
			return;
		
		if (checkoutCalendarStatus == DATE_PICKER_SLIDER_STATUS_OPENED) {
			//return;
		}
		
		var params = {}; 
		params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function() { renderDatePicker(launchedFromSidebar) };
		DBG('CALENDAR', 'Getting made reservation!');
		
		params = {}; 
// 		params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function() { renderDatePicker(launchedFromSidebar) };
		params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_SYNC;
		var reservationMade = friscoStorage.get('deliveryDate', params);

// 		if (undefined === reservationMade) { return; }
		DBG('CALENDAR', 'Got reservationMade', reservationMade);
 
		// if we're not in checkout/order, render sidebar calendar
		if (!lockedSidebar) {
			var content = $.jqote(templates.delivery_sidebar, {});
			Sidebar.render('calendar', content);
			Sidebar.show(); // check for visibility is in called method code
			
			// click function with windowId placeholder
			$(content).find(".delivery .save").click(
				function() {
					DBG('CALENDAR', "Clicked calendar reservation save");
					reservationSwitch($(content).find(".summary span.deliveryDateHolder").attr("window_id"));
				}
			);
		}
		
		var cartData = friscoStorage.getShallow('cartData');
		if (cartData != null) {
			$('.subtotal p.price').html(friscoHelpers.parsePrice(cartData.human_price_gross, {currency: true}));
		}

		var nearestWindow = friscoStorage.get('nearestWindow') || {start_at: (new Date()).getTime() / 1000};
		var defaultDate = new Date(nearestWindow.start_at * 1000);
		var dayIndex = friscoHelpers.timestamp2day(nearestWindow.start_at * 1000);

		if (reservationMade) {
			if(reservationMade.window_id) {
				defaultDate = new Date(reservationMade.window_id * 1000);
				dayIndex = friscoHelpers.timestamp2day(reservationMade.start_at * 1000);
			}
		}

		params = {};
		params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_SYNC;
		params[friscoStorage.PARAM_OTHER_DATA] = { month: (defaultDate.getMonth() + 1), year : defaultDate.getFullYear() };
		friscoStorage.getFresh('daysList', params); // wtf?!
		
		var datePickerHolder;
		if (lockedSidebar) datePickerHolder = "#checkoutCalendar";
		else datePickerHolder = "#dateOfDelivery";
		
		if (lang.getCurrentLang() == "pl" ) { frisco.datepickerLanguage(); }
		
		$(datePickerHolder).datepicker({
			"onChangeMonthYear": function(year, month, inst) {  
				$('#'+inst.id).datepicker('disable');
				var params = {};
				params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_SYNC;
				params[friscoStorage.PARAM_OTHER_DATA] = { month: month, year : year };
				var daysList = friscoStorage.getFresh('daysList', params);

				if (daysList.earliest_free_window && daysList.earliest_free_window > 0) {
					$(datePickerHolder).datepicker("setDate", new Date(daysList.earliest_free_window * 1000));
					renderCalendarHoursForDay(friscoHelpers.timestamp2day(daysList.earliest_free_window * 1000));
				} else {
					renderCalendarHoursForDay(0);
				}
				
				$('#'+inst.id).datepicker('enable');
			},
			// filtering available days
			"beforeShowDay": function(date) {
				var dayIndex = friscoHelpers.timestamp2day(date.getTime());
				var avDayList = friscoStorage.getShallow('daysAvList');
				if (avDayList[dayIndex]) {
					return [1];
				}
				return [0];
			},
			"onSelect": function(dateText, instance) {
				renderCalendarHoursForDay(friscoHelpers.timestamp2day(new Date(instance.selectedYear, instance.selectedMonth, instance.selectedDay)) );
			},
			"defaultDate": defaultDate,
			"calculateWeek": $.datepicker.iso8601Week,
			"firstDay" : 1,
			"minDate" : 0,
			"maxDate" : "+2m"
		});
		
		renderCalendarHoursForDay(dayIndex);
		
// 		$('#page_sidebar div.delivery').lionbars();
		$('#page_sidebar div.delivery').mCustomScrollbar({
			verticalScroll: true,
			horizontalScroll: false,
			contentTouchScroll: true,
			mouseWheelPixels: "auto",
			scrollInertia: 30,
			scrollButtons: {
				enable: false
			},
			advanced: {
				normalizeMouseWheelDelta: true,
				updateOnContentResize: true
			}
		});
		
		if (lockedSidebar) {
			if (!frisco.currentPostcode) {
				$('#page_content #reservationChooser').hide();
			} else {
				$('#page_content #reservationChooser').show();
			}
			if (!reservationMade) {
				if (core.getCurrentState() != 'order') {
					$('#page_content #reservationChooser .calendar').show();
					$('#page_content a.changeCheckoutDelivery').hide();
				}
				$('#checkoutCalendar .ui-state-active').addClass("today"); // needed?
			}
		} else {
			datePickerStatus = DATE_PICKER_SLIDER_STATUS_OPENED;
			$(content).find(".delivery .close").click(function() {
				datePickerStatus = DATE_PICKER_SLIDER_STATUS_CLOSED;
			});
			
			friscoEvents.hook('termDatePicker', friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, refreshTermPicker);
			refreshTermPicker(reservationMade);
		}
	}

	var renderCalendarHoursForDay = function (dayIndex) {
		var lockedSidebar = core.getCurrentState() == 'order' || core.getCurrentState() == 'checkout';
		
		// split into morning, noon, evening groups
		var wgMorning = [];
		var wgNoon = [];
		var wgEvening = [];

		var params, wList, dList;
		
		
// 		params = {};
// 		params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_SYNC;
// 		params[friscoStorage.PARAM_OTHER_DATA] = { month: (new Date().getMonth() + 1), year : new Date().getFullYear() };
		dList = friscoStorage.getShallow('daysList'); // here we force load of the given day , params
		
		var avDayList = friscoStorage.getShallow('daysAvList');
		if (avDayList[dayIndex]) {
			params = { };
			params[friscoStorage.PARAM_TYPE]       = friscoStorage.TYPE_SYNC;
			params[friscoStorage.PARAM_OTHER_DATA] = { offsetStart : new Date(avDayList[dayIndex].day_ts * 1000), offsetEnd : new Date((avDayList[dayIndex].day_ts + 24*3600 - 1)* 1000) };
			wList = friscoStorage.getFresh('windowsList', params); // here we force load of the given day , params
		}
		
		var wDaysList = friscoStorage.getShallow('windows_DaysList');
		var wDays2Window = friscoStorage.getShallow('windows_Days2Window');
		var wWindows = friscoStorage.getShallow('windows_Windows');
		
		if (wDaysList == null || wDays2Window == null || wWindows == null) {
			console.error('[ERR][renderCalendarHoursForDay] Got no window data, probably getter didn\'t manage to get registered so far due to race condition.');
			return;
		}
		
		var rowsCount;
		
		if (typeof wDays2Window[dayIndex] != 'undefined') {
// 			console.log("procesing for day: " + dayIndex);
			$.each(wDays2Window[dayIndex], function(index) {
				var stamp = wDays2Window[dayIndex][index];
				var date = friscoHelpers.adjustDateToGMT(new Date(stamp * 1000));
// 				console.log("stamp: " + stamp + " date: ", date);
				
				if((date).getHours() < 12) {
					wgMorning.push(stamp);
				} else if((date).getHours() < 18) {
					wgNoon.push(stamp);
				} else {
					wgEvening.push(stamp);
				}
			});
			rowsCount = Math.max(wgMorning.length, wgNoon.length, wgEvening.length);
		} else {
			rowsCount = 5;
		}
		
		var feed = [wgMorning, wgNoon, wgEvening];
		if (lockedSidebar) $("#page_content #checkoutHours table.timeOfDelivery tbody").html('');
		else Sidebar.getRenderedContent().find("table.timeOfDelivery tbody").html('');
		
		var userProfile = friscoStorage.getShallow('userProfile');
		var isFirstShopping = userProfile.trial_id && !userProfile.trial_status;
		
		// ugly, but got retarted templates ngine xD
		for(var i = 0; i < rowsCount; i++) {
			var row = "<tr>";
			for(var j = 0; j < feed.length; j++) {
				
				var activeClass = "";
				var happyHourClass = "";
				
				if(typeof feed[j][i] != 'undefined') {
					switch (wWindows[feed[j][i]].status) {
						case 1: activeClass="open"; break;
						case 2: activeClass="full"; break;
						case 4: activeClass="delayed"; break;
						case 5: activeClass="closed"; break;
						case 6: activeClass="closed"; break;
					}
					
					if (wWindows[feed[j][i]].happyhour && !isFirstShopping)
						happyHourClass = "happyhour";
					
					if ((activeClass=="closed")||(activeClass=="full")) {
						row += "<td><div><span class=\"calendarWindowPicker " + activeClass + " "+happyHourClass+"\" window_id=\"" + feed[j][i] + "\">"
						+ friscoHelpers.parseHour(wWindows[feed[j][i]].windowIndex) + "</span></div></td>";
					} else {
						row += "<td><div><a class=\"calendarWindowPicker " + activeClass + " "+happyHourClass+"\" window_id=\"" + feed[j][i] + "\" href=\"#\">"
						+ friscoHelpers.parseHour(wWindows[feed[j][i]].windowIndex) + "</span></div></td>";
					}
				} else {
					row += "<td> - </td>";
				}
			}
			row += "</tr>";
			if (lockedSidebar) $("#page_content #checkoutHours table.timeOfDelivery tbody").append(row);
			else Sidebar.getRenderedContent().find("table.timeOfDelivery tbody").append(row);
		}
		
		if (isFirstShopping) $("div.happyHours").hide();
		else $("div.happyHours").show();
			
		// binding
		var element;
		if (lockedSidebar) element = "#page_content #checkoutHours table.timeOfDelivery tbody a.calendarWindowPicker";
		else element = "#page_sidebar table.timeOfDelivery tbody a.calendarWindowPicker";
		$(element).mouseover(function() {
			if ( $(this).hasClass("closed") && !$(this).siblings("").length  ) { 
				$(this).parent().append("<div class=\"tip\"><span class=\"arrow\"></span>" + __("Ilość rezerwacji na ten termin została wyczerpana.") + "</div>");
			}
			$(this).siblings("div.tip").show();
		});
		
		$(element).mouseout(function() {
			if ($(this).hasClass("closed")) $(this).siblings("div.tip").hide();
			if ($(this).hasClass("happyhour")) $(this).siblings("div.tip").hide();
		});
		
		$(element).click(function(eventObj) {
			if( $(this).hasClass("closed")) { return false; }
			
			var obj = $(eventObj.currentTarget);
			if (lockedSidebar) $("#page_content #checkoutHours table.timeOfDelivery a.active").removeClass('active');
			else $("#page_sidebar table.timeOfDelivery tbody a.active").removeClass('active');
			obj.addClass('active');
			var windowId = obj.attr("window_id");
			var windowIndex = wWindows[windowId].dayIndex + ", " + wWindows[windowId].windowIndex;
			
			reservationSwitch(windowId);
			if (lockedSidebar) {
				$('#page_content #reservationChooser .calendar').hide('medium');
				$('#page_content a.changeCheckoutDelivery').show();
			} else {
				$('#page_sidebar #reservationChooser .calendar').hide('medium');
				$('#page_sidebar a.changeCheckoutDelivery').show();
			}
			return false;
		});
		
		if (!lockedSidebar) {
			Sidebar.getRenderedContent().find("table.timeOfDelivery tbody a.calendarWindowPicker").click(function(eventObj) {
				var obj = $(eventObj.currentTarget);
				Sidebar.getRenderedContent().find("table.timeOfDelivery tbody a.active").removeClass('active');
				obj.addClass('active');
				var windowId = obj.attr("window_id");
				reservationSwitch(windowId);
				
				/* Now if someone goes out of the region close the Sidebar */
				if (Sidebar.isVisible()) {
					$('#page_sidebar').mouseleave(function() {
						var t=setTimeout(function() {
							Sidebar.hide(); 
						},1000);
						
						$('#page_sidebar').mouseenter(function() {
							if (t) clearTimeout(t);
						});
					});
				}
				
				renderCheckoutSliders();
				return false;
			});
		}
	};
	
	var getAddressFromInstantForm = function() {
		var postcode 	= $('#instantAddress input[name=postCode_0]').val()+''+$('#instantAddress input[name=postCode_1]').val();
		var flatNo   	= $('#instantAddress input[name=apartment_number]').val();
		var description = $('#instantAddress textarea[name=description]').val();

		var addressObj = {
			street: $('#instantAddress input[name=street]').val(),
			street_no: $('#instantAddress input[name=number]').val(),
			flat_no: flatNo ? flatNo : '',
			city: $('#instantAddress input[name=city]').val(),
			postcode: (postcode.length == 5) ? postcode : null,
			description: description
		};
		console.log('CHECKOUT', 'User entered address', addressObj);
		return addressObj;
	};

	var _instantAddressAddForm = function() {
		$("#instantAddress").validate({
			debug : true,
			rules : {
				street: {
					required: true,
					fromselect: true
				},
				city: {
					required: true
				},
				postCode_0: {
					required: true
				},
				postCode_1: {
					required: true
				},
				number: {
					required: true
				},
				description: {
					maxlength: 254
				}
			},
			messages : {
				street : {
					required : __("Ulica jest wymagana"),
					fromselect: __('Nie znamy tej ulicy.')+' <a href="#" id="streetWarningYes">'+__('Kliknij by potwierdzić nazwę.'),
				},
				number : {
					required : __("Numer ulicy jest wymagany")
				},
				postCode_0 : {
					required : __("Kod pocztowy jest wymagany")
				},
				postCode_1 : {
					required : __("Kod pocztowy jest wymagany")
				},
				city : {
					required : __("Miasto jest wymagane")
				},
				description : {
					maxlength: __('Dodatkowe informacje mogą mieć maksymalnie 254 znaki'),
				}
			},
			errorPlacement: function(error, element) {
					if ( $(element).attr('id') == 'register_postCode_0') {
							error.insertAfter( $('register_postCode_1').next() );
					} else {
						error.insertAfter(element);
					}
			},
			errorElement : "p",
			showErrors: function(errorMap, errorList) {
				var errorListSize = errorList.length;
				this.defaultShowErrors();

				if(errorListSize > 0) {
					$('p.error').each(function() {
						if($(this).closest('div.tooltip').size() == 0) {
							$(this).wrap('<div class="tooltip"></div>');
							$(this).parent(".tooltip").prepend('<span class="icon"></span>');
							$(this).parent(".tooltip").append('<span class="arrow"></span>');
							$(this).parent(".tooltip").css('width', $(this).width() );
						}
					});
				}
			},
			highlight : function(element, errorClass) {
				$(element).addClass(errorClass);
			},
			unhighlight : function(element, errorClass) {
				$(element).removeClass(errorClass);
				$(element).closest("li").find(".tooltip").remove();
			}
		});

		bindAddressCompleter('checkout_instant_address_completer',
			$("#instantAddress input[name=street]"), // street
			[$("#instantAddress input[name=postCode_0]"), $("#instantAddress input[name=postCode_1]")], // postcode
			$("#instantAddress input[name=city]"), // city
			$("#instantAddress input[name=number]") // street no
		);
	};

	/**
	* setting checkout active address
	**/
	var setCheckoutAddress = function(address_no, newone, pou, callback) {
		// clear address
		if (!address_no && !pou) {
			friscoStorage.setShallow('checkoutAddressNo', null);
			$('#deliveryAddresses ul.addresses.editable li').removeClass('active');
			friscoStorage.setShallow('orderDeliveryPrice', null);
			fillDeliveryAddress(null);
			return;
		}

		if (!pou) {
			hideCheckoutAddressesBox();

			friscoStorage.set('checkoutAddressObj', null);
			var cur_address_no = friscoStorage.getShallow('checkoutAddressNo');
			var deliveryAddresses = friscoStorage.get('deliveryAddresses');
			if (typeof deliveryAddresses == 'undefined') {
				return;
			}
			var i = 0;
			for (; i < deliveryAddresses.length; i++) {
				if(deliveryAddresses[i].address_no == address_no) {
					break;
				}
			}
			frisco.setUsersPostcode();
		}
		
		$('#deliveryAddresses ul.addresses li').removeClass('active');
		$('#deliveryAddresses ul.addresses li[address_no=' + address_no + ']').addClass('active');
	//  $('#deliveryAddresses ul.addresses.editable').removeClass('editable');
		friscoStorage.setShallow('checkoutAddressNo', address_no);

		var params = {}; params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = behaveDueToCart;
		if (pou || !address_no || cur_address_no != address_no) {
			api.setUserAddressNo(loggedUserId, address_no, function(data) {
				friscoStorage.getFresh("cartData", params);
				friscoEvents.fire('orderMinimalValueAddressChanged', friscoEvents.FEV_ORDER_MINIMAL_VALUE_CHANGED, address_no);
				if (callback)
					callback(data);
			}, true); // force the change
		} else {
			friscoStorage.getFresh("cartData", params);
			friscoEvents.fire('orderMinimalValueAddressChanged', friscoEvents.FEV_ORDER_MINIMAL_VALUE_CHANGED, address_no);
		}
		
		if (!pou) {
			fillDeliveryAddress(deliveryAddresses[i]);
			renderDatePicker();
			
// 			if (newone) {
				_checkoutHideShowReservation(true);
				_checkoutRedrawPayments();
// 			}
		}
		
		return false;
	};

	var fillDeliveryAddress = function(addressObj) {
		$('.deliveryAddresses .currentAddress address').html('');
		if (!addressObj) {
			$('#deliveryAddresses ul.addresses').addClass('editable');
			$('div.addressesNavBar > h3').html(__("Kliknij, żeby wybrać adres dostawy") + ":");
		} else {
			friscoStorage.set('checkoutAddressObj', addressObj);
			$('#deliveryAddresses ul.addresses').removeClass('editable');
			$('.currentAddress address').jqoteapp(templates.checkout_delivery_chosen, {address : addressObj});
			$('div.addressesNavBar > h3').html(__("Aktualny adres dostawy:"));
		}
	};
	
	// updating delivery cost
	var bindDeliveryPrice = function(refreshing) {
		var oldValue = $('.checkoutCheckbox .deliveryCost .price:not(.protected)').html();
		var newValue = friscoStorage.getFresh('orderDeliveryPrice');
// 		cart = friscoStorage.get('cartData');
// 		$('.checkoutCheckbox .deliveryCost .price:not(.protected)').html(friscoHelpers.priceFormat(friscoStorage.get('orderDeliveryPrice')));
// 		$('.checkoutCheckbox .totalvalue .price:not(.protected)').html(friscoHelpers.priceFormat(cart.price_gross + friscoStorage.get('orderDeliveryPrice')));
		checkoutUpdateTotalValue();
		
		if (refreshing &&  oldValue != newValue) {
			// sexy highlight
			$('.checkoutCheckbox .deliveryCost .price').fadeOut('fast',
				function() {
					$('.checkoutCheckbox .deliveryCost .price').fadeIn('fast');
				}
			);
		}
	};

    // checkout cost observer
    var checkoutDeliveryPriceGuard = function(eventObj) {
    	bindDeliveryPrice(true);
    };

// 	friscoEvents.hook('checkoutDeliveryPriceGuard', friscoEvents.FEV_ORDER_DELIVERY_PRICE_CHANGED, checkoutDeliveryPriceGuard.bind(this));

    var getDayIndex = function(dateObj) {
    	return friscoHelpers.getNamedDayOfWeek(dateObj.getDay()) + ", " + friscoHelpers.numCplTo2(dateObj.getDate().toString())
		 + ". " + friscoHelpers.getNamedMonth(dateObj.getMonth() + 1);
    };

	var storeCheckout = function(event) {
		if ($(event.target).hasClass('disabled'))
			return;
		
		$('.buttons a.checkout').addClass('disabled');
		
		DBG('CHECKOUT_SAVING', 'Collecting checkout data');
		
		//
		// COLLECTING DATA
		//
		var deliveryAddress = {};
		var addressNo = null, method = null, deliveryDate = null;
		
		var pouId = friscoStorage.getShallow('pouId');
		var userProfile = friscoStorage.getShallow('userProfile');
		if (userProfile.savingplan_type == 14 && pouId != undefined) {
			addressNo = 0;
			deliveryDate = friscoStorage.getShallow('pouTs');
			method = {
				delivery_method: {'delivery_method_id': FRISCO.DELIVERY_TYPE_POU, name: "pou"}, 
				unallowed_products: [],
				unallowed_reasons: []
			};
		} else {
			// get delivery date
			var deliveryDate  = friscoStorage.getShallow('deliveryDate');
				
			// get delivery address
			if ($('#deliveryAddresses ul.addresses li.active')) {
				addressNo = friscoStorage.getShallow('checkoutAddressNo');
			}
			
			// get delivery method
			method = friscoStorage.get('deliveryMethod');
		}
		
		// get payment type
		var paymentType = friscoStorage.getShallow('paymentMethod');
		if (!paymentType) 
			paymentType = $('.checkoutContener .paymentMethods input:checked').val();
		
		// get voucher value
		var voucherId = $('.checkoutContener .enteredVoucher code').html();
	
		//
		// all fields validation
		//
		var validated = true;
		var errors = {};
		
		if (method && method.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_VAN) {
			if (!deliveryDate) {
				validated = false;
				errors.deliveryDate = 1;
			}
		}
		
		if (addressNo == undefined) {
			validated = false;
			errors.addressNo = 1;
		}
		
		if (parseInt(paymentType, 10) == paymentType) {
			paymentType = null;
		}
		if (!paymentType || typeof paymentType != 'string') {
			validated = false;
			errors.paymentType = 1;
		}
		
		if (!validated) {
			var list = [];
			if (errors.deliveryDate) {
					list.push(__('wybierz datę dostawy'));
			}
			if (errors.addressNo) {
				list.push(__('ustal adres dostawy'));
				if(_gaq && _gaq.push){
					_gaq.push(['_trackEvent','Checkout','Walidacja','Adres']);
				}
			}
			if (errors.paymentType) {
				list.push(__('wybierz rodzaj płatności'));
				if(_gaq && _gaq.push){
					_gaq.push(['_trackEvent','Checkout','Walidacja','Platnosc']);
				}
			}
			Popup.load({ content: '<div class="text">' + __('Nie udało się zapisać zamówienia. Popraw dane: ') + list.join(', ') + '</div>', size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING, timeout: Popup.TIMEOUT.NORMAL });
			$('.buttons a.checkout').removeClass('disabled');
			return;
		}
		
		var cbk = function(data, errors) {
			if (!data) {
				$('.buttons a.checkout').removeClass('disabled');
				Loader.hide();
				
				if (!errors) {
					Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_PLACE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
				} else {
					for (var errorIndex = 0; errorIndex < errors.length; errorIndex++) {
						var error = errors[errorIndex];
						switch (error) {
							case 'reservation':
								Popup.loadMessage({ messageId: Popup.MESSAGES.RSV_UNAVAILABLE, timeout: Popup.TIMEOUT.NORMAL });
								break;
							case 'vanOnlyException':
								Popup.loadMessage({ messageId: Popup.MESSAGES.UNDELIVERABLE_PRODUCTS, timeout: Popup.TIMEOUT.NORMAL });
								break;
						}
					}
				}
			} else {
				// ugly force refresh
				friscoStorage.getFresh('userProfile');
				friscoStorage.getFresh('savingPlan');
// 				friscoStorage.getFresh('deliveryDate');
				friscoStorage.setShallow('deliveryDate', null);
// 				friscoEvents.fire('frisco_storage_delivery_date_setter',friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, null);
				//pub.getBalance();
				
				if (userProfile.savingplan_type == 14) {
					friscoStorage.del('pouId');
					friscoStorage.del('pouTs');
				}
				
// 				Loader.hide();
// 				
				friscoEvents.fire('cart', friscoEvents.FEV_CART_INVALIDATED, null);
				friscoStorage.set('orderList', undefined);
				if (data.html && typeof data.html == 'object' && data.html.type && ( data.html.type == 'form' || data.html.type == 'redirect') ) {
					Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_PLACED_TO_PAYMENT, timeout: Popup.TIMEOUT.LONG });
					// lil delayed execution
					(function(html) {
						var timeCbk = function() {
							Loader.hide();
							_renderPaymentTransition(html);
						};
						setTimeout(timeCbk, 300);
					})(data.html);
				} else {
					Loader.hide();
					if (data.html && data.html.account_no && data.html.transaction_title)
						core.setState('checkoutFinal', null, {orderId: data.order_id, year: data.order_year, wire_accountno: data.html.account_no, wire_title: (data.html.transaction_title.replace(/\//g, '_')) });
					else
						core.setState('checkoutFinal', null, {orderId: data.order_id, year: data.order_year});
					
					if (data && data.order_id)
						updateHomeDeliveryOrderBox({'force': true});
				}
			}
		};
		
		var callbacks = {
			"#popupYes" : function() { 
				Popup.hide();
				
				Loader.load(Loader.TYPE.COVER, "div#page_content", "zapisuję dane, zaczekaj chwilę...");
				if (method.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_POU)
					api.createOrder(paymentType, addressNo, pouId, deliveryDate, voucherId, cbk);
				else if (method.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_VAN) 
					api.createOrder(paymentType, addressNo, null, deliveryDate.reservation_id, voucherId, cbk);
				else
					api.createOrder(paymentType, addressNo, null, 0, voucherId, cbk);
			},
			"#popupNo" : function() { 
				Popup.hide();
				$('.buttons a.checkout').removeClass('disabled');
			},
		};
		
		if (method && method.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_VAN) {
			if (checkIfActiveOrderForDate(deliveryDate.window_id)) {
				Popup.loadMessage({ messageId: Popup.MESSAGES.SAME_DAY_ORDER, callbacks: callbacks });
			} else {
				callbacks["#popupYes"].call();
			}
		} else {
			callbacks["#popupYes"].call();
		}
	};

	var saveCheckout = function(event) {
		if ( $(event.target).hasClass('disabled') ) 
			return; 
		
		$('.buttons a.checkout').addClass('disabled');
		
		DBG('SAVE_CHECKOUT', 'Init');
		var cartData = friscoStorage.getShallow("cartData");
// 		if (!cartData || !cartData.order_id || !cartData.order_year) {
// 			Popup.loadMessage({ messageId: Popup.ERROR, timeout: Popup.TIMEOUT.NORMAL });
// 			return;
// 		} 
		
		var curMinimalOrderValue = friscoStorage.get("minimalOrderValue");
		if (!cartData || cartData.price_gross < curMinimalOrderValue) {
			Popup.load({ content: __('Minimalna wartość zamówienia to')+' '+(friscoHelpers.priceFormat(curMinimalOrderValue))+' '+__('zł, dodaj więcej produktów do koszyka by móc złożyć zamówienie'), size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			return;
		}
		
		// before save order state check
		var order = friscoStorage.getShallow('workingOrder');
		if (!order) {
			console.error('No order!');
			Popup.loadMessage({ messageId: Popup.MESSAGES.CRITICAL_ERROR, timeout: Popup.TIMEOUT.NORMAL });
			//window.location.reload();
			return;
		}
		
		// sync order getter
		var orderObj = api.getOrder(loggedUserId, order.order_id, order.year, null, true);
		
		if (!orderObj || typeof orderObj.status === 'undefined') {
			console.error('No order status!');
			Popup.loadMessage({ messageId: Popup.MESSAGES.CRITICAL_ERROR, timeout: Popup.TIMEOUT.NORMAL });
			//window.location.reload();
			return;
		}
		
		if (!friscoHelpers.isOrderEditable(orderObj)) {
// 			Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_NOT_EDITABLE, timeout: Popup.TIMEOUT.NORMAL });
			setTimeout(function() { window.location.reload() }, 500);
			return;
		}
		
		var diffs = api.getOrderCartComparison(loggedUserId, order.order_id, order.year);
		if (friscoStorage.getShallow('pouTs'))
			var deliveryDate = {window_id : friscoStorage.getShallow('pouTs')/1000};
		else
			var deliveryDate = friscoStorage.get('deliveryDate') || {window_id: orderObj.delivery_date};
// 		deliveryDate = deliveryDate ? deliveryDate : {window_id: orderObj.delivery_date};
		
		var addressObj = null;
		if (friscoStorage.getShallow('userProfile').savingplan_type == 14 && friscoStorage.getShallow("pouId"))
			addressObj = friscoStorage.get('pouAddressesObj')[+friscoStorage.getShallow("pouId") - 1];
		else 
			addressObj = friscoStorage.get('checkoutAddressObj');
		
		// draw ..
		var dumbContainer = document.createElement('div');
		$(dumbContainer).jqoteapp(templates.order_diff, {
			diff: diffs, cart: cartData, order: orderObj,
			addressObj: addressObj, deliveryDate: { date: deliveryDate, pou: friscoStorage.getShallow('pouTs')}
		});
		
		if (diffs && diffs.products_diff) {
			var ulContainer = $(dumbContainer).find('.summaryContent .diffHolder');
			$(ulContainer).html('');
			for (var product in diffs.products_diff) {
				var diffDelta = diffs.products_diff[product];
				var productData = diffs.products_data[product];
				
				if (!productData) {
					console.error("Error with product occured", product);
					continue;
				}
				
				// TODO: move to entity tpl ..
				var img = '<img height="50" width="50" src="' + helpers.img_url(productData.image_id, 50, 50) + '" title="' + __$(productData.full_name) + __$(productData.human_grammage_gross) + '" />';
				$(ulContainer).append('<li>' + img + ' ' + productData.full_name + "<span class='" + ((diffDelta > 0) ? "green" : "red") + "'>" + (diffDelta > 0 ? __("dodano sztuk") + "" : __("odjęto sztuk") + ":") + ' ' + Math.abs(diffDelta) + ' (' + friscoHelpers.price2HumanPrice(productData.price_gross * Math.abs(diffDelta)) + __("zł") + ')</span></li>');
			}
		}
		
		if (diffs.price_diff == 0 && diffs.products_data.length == 0 && diffs.products_diff.length == 0) { 
			$(dumbContainer).find('.summaryContent .priceDiff').append("<p>" + __("Brak zmian w zamówieniu.") + "</p>"); 
		}
		
		var cancelCbk = function() {
			DBG('SAVE_CHECKOUT', 'Returned to edition');
			$.colorbox.close();
		};
		
		var saveCbk = function() {
			DBG('SAVE_CHECKOUT', 'Accepted');
			saveCheckoutAction();
			$.colorbox.close();
		};
		
		var leaveCbk = function() {
			DBG('SAVE_CHECKOUT', 'Leaving edition?');
			$.colorbox.close();
			var callbacks = {
				"#popupYes" : function() {
					Popup.hide();
					leaveOrderEditionMode({ noRedirect:true, silent:true });
				},
				"#popupNo" : function() { 
					Popup.hide();
				}
			};
			$.colorbox.close(); // safety measure once again, they could overlap
			Popup.loadMessage({ messageId: Popup.MESSAGES.CANCEL_ORDER_EDIT, callbacks: callbacks });
		};
		
		$.colorbox({html : dumbContainer });
		
		// bind save, return and leave order edition btns
		$('.summaryContent .buttonsHolder .save').click(saveCbk);
		$('.summaryContent .buttonsHolder .cancel').click(cancelCbk);
		$('.summaryContent .buttonsHolder .leaveMode').click(leaveCbk);
	};

	var saveCheckoutAction = function() {
		DBG('CHECKOUT_SAVING', 'Collecting checkout data');

		//
		// COLLECTING DATA
		//
		var deliveryAddress = {};
		var addressNo = null, method = null, deliveryDate = null;
		var order = null;
		
		var pouId = friscoStorage.getShallow('pouId');
		var userProfile = friscoStorage.getShallow('userProfile');
		if (userProfile.savingplan_type == 14 && pouId != undefined) {
			addressNo = 0;
			deliveryDate = friscoStorage.getShallow('pouTs');
			method = {
				delivery_method: {'delivery_method_id': FRISCO.DELIVERY_TYPE_POU, name: "pou"}, 
				unallowed_products: [],
				unallowed_reasons: []
			};
		} else {
			// get delivery date
			deliveryDate  = friscoStorage.getShallow('deliveryDate');
			order = friscoStorage.getShallow('workingOrder');
			
			// check difference between delivery dates
			if (deliveryDate && order) {
				if (order.delivery_date == deliveryDate.window_id) {
					deliveryDate = null;
				}
			}
			
			// get delivery address
			if ($('#deliveryAddresses ul.addresses li.active')) {
				addressNo = friscoStorage.getShallow('checkoutAddressNo');
			}
			
			// get delivery method
			method = friscoStorage.get('deliveryMethod');
		}
		
		// cart data
		var cartData = friscoStorage.getShallow('cartData');
		if(!cartData || !cartData.order_id || !cartData.order_year) {
			console.error('No cart, order_id or order_year');
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			return false;
		}
		
		// get voucher number
		var voucherId = $("#page_content .typeVoucher input[type=text]").val();
		
		if (addressNo == undefined) {
			// TODO: validation on submitHandler
			// input data -> validate and save address for user -> get address_no
			var addressData = {};
			var data = $("#instantAddress").serializeArray();
			for(var i in data) {
				addressData[data[i].name] = data[i].value;
			}
			addressData['postcode'] = addressData['postCode_0'] + '-' + addressData['postCode_1'];
			
			delete addressData['postCode_0'];
			delete addressData['postCode_1'];
			
			addressNo = addressData;
		}
		
		// get payment type
		var paymentType = friscoStorage.getShallow('paymentMethod');
		if (!paymentType)
			paymentType = $('.checkoutContener .paymentMethods input:checked').val();

		// get voucher value
		var voucher = friscoStorage.getShallow("checkoutVoucher");
		var voucherId = (voucher ? voucher.number : null);

		//
		// all fields validation, move it before preview box..
		//
		var validated = true;
		var errors = {};

		if (parseInt(paymentType, 10) == paymentType) {
			paymentType = null;
		}
		if (paymentType && typeof paymentType != 'string') {
			validated = false;
			errors.paymentType = 1;
		}

		if (addressNo == undefined) {
			validated = false;
			errors.addressNo = 1;
		}

		if (!validated) {
			var list = [];
			if (errors.deliveryDate) {
				list.push(__('wybierz datę dostawy'));
			}
			if (errors.addressNo) {
				list.push(__('ustal adres dostawy'));
			}
			if (errors.paymentType) {
				list.push(__('wybierz rodzaj płatności'));
			}
			Popup.loadMessage({ content: __('Nie udało się zapisać zamówienia. Popraw swoje dane: ') + list, size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			$('.buttons a.checkout').removeClass('disabled');
			return;
		}
		
		var cbk = function(data, errors) {
			if (!data) {
				$('.buttons a.checkout').removeClass('disabled');
				Loader.hide();
				
				if (!errors) {
					Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_PLACE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
				} else {
					for (var errorIndex = 0; errorIndex < errors.length; errorIndex++) {
						var error = errors[errorIndex];
						switch(error) {
							case 'reservation':
								Popup.loadMessage({ messageId: Popup.MESSAGES.RSV_UNAVAILABLE, timeout: Popup.TIMEOUT.NORMAL });
								break;
							case 'vanOnlyException':
								Popup.loadMessage({ messageId: Popup.MESSAGES.UNDELIVERABLE_PRODUCTS, timeout: Popup.TIMEOUT.NORMAL });
								break;
						}
					}
				}
			} else {
				// saying bye bye to order edition mode
				leaveOrderEditionMode({ noRedirect:true, silent:true });
				friscoStorage.set('orderList', undefined);

				// ugly force refresh
// 				friscoStorage.getFresh('deliveryDate');
				friscoStorage.setShallow('deliveryDate', null);
				friscoStorage.getFresh('cartData');
				friscoStorage.getFresh('savingPlan');
				pub.getBalance();
				
				if (data.html && typeof data.html == 'object' && data.html.type && ( data.html.type == 'form' || data.html.type == 'redirect') ) {
					Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_PLACED_TO_PAYMENT, timeout: Popup.TIMEOUT.LONG });
					// lil delayed execution
					(function(html) {
						var timeCbk = function() {
							_renderPaymentTransition(html);
						};
						setTimeout(timeCbk, 300);
					})(data.html);
				} else {
// 					Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_PLACED_TO_LIST, timeout: Popup.TIMEOUT.NORMAL });
					
					if (data.html && data.html.account_no && data.html.transaction_title)
						core.setState('checkoutFinal', null, {orderId: data.order.order_id, year: data.order.year, wire_accountno: data.html.account_no, wire_title: (data.html.transaction_title.replace(/\//g, '_')), dontTrackEdition: true });
					else
						core.setState('checkoutFinal', null, {orderId: data.order.order_id, year: data.order.year, dontTrackEdition: true});
					
					if (data && data.order.order_id)
						updateHomeDeliveryOrderBox({'force': true});
					
					// SalesManago Sale report
					setTimeout( function() {
						var curProfile = friscoStorage.getShallow('userProfile');
						if (curProfile.salesManagoContactId && curProfile.salesManagoContactId != null) {
							api.smReinitCart(loggedUserId, [], function(data){ console.log("[renderCartContent] cleared cart for salesmanago"); });
// 							api.smReportSale(loggedUserId, order.year, order.order_id, function(){});
						}
					}, 3000);
				}
				
				var curProfile = friscoStorage.getShallow('userProfile');
				if (curProfile.salesManagoContactId && curProfile.salesManagoContactId != null) {
					api.smReinitCart(loggedUserId, [], function(data){ 
						console.log("[renderCartContent] cleared cart for salesmanago"); 
					});
				}
			}
		};

		var method = friscoStorage.get('deliveryMethod');
		pub.showStateLoadingPanel();

		if (method.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_POU)
			api.updateOrder(loggedUserId, cartData.order_id, cartData.order_year, paymentType, addressNo, pouId, deliveryDate, voucherId, cbk);
		else if (method && method.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_VAN) 
			api.updateOrder(loggedUserId, cartData.order_id, cartData.order_year, paymentType ? paymentType : null, addressNo ? addressNo : null, null, deliveryDate ? deliveryDate.reservation_id : null, voucherId ? voucherId : null, cbk);
		else
			api.updateOrder(loggedUserId, cartData.order_id, cartData.order_year, paymentType ? paymentType : null, addressNo ? addressNo : null, null, null, voucherId ? voucherId : null, cbk);	
	};

	var cancelCheckoutEdition = function() {
		DBG('CANCEL_CHECKOUT_EDITION', 'Init');
		leaveOrderEditionMode({ noRedirect: false });
	};

	var _renderPaymentTransition = function(htmlParams) {
		try {
			if (htmlParams.type == 'form') {
				var form = document.createElement('form');
				form.setAttribute('name', _esc(htmlParams.name));
				form.setAttribute('action', _esc(htmlParams.action));
				form.setAttribute('method',_esc( htmlParams.method));

				for (var param in htmlParams.params) {
					if (!htmlParams.params.hasOwnProperty(param)) {
						continue;
					}
					var name = _esc(param);
					var type = "hidden";
					var value = _esc(htmlParams.params[param]);

					var input = document.createElement('input');
					input.setAttribute('name', name);
					input.setAttribute('type', type);
					input.setAttribute('value', value);

					form.appendChild(input);
				}

				form.style.visibility = 'hidden';
				document.body.appendChild(form);

				// go transition
				form.submit();
			} else if (htmlParams.type == 'redirect') {
    				window.location.href = htmlParams.action;
			}
			
		} catch(e) {
			console.error('Invalid param', htmlParams);
			Popup.loadMessage({ messageId: Popup.MESSAGES.PAYMENT_SUPPORT_ERROR, timeout: Popup.TIMEOUT.NORMAL });
		}
	};

	var loadPayment = function(prevState, prevSubState, parameters) {
		DBG('PAYMENT', 'Initializing');

		if (!loggedUserId) {
			return frisco.loginPopup();
		}

		if (!parameters.orderId) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak orderId");
			return;
		}
		if (!parameters.year) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak year");
			return;
		}
		var orderId = parameters.orderId;
		var orderYear = parameters.year;

		DBG('PAYMENT', 'Getting order');
		var order = api.getOrder(loggedUserId, orderId, orderYear, null, true);
		if (!order) {
			$("#page_content").html(__("Brak zamówienia"));
			return;
		}

		DBG('PAYMENT', 'Getting user profile');
		var userProfile = friscoStorage.get('userProfile');

		DBG('PAYMENT', 'paymentsTypes check');
		var paymentsTypes = friscoStorage.get('paymentsTypes');

		DBG('PAYMENT', 'Rendering');
		$("#page_content").html('');
		$("#page_content").jqoteapp(templates.payment_content, {order: order});

		DBG('PAYMENT', 'Rendering payment types');
		var paymentMethod = order.payment_type;
		renderPaymentsTypes(paymentsTypes, paymentMethod ? paymentMethod : userProfile.default_payment_method);

		DBG('PAYMENT', 'Binding payment action');
		$("#page_content .checkoutContener .pay").click(function() {
			var paymentType = friscoStorage.get("paymentMethod") || order.payment_type;
			var data = api.payOrder(loggedUserId, orderId, orderYear, paymentType, null, true);
			if (!data) {
				Popup.loadMessage({ messageId: Popup.MESSAGES.PAYMENT_PAY_ERROR, timeout: Popup.TIMEOUT.NORMAL });
			} else {
				friscoStorage.set('orderList', undefined);
				if(typeof data.html === 'object' && data.html) {
					Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_PLACED_TO_LIST, timeout: Popup.TIMEOUT.NORMAL });
					// lil delayed execution
					(function(html) {
						var timeCbk = function() {
							_renderPaymentTransition(html);
						};
						setTimeout(timeCbk, 300);
					})(data.html);
				} else {
					core.setState('paymentFinal', '', {orderId: data.order_id, year: data.order_year});
				}
			}
		});

		DBG('PAYMENT', 'Finished');
	};

	var loadOrderCart = function(prevState, prevSubState, parameters) {
		if (!loggedUserId) {
			return frisco.loginPopup();
		}
		
		if (!parameters.orderId) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak orderId");
			return;
		}
		if (!parameters.year) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak year");
			return;
		}
		var orderId = parameters.orderId;
		var orderYear = parameters.year;
		
		DBG('ORDER_CART', 'Initializing');
		
		var order = api.getOrder(loggedUserId, orderId, orderYear, null, true, ['items', 'product']);
		var items = order.items.length ? order.items : [order.items];
		
		DBG('ORDER_CART', 'Rendering for order', order);
		$('#page_content').jqotesub(templates.order_cart_content, {order : order});
		
		DBG('ORDER_CART', 'Filling with products', items.length);
		
		frisco.renderProducts($('ul#products'), items, null, function(x){
			return {product : x.product, cart_entry: x, viewOfOrder: true}
		});
			
		$.each(items, function(index) {
			var product_id = this.product_id;
			var amount = this.amount;
			
			$("[product_id=" + product_id + "] p.price.cartView span.quantity").html(amount);
		});
		
		$('#page_content').find(".addAll").click( function(e){
			e.stopImmediatePropagation();
			var productsList = {};
			
			$.each(items, function(index) {
				productsList[this.product.product_id] = this.amount;
			});
			
			api.updateProductsInCart(productsList, null, function(cart_data) {
				friscoStorage.set('cartData', cart_data);
				friscoSession.set('cart_version', cart_data.version);
// 				friscoEvents.fire('cart', friscoEvents.FEV_CART_DATA_CHANGED, cart_data);
			});
			
			return false;
		});
		
		renderCartContent();
		
		DBG('ORDER_CART', 'Finished');
	};

	var loadViewOrder = function(prevState, prevSubState, parameters) {
		if (!loggedUserId) {
			frisco.loginPopup();
			return;
		}

		if (!parameters.orderId) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak orderId");
			return;
		}
		if (!parameters.year) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak year");
			return;
		}
		var orderId = parameters.orderId;
		var orderYear = parameters.year;

		DBG('ORDER_VIEW', 'Initializing');

		if (catalog) { catalog.disable(); }

		DBG('ORDER_VIEW', 'paymentsTypes check');
		var paymentsTypes = friscoStorage.get('paymentsTypes');

		// load order
		DBG('ORDER_VIEW', 'Loading order');
		var data = api.getOrder(loggedUserId, orderId, orderYear, null, true, ['items', 'products']);
		if (data) {
			friscoStorage.setShallow('workingOrder', data);
		} else {
			friscoStorage.setShallow('workingOrder', null);
		}
		var order = data;

		if (!order) {
			$('#page_content').html(__("Błąd pobierania zamówienia"));
			console.error('Cannot load order');
			return;
		}

//    	DBG('ORDER_VIEW', 'windowsList check');
//    	var windowsList = friscoStorage.get('windowsList');
		DBG('ORDER_VIEW', 'oldReservation getting');
		var oldReservation = friscoStorage.get('deliveryDate');

		var mainAddress = null;
		if (order.address) {
			mainAddress = order.address;
		}

		DBG('ORDER_VIEW', 'template preparation');

		$('#page_content').html('');
		$('#page_content').jqoteapp(templates.order_view_content, {order: order, main_address: mainAddress});
		
		DBG('ORDER_VIEW', 'Binding address');
		// delivery address
		// fillDeliveryAddress(mainAddress);

		if ( (order.voucher_id)&&(order.voucher_id != 0) ) {
			addCheckoutVoucher(order.voucher_id);
		}

		$('#deliveryAddresses ul').jqoteapp(templates.checkout_delivery_shelf, {address : order.address});
		$('#deliveryAddresses ul li').addClass("active");

		// render sliders
		renderCheckoutSliders(order.delivery_date);

		// bind sliders to refresh func
		friscoEvents.hook('checkoutView', friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, function() { renderCheckoutSliders(); });

		$('.checkoutCheckbox .edit .save').click(saveCheckout); // expects event as a param
		$('.checkboxContent .foot .buttons .save').click(saveCheckout); // expects event as a param
		$('.checkoutCheckbox .edit .cancel').click(cancelCheckoutEdition);
		$('.checkboxContent .foot .buttons .cancel').click(cancelCheckoutEdition);
	};

	var loadOrder = function(prevState, prevSubState, parameters) {
		DBG('ORDER_EDIT', 'Initializing');
		
		if (!loggedUserId) {
			frisco.loginPopup();
			return;
		}

		if (!parameters.orderId) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak orderId");
			return;
		}
		if (!parameters.year) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
			console.error("Brak year");
			return;
		}
		var orderId = parameters.orderId;
		var orderYear = parameters.year;
		
		
		$("#rightNavigation").html("");
		if (catalog) { catalog.disable(); }
		Sidebar.hide();
		
		$('#page_content').html('');
		Loader.load(Loader.TYPE.COVER, "div#page_content", "ładuję dane, zaczekaj chwilę...");
	
		var cartData = null, order = null, workingOrderDiff = null, userProfile = null, paymentsTypes = null, oldReservation = null, deliveryDate = null, curPrices = null, paymentMethod = null, deliveryAddresses = null, mainAddress = null;
		var params = {};
		
		
		// order callbacks
		var _orderTest = function(data) {
			order = data;
			
			if (order) {
				friscoStorage.setShallow('workingOrder', order);
			} else {
				friscoStorage.setShallow('workingOrder', null);
			}
			
			if (order.address) {
				mainAddress = order.address;
			}
			
			if (!order) {
				console.error('Cannot load order');
				Loader.hide();
				Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_GET_ERROR, timeout: Popup.TIMEOUT.NORMAL });
				leaveOrderEditionMode();
				return;
			}
			
			if (!friscoHelpers.isOrderEditable(order)) {
				console.error('Cannot edit this order');
				Loader.hide();
				Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_NOT_EDITABLE, timeout: Popup.TIMEOUT.NORMAL });
				leaveOrderEditionMode();
				return;
			}
			
			_cbkTest();
		};
		
		var _getOrder = function() {
			// load order
			DBG('ORDER_EDIT', 'Loading order');
			api.getOrder(loggedUserId, orderId, orderYear, _orderTest, false, ['items', 'products']);
		};
		
		// order cart callbacks
		var _orderCartTest = function(data) {
			cartData = data;
			if (!cartData || !cartData.order_id || cartData.order_id != orderId) {
				// reload cart
				$('#page_content').html(__("Błąd pobierania danych"));
				return;
			}
			friscoStorage.set('cartData', cartData);
			_cbkTest();
		};
		
		var _getOrderCart = function() {
			DBG('ORDER_EDIT', 'cartData getter');
			// TODO: should be with cartData getter @ backend
			api.getOrderCart(loggedUserId, orderId, orderYear, _orderCartTest);
		};
		
		// order diff callbacks
		var _orderDiffTest = function(data) {
			workingOrderDiff = data;
			friscoStorage.setShallow('workingOrderDiff', data);
			_cbkTest();
		};
		
		var _getOrderDiff = function() {
			api.getOrderCartComparison(loggedUserId, orderId, orderYear, _orderDiffTest);
		};
		
		// cart callbacks
		var _cartTest = function(data) {
			if (!data) { // we have order cart already
				if ( cartData && cartData.order_id && cartData.order_year ) {
				} else {
					// get delivery date and delete reservation before entering edit mode
					// TODO: write a better solution to separate order delivery date from reservation
					deliveryDate  = friscoStorage.getShallow('deliveryDate');
					if (deliveryDate && deliveryDate.reservation_id)  {
						apiReservations.deleteReservation(session.user_id, deliveryDate.reservation_id, function(data) {});
						friscoStorage.set('deliveryDate', null);
					}
				} // if ( cartData && cartData.order_id && cartData.order_year )
				
				_getOrder();
			} else {
				cartData = data;
				_getOrder();
			}
		};
		
		DBG('ORDER_EDIT', 'getting cartData');
		if (prevState) {
			_cartTest();
		} else {
// 			_getOrder();
			params = {}; params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function(data) {
				cartData = data;
				_cartTest(data);
			};
			friscoStorage.getFresh('cartData', params);
		};
		
		// setup forced-order callback cascade
		var _cbkTest = function() {
			if (cartData && order && workingOrderDiff)
				_orderEditTemplateAction();
			else if (cartData && order)
				_getOrderDiff();
			else if (order)
				_getOrderCart();
		};
		
		
		// load chosen delivery address
// 		DBG('ORDER_EDIT', 'deliveryAddresses check');
// 		var deliveryAddresses = friscoStorage.get('deliveryAddresses');
// 		DBG('ORDER_EDIT', 'windowsList check');
// 		var windowsList = friscoStorage.get('windowsList');
// 		DBG('ORDER_EDIT', 'oldReservation getting');
// 		var oldReservation = friscoStorage.get('deliveryDate');
		
		var _orderEditTemplateAction = function() {
			DBG('ORDER_EDIT', 'template preparation');
			
			userProfile = friscoStorage.getShallow('userProfile');
			
			$('#page_content').jqoteapp(templates.order_content, {cart: cartData, deliveryAddresses: deliveryAddresses, order: order, main_address: mainAddress, orderDiff: workingOrderDiff, profile: userProfile});
			Loader.hide();
			
			pub.getBalance();
			
			bindDeliveryMinimalPrice();
			
			// render payments types
			// moved to run first - as addressesEditor() callbacks depend upon this info
			paymentsTypes = friscoStorage.get('paymentsTypes');
			friscoStorage.set("paymentMethod", order.payment_type); 
			renderPaymentsTypes(paymentsTypes, order.payment_type);
			
			
			// delivery address
			addressesEditor();
			fillDeliveryAddress(mainAddress);
			
			// delivery date changing
			$('#page_content a.changeCheckoutDelivery').click(function() {
				if(!$('#page_content #reservationChooser .calendar:visible').length) {
					$('#page_content #reservationChooser .calendar').show();
					renderDatePicker(false);
					$(this).hide();
				} else {
					$('#page_content #reservationChooser .calendar').hide();
					$(this).show();
				}
			});
			
			// make sure sidebar is noticed
			orderEditionCheck();
			
			// voucher editing
			if ( (order.voucher_id)&&(order.voucher_id != 0) ) {
				addCheckoutVoucher(order.voucher_id);
				$('li.typeVoucher').hide();
			}
			
			$('#page_content .typeVoucher button').click(function() {
				addCheckoutVoucher();
			});
			$('#page_content .typeVoucher > input#code').keyup(function() {
				var $this = $(this);
				if ($this.val().length >= 3){
					$('#page_content .typeVoucher button').addClass("active");
				} else {
					$('#page_content .typeVoucher button').removeClass("active");
				}
			});
			$('#page_content .voucherChooser .cancelVoucher').click(function() {
				cancelCheckoutVoucher();
			});
			
			// render sliders
			deliveryDate  = friscoStorage.getShallow('deliveryDate');
			if (deliveryDate && deliveryDate.window_id) 
				renderCheckoutSliders(deliveryDate.window_id);
			else
				renderCheckoutSliders(order.delivery_date);
			
			
			// enable payment option depending on diffs status
			// > 0 means we have to pay more
			/*if(workingOrderDiff && workingOrderDiff.price_diff > 0) {
				$('.checkoutContener .payment').show();
				$('.checkoutContener .payment *').show();
			}*/
			
			// 2014-05-26 kroszak: disabled - addressesEditor does this anyways as a callback
			// - and to make sure it craps th f**k out - with bad values; commented out as a fix
// 			renderDatePicker(false);
// 			_checkoutHideShowReservation();
// 			_checkoutRedrawPayments(); 
			
			// nutricia program delivery content
			var pouOrder = (order.delivery_kind == FRISCO.DELIVERY_TYPE_POU);
			supportNutriciaPlan({ 'order_edit': true, 'pouTs': (pouOrder ? order.delivery_date : null), 'pouId': (pouOrder ? 1 : null) });
			// TODO: force backend to return pouId in order.address.address_no
			
			bindCartPriceGuard();
			behaveDueToCart(cartData); // ugly hack to hide undeliverable products list when user has no addresses defined
			
			// bind sliders to refresh func
			friscoEvents.hook('checkoutView', friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, function() { renderCheckoutSliders(); });
			
// 			$('.checkoutCheckbox .edit .save').click(saveCheckout);
// 			$('.checkoutFoot .buttons .save').click(saveCheckout);
//			$('.buttons a.save').click(saveCheckout);
			
			$('.checkoutCheckbox .edit .cancel').click(cancelCheckoutEdition);
			$('.checkoutFoot .buttons .cancel').click(cancelCheckoutEdition);
		}
	};

	var dontForgetPage = function(prevState, curState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('dont_forget'), {});
		
		Loader.load(Loader.TYPE.COVER, "div#page_content", "zaczekaj chwilę...");
		var params = {};
		params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function(cartData) {
			if (!cartData) cartData = {entries: []}
			var remove = $.map(cartData.entries, function (item) { return item.product.product_id; });
			FabloConfig.showRecentlyPurchased(loggedUserId, $("#dontForget ul > div").eq(0), 10, remove, undefined, 100, function(r){
				Loader.hide();
			});
// 			FabloConfig.showRecentlyVisited(loggedUserId, $("#dontForget ul > div").eq(1), remove, undefined, 10);
		};
		friscoStorage.get('cartData', params);
	};

	var loadUserIlist = function(prevState, curState, params) {
		if (catalog) { catalog.disable(); }
		Sidebar.hide();
		
		var sortArray = {};
		if (params && params.sort) {
			$.each(params.sort, function(fieldName, sortOrder) {
				sortArray[fieldName] = sortOrder;
			});
		}
		
		var getter = function(page, limit, renderer) {
			api.getProfiledBoughtProducts(session.user_id, page, limit, sortArray, null, function(products) {
				if (!products) { return; }
				
				if ( (products.length == 0) && ($('ul#iListProducts > li').length == 0) ) {
					$('.firstTimers').show();
				} else {
					$('.firstTimers').hide();
					renderer(products);
				}
			});
		};
		
		
// 		var sortParams = null, sortMode = {};
// 		sortParams = params && params.sort;
// 		sortMode = sortParams ? { Object.keys(sortParams)[0] : sortParams[ Object.keys(sortParams)[0] ] } : {};
		
		$('#page_content').jqotesub(frisco.getTemplate('ilist_shelf'), {});
		
		SlotManager.clearSlots();
		SlotManager.registerSlot("ul#iListProducts", null, 0, {asyncGetter: getter});
		SlotManager.enableLoadSlots();
	
		
// 		friscoEvents.hook('ilists', friscoEvents.FEV_LOAD_MORE, loadPageProducts);
	};

    // refreshing view of calendar
    var refreshTermPicker = function(reservationMade) {

    	if(reservationMade == undefined) {
    		reservationMade = friscoStorage.getShallow('deliveryDate');
    	}

    	if(!reservationMade) {
    		return;
    	}

    	if(typeof reservationMade["eventObj"] != 'undefined') {
    		reservationMade = reservationMade.eventData;
    	}

    	if(!reservationMade) {
    		return;
    	}

    	DBG('DELIVERY_DATE', 'Using reservation', reservationMade);

    	var windowId = reservationMade.window_id;
    	if(!windowId) {
    		DBG('DELIVERY_DATE', 'Invalid reservation obj');
    		return;
    	} else {
    		DBG('DELIVERY_DATE', 'Using', windowId);
    	}
    	var wWindows = friscoStorage.getShallow('windows_Windows');
        if(!wWindows) {
            console.error('No windows object! Fatal reservation case!');
            return;
        }
    	DBG('DELIVERY_DATE', 'Using', windowId, wWindows);
        Sidebar.getRenderedContent().find("table.timeOfDelivery tbody a.active").removeClass('active');
        Sidebar.getRenderedContent().find("table.timeOfDelivery tbody a.calendarWindowPicker[window_id=" + windowId + "]").addClass('active');
        if(wWindows[windowId]) {
            renderCheckoutSliders();
        	DBG('DELIVERY_DATE', 'Refreshing calendar date picker, reservation changed', reservationMade);
        } else {
            console.error("windowId is not handled");
        }

    	DBG('DELIVERY_DATE', 'Refreshing calendar date picker, reservation changed', reservationMade);
    };
    
	var recommendUsPage = function(prevState, prevSubState, parameters) {
		if (!loggedUserId) {
			frisco.loginPopup();
			$('#login-form input[type=hidden][name=origin]').val(window.location);
			return;
		}
		$("body").addClass("recommend-us");
		api.getRecommendationConf(function(data){
			var my_voucher = data.recommendReferralVoucherValue/100, their_voucher = data.recommendVoucherValue/100;
			$('#page_content').jqotesub(frisco.getTemplate('recommend_us'), {their_voucher: their_voucher, my_voucher: my_voucher, text: data.recommendVoucherDefaultComment});
			document.title = "Poleć nas - Frisco.pl";
			
			$("#recommend-form").submit(function(){
				if (!$("#input-email ul li").length) {
					Popup.load({content: __("Wpisz co najmniej jeden adres e-mail."), size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING});
					return false;
				}
				else if (!$("#inputMessage").val().trim().length) {
					Popup.load({content: __("Wpisz treść wiadomości."), size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING});
					return false;
				}
				var emails = [], message;
				$.each($("#recommend-form").serializeArray(), function(){
					if (this.name == "emails[]" && this.value)
						emails.push(this.value);
					else if (this.name == "inputMessage")
						message = this.value;
				});
				
				api.sendRecommendation(emails, message, function(res, msg){
					var duplicates = [];
					var error_msg = [];
					var translate = function(key, error) {
						if (core.getCurrentLang() == 'pl') {
							if (error.indexOf("You can't recommend yourself") !== -1)
								error_msg.push("Nie możesz polecić samego siebie. ;-)");
							if (error.indexOf("You need at least") !== -1)
								error_msg.push("Aby polecić Frisco.pl znajomym musisz złożyć przynajmniej jedno zamówienie. ;-)");
							else if (error.indexOf('was already recommended') > 0)
								duplicates.push(key);
						}
						else
							error_msg.push(error);
					}
					
					// parse "normal" errors...
					if (res.errors)
						$.each(res.errors, translate);
					// ... and exceptions thrown @backend - just one possible here
					if (msg != undefined) 
						translate(res, msg);
					
					if (duplicates.length) {
						if (duplicates.length == 1)
							error_msg.push("Podany przez Ciebie adres e-mail " + duplicates + " otrzymał już wcześniej polecenie. ;-)");
						else {
							var last = duplicates.pop();
							error_msg.push("Podane przez Ciebie adresy e-mail " + duplicates.join(", ") + " i " + last + " otrzymały już wcześniej polecenie. ;-)");
							
						}
					}
					error_msg = error_msg.join("<br>");
					if (res && res.created_at) {
						$("#send-form-container h2").css('font-size', '40px').text("Dziękujemy za polecenie naszego sklepu!");
						$("#recommend-form").html(
							"<h3>Twoi znajomi otrzymają powitalny kupon "+their_voucher+" zł na pierwsze zakupy.<br>...a Ty kupon "+my_voucher+" zł za pierwszy zakup każdego z nich.</h3>" + 
							"<div class='button'><a href='/'>Wróć do sklepu</a></div>"
						);
					}
					else {
						Popup.load({content: error_msg, size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR});
					}
				});
				
				for (var e in emails)
					Rum.rumEvent(Rum.EMAIL_DROP_EVENT, ""+emails[e]+"|recommended-client-mail", loggedUserId);
				
				return false;
			});
		});
	}

	var pampersLandingPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('pampers_landing'));
		
		if (!(parameters.size || parameters.type || parameters.line)) {
			$("#content_pampers-ru-sis-main").show();
			$("#content_pampers-ru-sis-sub").hide();
			api.searchProducts("pampers", [], [], function(totalFound, productsArray, brandsArray, tagsArray, categoriesArray, boughtProducts) {
				if (productsArray) {
					frisco.renderProducts($('#pampers-bestsellers'), productsArray, false);
				}
				renderCartContent();
			}, 5, 1, [], false);
		} else {
			var filter;
			if(parameters.size) {
				filter = function(p) { return p.size == parameters.size; };
			}
			if(parameters.type) {
				filter = function(p) { return $.inArray(parameters.type, p.types) != -1; };
			}
			if(parameters.line) {
				filter = function(p) { return p.line == parameters.line; };
			}
			if(parameters.line == "Active All") {
				filter = function(p) { return p.line =='Active Girl' || p.line == 'Active Boy'; };
			}
			if(parameters.line == "Zapas na miesiac") {
				filter = function(p) { return p.line =='Zapas na miesiąc'; };
				initPBTrackingPixel();
				window._fbq.push(['addPixelId', '497572337060093']);
				window._fbq.push(['track', 'PixelInitialized', {}]);
			}
			if(parameters.line == "Active Baby-Dry" || parameters.line == "New Baby-Dry") {
				filter = function(p) { return p.line =='Baby-Dry'; };
			}
			if(parameters.line == "Noworodek") {
				filter = function(p) { return p.size == '1' || p.size == '2' || p.line =='Sensitive' || p.line == 'Baby fresh'; };
			}
			if(parameters.line == "Niemowle") {
				filter = function(p) { return p.size == '3' || p.size == '4' || p.line =='Sensitive' || p.line == 'Baby fresh' || p.line == 'Naturally clean'; };
			}
			if(parameters.line == "Odkrywca") {
				filter = function(p) { return p.size == '4+' || p.size == '5' || p.line =='Sensitive' || p.line == 'Baby fresh' || p.line == 'Naturally clean' || p.line == 'Pieluchomajtki'; };
			}
			
			var banner = "";
			if (parameters.size) banner = "rozmiar/Pampers_banner_Size_" + parameters.size;
			else if (parameters.type) banner = "kategoria/Pampers_banner_" + parameters.type;
			else if (parameters.line) banner = "linia/Pampers_banner_" + parameters.line.replace(/ /g, '');
			$("#container_pampers-ru-sis #b-image").attr("src", "/img/pampersLandingPage3/banners/"+banner+".jpg");
			
			var current_section = $("a[href='"+location.pathname+"']").eq(0).text();
			if (parameters.line == "Zapas na miesiac") current_section = "Zapas na miesiąc";
			else if (parameters.line == "Active All") current_section = "Active Boy i Active Girl";
			$("#container_pampers-ru-sis #current-link").text(current_section);

			cms.pampers(function(products) {
				products = $.grep(products, filter);
				var ids = $.map(products, function(x) { return x.id; });
				api.getProducts(ids, function(products) {
					frisco.renderProducts($('#pampers-poducts'), products, false);
					renderCartContent();
				});
			});

			$("#content_pampers-ru-sis-main").hide();
			$("#content_pampers-ru-sis-sub").show();
		}
	};
	
	var mobileLP = function(prevState, subState, parameters) {
		if (prevState != undefined)
			return;
		
		var contentWrapper = "div#wrapper";
		
// 		var m = document.createElement('meta');
// 		m.name = "viewport";
// 		m.content = 'width=device-width, minimum-scale=1.0, maximum-scale=1.0, initial-scale=0.75, user-scalable=yes';
// 		$("head").append($(m));
		
// 		alert("param.os: " + parameters.os);
// 		alert("OS: " + BrowserDetect.OS);
// 		alert("Browser: " + BrowserDetect.browser);
// 		alert("Navigator UA: " + navigator.userAgent);
		
		frisco.hideGUI(1024);
		var lp = $.jqote(frisco.getTemplate('mobile_landing'), {'os' : parameters.os || BrowserDetect.OS.toLowerCase()});
		
// 		$("body").append("<div id='dimmer'></div>");
		$("body").append(lp);
		$("#mobileLP").addClass(parameters.os || BrowserDetect.OS.toLowerCase());
// 		$("#mobileLP").addClass("ios");
		
		$("#mobileLP #top").bind("click", function() {
			$.cookie("mobileLP", 1, {path: '/', raw : true});
			$("#mobileLP").fadeOut(function() {
				$(this).remove();
			});
			
			frisco.initGUI();
		})
		
	};
	
	var mobileApp = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('mobile_app'), {});
	};
	
	var loadDisabledLandingPage = function(prevState, subState, parameters) {
		var disabledPages = {
			/* shops */
			'redbullLandingPage' : {},
			'wedelLandingPage' : {},
			'bacardiMartiniLP' : {},
			/* LPs */
			'piknik' : { 'tpl' : 'piknik_landing', 'headerImg' : '/img/header-piknik.jpg', 'data' : 'piknik_maj_2013' },
			'henkel' : { 'tpl' : 'henkel_landing', 'headerImg' : '/img/header-henkel2.jpg', 'data' : 'henkel_promocja' },
			'granteLP' : { 'tpl' : 'grante_landing', 'headerImg' : '/img/home-banners/grante.jpg', 'data' : 'Grante_07_2013' },
			'wiosna' : { 'tpl' : 'wiosna_landing', 'headerImg' : '/img/wiosna/header-superhero.jpg', 'data' : 'wiosna_2013' },
			'vizirLP' : { 'tpl' : '', 'headerImg' : '/img/home-banners/vizir.jpg', 'data' : 'VizirLP' },
			'arielLP' : { 'tpl' : 'ariel_landing', 'headerImg' : '/img/home-banners/ariel3.jpg', 'data' : 'Ariel_112013' },
			'pampers_bcLP' : { 'tpl' : '', 'headerImg' : '/img/home-banners/vizir.jpg', 'data' : 'VizirLP' },
			'christmasBaskets' : {},
			'christmasLandingPage' : {},
			'wiosna' : {},
			'wielkanoc' : {},
		};
		
		var state = core.getCurrentState();
		if ( disabledPages[state] )
			Popup.loadMessage({ messageId: Popup.MESSAGES.INACTIVE_LP });
		
		core.setState('defaultState');
	};

	var loadMeltWaterPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(templates.meltwater_lp, {});
		document.title = "Najwyższej jakości woda pitna „Melt Water Original” - Frisco.pl";
		var cart = friscoStorage.getShallow("cartData");
		api.getProducts([80639, 80641], function(data) {
			$.each(data, function(i, prod) {
				prod.cartAmount = cart && cart.entries && cart.entries[prod.product_id] && cart.entries[prod.product_id].amount;
				var sidebarItem = $.jqote(templates.meltwater_lp_frag, {product : prod});
				$('#page_content').find('#contentSection.meltwater .cart_box .cart_list').append(sidebarItem);
			});
		}, loggedUserId, null, null, true);
	};

	var displayLPTopBanners = function(data, additional, category) {
		if(!data || !data.length) return;

		var currentStateUrl = '/stn,' + core.getCurrentState();
		var items = [];
		if (!category) {
			data = $.grep(data, function(x) { return !!(x.url && !x.url.match(currentStateUrl)); }); // filter out banners to current page
			var missingToFullRow = 4 - (data.length % 4);
			// Sort: 1,2,3,4 - visible, 5 first on right, 6 first on left, 7 second on right, ....
			for(var i = 0; i < Math.min(4, data.length); i++) items.push(data[i]); // first 4 banners by priority
			for(var i = 4; i < data.length; i += 2) items.push(data[i]); // even priorites on scrolling to the right
			for(var i = 0; i < missingToFullRow; i++) items.push(data[i % data.length]); // fill end with items with top priority
			for(var i = data.length - 1 - (data.length % 2); i > 4; i -= 2) items.push(data[i]); // odd priorities on scrolling to the left; reversed at the end of items array
		} else {
			// boxes for category pages are displayed with simplier algo: start from the next box after one related to current category.
			var box = _.find(data, function(x) { return !!(x.url && x.url.match(currentStateUrl)); });
			if (box) {
				var pos = _.indexOf(data, box);
				items = data.slice(pos+1).concat(data.slice(0, pos));
			} else
				items = data;
		}

		var num = additional ? '1' : '';
		if (additional) {
			if (!category)
				items = _.shuffle(items.slice(4)); // don't use 4 elements from top
			if (!items.length)
				return;
			$('#page_content').jqoteapp(frisco.getTemplate('lp_top_boxes'), {items: items, num: num});
			$('#video-lp-top-boxes'+num).addClass('active');
		}
		else
			$('#wrapper').jqotepre(frisco.getTemplate('lp_top_boxes'), {items: items, num: num});
		var element = $('#video-lp-top-boxes'+num);
		var firstVisible = 0;
		var itemsCount = items.length;
		var itemWidth = 290;
		var container = element.find('.list-content ul');
		var scrolling = false;
		var scroll = function(pageOffset) {
			if(scrolling) return;
			scrolling = true;
			var visibleBanners = $('#video-lp-top-boxes').width() > 1240 ? 4 : 3;
			firstVisible += pageOffset * visibleBanners;
			if(firstVisible < 0 || firstVisible >= itemsCount) {
				// Clone last visibleBanners to begin of container, perform animation, remove cloned banners.
				var left = firstVisible < 0;
				container.find('li:gt(' + (itemsCount - visibleBanners - 1) + ')').clone().prependTo(container);
				container.css({left: left ? -(visibleBanners * itemWidth) : 0});
				container.animate({left: left ? 0 : -(visibleBanners * itemWidth)}, 'slow', function() {
					container.find('li:lt(' + visibleBanners + ')').remove();
					firstVisible = (firstVisible + itemsCount) % itemsCount;
					container.css({left: left ? -(firstVisible * itemWidth) : 0});
					scrolling = false;
				});
			} else {
				container.animate({left: -(firstVisible * itemWidth)}, 'slow', function() {
					scrolling = false;
				});
			}
		};
		element.find('.next-button').click(function() { scroll(1); });
		element.find('.prev-button').click(function() { scroll(-1); });
		if(itemsCount <= 4) {
			element.find('.next-button, .prev-button').hide();
		}
		var topBoxStatus = false;
		var updatePos = function() {
			var posTop = $('body').scrollTop() || $('html').scrollTop();
			if(posTop > 400) topBoxStatus = true;
			if(posTop == 0 && topBoxStatus) {
				element.addClass('active');
				$('#fixed-next').animate({left: -360}); // hide right menu
			}
		}
		if (!additional)
			$(window).bind('scroll.topboxes', updatePos);
		friscoEvents.hook('video-lp-top-boxes'+num, friscoEvents.FEV_ON_STATE_ENTER, function(){
			element.remove();
			$(window).unbind('scroll.topboxes');
		}, {type: friscoEvents.FEV_TYPE_ONETIME});
	};
	
	var recipesCollectivePage = function(prevState, subState, parameters) {
		cms.collective(function(res){
			var layouts = [1, 0, 1, 0, 2];
			_.each(res, function(s){
				s.layout = layouts[s.id] == undefined ? 3 : layouts[s.id];
			});
			$('#page_content').jqotesub(frisco.getTemplate('collective'), {sections: res});
		});
	};
	
	var loadCategoryPage = function(prevState, subState, parameters) {
		var bindCategories = function(overrides, parent_cat, per_section, order, help) {
			per_section = per_section || 10;
			api.getCategory(parent_cat, function(category){
				var path = category.name + ">>";
				var names = _.map(category.children, function(x){ return path + x.name; });
				if (order) {
					var mapping = _.object(_.pluck(category.children, 'category_id'), names);
					var f = function(x) {
						return _.isArray(x) ? _.map(x, f) : mapping[x] || (help && help[x] && help[x].category);
					}
					names = f(order);
				} else {
					order = _.pluck(category.children, 'category_id');
				}
				var fin = _.after(order.length, renderCartContent);
				
				_.each(order, function(id, i) {
					var rot = $('.big-'+(i+1)), str, cid, locNames;
					if (_.isArray(id)) {
						str = names[i][0];
						cid = id[0];
						locNames = names[i];
					} else {
						str = names[i];
						cid = id;
						locNames = [names[i]];
					}
					if (!str) return;
					var url = helpers.url('searchResults', {c: cid, cat: helpers.clearCategory(str)}, null, true);
					rot.find(".rotator-header a").attr("href", url);
					var defined_ids = overrides && overrides[String.fromCharCode(97+i)]; // a,b,c,...
					if (defined_ids) {
						api.getProducts(defined_ids, function(products) {
							frisco.renderProducts(rot.find(".list-content .products"), products, true, null, 'video_lp_rotator_shelf', true);
							new SmallRotator(rot, 5);
							fin();
						}, loggedUserId, null, null, true);
					} else {
						var locFin = _.after(locNames.length, function(){
							new SmallRotator(rot, 5);
							fin();
						});
						var locPer = Math.ceil(per_section / locNames.length);
						var without = help && help[cid] && help[cid].without;
						if (without)
							locPer += 5;
						_.each(locNames, function(name){
							FabloConfig.showPopular(rot.find(".list-content"), name, locPer, null, function(prods){
								if (without)
									_.each(prods, function(prod){
										if (prod.categories[0].indexOf(without) >= 0)
											rot.find(".productId[product_id='" + prod.id + "']").remove();
									});
								locFin();
							}, 'video_lp_rotator_shelf');
						});
					}
				});
			}, true, true);
		};
		
		var state = core.getCurrentState();
		var pageData = CAT_TEXTS[state];
		$('#page_content').jqotesub(frisco.getTemplate('category_generic'), {page: pageData});
		$("body").addClass('notfixed');
		cms.category_lps(function(cms_data){
			bindCategories(cms_data && cms_data[state], pageData.id, 10, pageData.subs, pageData.extra);
		});
		cms.category_lp_top_boxes(function(data){
			displayLPTopBanners(data, false, true);
			displayLPTopBanners(data, true, true);
		});
		if (parameters.scroll) {
			setTimeout(function(){
				$("body, html").animate({scrollTop: $("#lp > section").eq(parameters.scroll - 1).offset().top + (parameters.scroll == 1 ? 50 : 100)}, 500);
			}, 50);
		}
		else
			$("body, html").animate({scrollTop: $('#page_content').offset().top});
	};
	
	var loadLandingPage = function(prevState, subState, parameters) {
		var pagesForState = {
			'wina_mkLP' : { 'tpl' : '', 'headerImg' : '/img/home-banners/wina_mk.jpg', 'data' : 'LP-wina-MK', 'slotID' : '' },
			'pqsLP' : { 'tpl' : 'pqs_landing', 'headerImg' : '', 'data' : 'PQS_i_Ariel', 'slotID' : '#pqs-products' },
			'dzien-kobiet' : { 'tpl' : '', 'headerImg' : '/img/home-banners/dzien-kobiet.jpg', 'data' : '2014_Walentynki', 'slotID' : '', 'headerImgClass': 'full' },  // Reuse Walen.2014 campaign
			'puchar-swiata' : { 'tpl' : '', 'headerImg' : '/img/home-banners/CC_2014.jpg', 'data' : '2014_CC', 'slotID' : '', 'headerImgClass': 'full' },
			'slodki-tydzien' : { 'tpl' : '', 'headerImg' : '/img/home-banners/slodki-tydzien.jpg?t=2', 'data' : '2014_Słodki_Tydzień', 'slotID' : '', 'headerImgClass': 'full' },
			'develey' : { 'tpl' : '', 'headerImg' : '/img/home-banners/develey.jpg', 'data' : '2014_Develey', 'slotID' : '', 'headerImgClass': 'full' },
			'pantene' : { 'tpl' : '', 'campaign' : 'Pantene' },
			'pizza' : { 'tpl' : 'video_lp_pizza', 'data' : '2014_Pizza', 'bodyclass': 'notfixed' },
			'domowe-wypieki' : { 'tpl' : 'video_lp_baking', 'data' : '2014_domowe_wypieki', 'bodyclass': 'notfixed' },
			'kuchnia-azjatycka' : { 'tpl' : 'video_lp_asia', 'data' : '2014_Kuchnia_azjatycka', 'bodyclass': 'notfixed' },
			'wiosenne-porzadki' : { 'tpl' : 'video_lp_spring_clean', 'data' : '2014_Wiosenne_porzadki', 'bodyclass': 'notfixed' },
			'produkty-bio' : { 'tpl' : 'video_lp_health_bio', 'data' : '2014_Produkty_Bio', 'bodyclass': 'notfixed' },
			'wielkanoc' : { 'tpl' : 'video_lp_easter', 'data' : '2014_Wielkanoc', 'bodyclass': 'notfixed' },
			'grill' : { 'tpl' : 'video_lp_grill', 'campaign' : '2014 Majowka', 'bodyclass': 'notfixed' },
			'nowalijki' : { 'tpl' : 'video_lp_nowalijki', 'campaign' : '2014 Nowalijki', 'bodyclass': 'notfixed' },
			'slodkosci' : { 'tpl' : 'video_lp_slodkosci', 'campaign' : '2014 Dzień Matki', 'bodyclass': 'notfixed' },
			'diety' : { 'tpl' : 'video_lp_diety', 'campaign' : '2014 Diety light', 'bodyclass': 'notfixed' },
			'mundial' : { 'tpl' : '', 'campaign' : '2014 Mundial' },
			'danone' : { 'tpl' : '', 'campaign' : '2014 Danone' },
			'coca-cola-konkurs' : { 'tpl' : '' },
			'woda' : { 'tpl' : 'video_lp_woda', 'campaign' : '2014 Woda 2', 'bodyclass': 'notfixed' },
			'lody' : { 'tpl' : 'video_lp_lody', 'campaign' : '2014 Lody', 'bodyclass': 'notfixed' },
			'owoce-morza' : { 'tpl' : 'video_lp_dimare', 'campaign' : '2014 Owoce morza', 'bodyclass': 'notfixed' },
			'nutricia' : { 'tpl' : '', 'campaign' : '2014 Nutricia' },
			'drugie-sniadanie' : { 'tpl' : '', 'campaign' : 'IIsniadanie09_2013' },
			'dania-na-szybko' : { 'tpl' : 'video_lp_dania', 'campaign' : '2014 Dania na szybko', 'bodyclass': 'notfixed' },
			'kuchnia-meksyku' : { 'tpl' : 'video_lp_meksyk', 'campaign' : '2014 Kuchnia meksykanska', 'bodyclass': 'notfixed' },
			'sosy' : { 'tpl' : 'video_lp_sosy', 'campaign' : '2014 Sosy', 'bodyclass': 'notfixed' },
			'jesienne-inspiracje' : { 'tpl' : 'video_lp_autumn', 'campaign' : '2014 Jesien', 'bodyclass': 'notfixed' },
			'kawa-czy-herbata' : { 'tpl' : 'video_lp_coffee', 'campaign' : '2014 Kawa herbata', 'bodyclass': 'notfixed' },
			'ryby' : { 'tpl' : 'video_lp_fish', 'campaign' : '2014 Ryby', 'bodyclass': 'notfixed' },
			'swieta' : { 'tpl' : 'video_lp_xmas', 'bodyclass': 'notfixed' },
			'sylwester' : { 'tpl' : 'video_lp_sylw', 'bodyclass': 'notfixed', 'additionalTopBoxes': true },
			'superprezent' : { 'tpl' : 'video_lp_supergift', 'bodyclass': 'notfixed' },
			'zima' : { 'tpl' : 'video_lp_zima', 'bodyclass': 'notfixed', 'additionalTopBoxes': true },
			'sniadanie' : { 'tpl' : 'video_lp_breakfast', 'bodyclass': 'notfixed', 'additionalTopBoxes': true },
			'paczki' : { 'tpl' : 'video_lp_paczki', 'bodyclass': 'notfixed', 'additionalTopBoxes': true },
			'akcesoria-kuchenne' : { 'tpl' : 'video_lp_utils', 'bodyclass': 'notfixed', 'additionalTopBoxes': true  },
			'pomysl-na-smaczne-danie' : { 'tpl' : 'video_lp_utils2', 'bodyclass': 'notfixed', 'additionalTopBoxes': true  },
			'walentynki' : { 'tpl' : 'video_lp_valentine', 'data' : '2014_Walentynki', 'bodyclass': 'notfixed' },
			'przekaski-na-ostatki' : { 'tpl' : 'video_lp_lasties', 'bodyclass': 'notfixed', 'additionalTopBoxes': true },
			'kuchnia-francuska' : { 'tpl' : 'video_lp_francja', 'bodyclass': 'notfixed', 'additionalTopBoxes': true },
			'przepis-na-chleb' : { 'tpl' : 'video_lp_bread', 'bodyclass': 'notfixed', 'additionalTopBoxes': true },
			'jak-posprzatac-mieszkanie' : { 'tpl' : 'video_lp_spring_clean2', 'bodyclass': 'notfixed', 'additionalTopBoxes': true },
			'przepisy-na-wielkanoc' : { 'tpl' : 'video_lp_easter2', 'bodyclass': 'notfixed' },
			'zestawyPG': { 'tpl' : '', 'campaign' : '2014 Zestawy P&G' },
			'dzienbabci': { 'tpl' : '', 'headerImg' : '/img/home-banners/dzienbabci.jpg', 'data' : '2014_Dzien_babci_i_dziadka' },
			'promocja' : { 'tpl' : '', 'campaign' : 'Promocja' }
		};
		
		var bindProductsAmongContent = function(container, count, per_section, template, space, callback, dont_filter) {
			count = count || 3;
			per_section = per_section || 6;
			return function() {
				cms.content(container, function(data){
					if (!data) return;
					// Unfortunatelly, api.getProducts cannot return more than 150 products.
					var lengths = data.lengths;
					var size=150, steps = Math.ceil(data.ids.length/size), products = new Array(steps), i, soFar;
					var filterFunc = function(p) {
						return p && p.product_id && (p.status == FRISCO.PRODUCT_STATUS_AVAILABLE || p.status == FRISCO.PRODUCT_STATUS_UPDATED);
					};
					var process = _.after(steps, function(){
						products = _.flatten(products, true);
						// dont_filter == false => products will make full rotators, starting from first. Last rotators may be empty/not full if there is too few products.
						// dont_filter == true => divisions between rotators will be kept (in case of unavailable or missing products)
						//     (divisions come from cms [a1,a2,..a12, b1,b2..] or from count/per_section parameter)
						if (!dont_filter)
							products = _.filter(products, filterFunc);
						if (!dont_filter || lengths.length == 1)
							lengths = _.map(_.range(count), _.constant(per_section));
						var slices = [];
						for(soFar=0, i=0;i<count;i++) {
							var products_slice = _.filter(products.slice(soFar, soFar + lengths[i]), filterFunc);
							frisco.renderProducts($("#featuredProducts"+i), products_slice, false, {gaAttr: "Strona kontentowa"}, template, space);
							slices.push($.map(products_slice, function(e) { return +e.product_id; }));
							soFar += lengths[i];
						}
						if (_.isFunction(callback))
							callback(products, slices);
						renderCartContent();
						
						var buttons = $("#lp .add-all");
						buttons.click(function(){
							var btn = $(this);
							if (btn.hasClass("active"))
								return false;
							btn.addClass("active");
							
							var reqData = {};
							$.each(slices[+$(this).data('num') || buttons.index($(this))], function(i, p) { reqData[p] = 1; });
							
							var cd = friscoStorage.getShallow('cartData');
							$.each(cd.entries, function(i, v){
								if (reqData[v.product_id])
									reqData[v.product_id] = v.amount + reqData[v.product_id];
							});
							
							api.updateProductsInCart(reqData, null, function(){
								friscoEvents.fire('fridge', friscoEvents.FEV_CART_INVALIDATED, {});
								btn.removeClass("active");
							});
							return false;
						});
					});
					for(i=0; i<steps; i++)
						api.getProducts(data.ids.slice(i*size, (i+1)*size), function(i){ return function(pack){
							products[i] = pack;
							process();
						}}(i), loggedUserId, null, null, "exact");
				});
			};
		};
		var bindRotators = function(container, bigCount, bigItems, smallCount, smallItems, dont_filter) {
			return bindProductsAmongContent(container, bigCount, bigItems, 'video_lp_rotator_shelf', true, function(products){
				var firstSmall = bigItems * bigCount;
				var num = products.length;
				if(num == 0) return;
				for(i=0;i<smallCount;i++) {
					var products_slice = [];
					for(var j = firstSmall + (i * smallItems); j < firstSmall + ((i + 1) * smallItems); j++) {
						products_slice.push(products[j % num]);
					}
					frisco.renderProducts($("#featuredProductsSmall"+i), products_slice, true, {small: true, gaAttr: "Strona kontentowa"}, 'video_lp_rotator_shelf', true);
					new SmallRotator($('.small-'+(i+1)), 1);
				}
				for(i=0;i<bigCount;i++)
					new SmallRotator($('.big-'+(i+1)), 5);
			}, dont_filter);
		};
		var bindProductsButtons = function() {
			var ids = _.filter($('[product_id]').map(function (i, el){ return +$(el).attr('product_id'); }), _.identity);
			api.getProducts(ids, function(prods) {
				prods = _.filter(prods, function(prod){ return prod.status == FRISCO.PRODUCT_STATUS_AVAILABLE || prod.status == FRISCO.PRODUCT_STATUS_UPDATED; });
				_.each(prods, function(prod){
					$(".group .productId[product_id='" + prod.product_id + "']").toggleClass('product-van-only', prod.is_van_only)
						.find(".addToCart .add").attr("ga", "Strona kontentowa").end()
						.find(".price").html(friscoHelpers.parsePrice((prod.promotion_price_gross || prod.price_gross) / 100))
						.after('<p class="added-text">Dodano pomyślnie!</p>')
						.after("<div class='popup-handler'></div>");
				});
				var notAvailable = _.difference(ids, _.pluck(prods, "product_id"));   // not only products with wrong status (filtered above), but also missing ones not returned from api.
				_.each(notAvailable, function(id){
					$(".group .productId[product_id='" + id + "']").find(".addToCart").css('visibility', 'hidden');
				});
			});
			var buttons = $("#lp .add-all-group");
			buttons.click(function(){
				var btn = $(this);
				if (btn.hasClass("active"))
					return false;
				btn.addClass("active");
				
				var reqData = {};
				$("#lp .group").eq(+$(this).data('num') || buttons.index($(this))).find("[product_id]").each(function(i, p) { reqData[+$(p).attr("product_id")] = 1; });
				
				var cd = friscoStorage.getShallow('cartData');
				$.each(cd.entries, function(i, v){
					if (reqData[v.product_id])
						reqData[v.product_id] = v.amount + reqData[v.product_id];
				});
				
				api.updateProductsInCart(reqData, null, function(){
					friscoEvents.fire('fridge', friscoEvents.FEV_CART_INVALIDATED, {});
					btn.removeClass("active");
				});
				return false;
			});
		};
		var bindScroll = function(elems) {
			if (parameters.scroll) {
				setTimeout(function(){
					$("body, html").animate({scrollTop: $(elems[parameters.scroll - 1]).offset().top}, 500, function(){
						$(window).trigger('scroll.video-lp');
					});
				}, 50);
			}
			else
				$("body, html").animate({scrollTop: $('#page_content').offset().top});
		};
		var afterLoadCallbacksForState = {
			'produkty-bio' : bindProductsAmongContent('produkty_bio'),
			'wielkanoc' : bindProductsAmongContent('wielkanoc2014'),
			'grill' : bindProductsAmongContent('grill'),
			'nowalijki' : bindProductsAmongContent('nowalijki', 4),
			'slodkosci' : bindProductsAmongContent('slodkosci', 4),
			'diety' : bindProductsAmongContent('diety', 3),
			'pizza' : bindProductsAmongContent('pizza', 3),
			'kuchnia-azjatycka' : bindProductsAmongContent('azja', 5),
			'wiosenne-porzadki' : bindProductsAmongContent('porzadki', 5),
			'domowe-wypieki' : bindProductsAmongContent('wypieki', 4),
			'woda' : bindProductsAmongContent('woda', 4),
			'lody' : bindProductsAmongContent('lody', 4),
			'owoce-morza' : bindProductsAmongContent('Owoce_morza', 4),
			'dania-na-szybko' : bindRotators('dania', 5, 20, 5, 4),
			'kuchnia-meksyku' : bindRotators('kuchnia_meksykanska', 5, 12, 5, 3),
			'sosy' : bindRotators('sosy', 4, 12, 7, 3),
			'jesienne-inspiracje' : function(){
				bindProductsButtons();
				bindRotators('jesien', 6, 12, 0, 0, true)();
				bindScroll(['.section1 .columns-all', '.section3', '.section5']);
			},
			'kawa-czy-herbata' : function(){
				bindProductsButtons();
				bindRotators('kawa', 6, 12, 0, 0, true)();
				bindScroll(['.section1', '.section3', '.section5 .recipe:first', '.section5 .recipe:eq(1)']);
			},
			'ryby' : function() {
				bindProductsButtons();
				bindRotators('ryby', 5, 12, 0, 0, true)();
				bindScroll(['.section1', '.section3 .recipe:eq(0)', '.section3 .recipe:eq(1)']);
			},
			'swieta' : function() {
				bindProductsButtons();
				bindRotators('swieta', 5, 12, 0, 0, true)();
				bindScroll(['.header-top', '.header-top', '.header-top', '.header-top', '.section1 .info_box', '.section5', '.section3']);
				
				var promoproducts = null;
				var cbk = function(name, el) {
					$("div#xmas-selector li a.active").removeClass('active');
					(el || $("div#xmas-selector a[rel='"+name+"']")).addClass('active');
					SlotManager.clearSlots();
					SlotManager.registerSlot("#lp-products", promoproducts[name]);
					SlotManager.enableLoadSlots();
				};
				$("div#xmas-selector li a[rel]").live("click", function(e) {
					cbk($(this).attr("rel"), $(this));
				});
				var params = {}; params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function(data) {
					promoproducts = data;
					if (parameters.scroll && parameters.scroll < 5)
						cbk(['swieta-ryby', 'swieta-mieso-wedliny', 'swieta-do-wypiekow', 'swieta-potrawy'][parameters.scroll-1]);
					else
						cbk('swieta-slodycze-kawa-herbata');
					api.getCampaignProducts('swietaBN2013_prezenty', function(data){
						promoproducts['swietaBN2013_prezenty'] = data.productsIds;
					});
				};
				friscoStorage.get("promoproducts", params);
			},
			'sylwester' : function() {
				bindProductsButtons();
				bindRotators('sylwester', 2, 12, 0, 0, true)();
				bindScroll(['.section1 h2', '.section3', '.section3 h2:eq(1)', '.section3 h2:eq(2)', '.header-top', '.header-top', '.header-top', '.header-top', '.header-top', '.header-top', '.header-top']);
				
				var promoproducts = null;
				var cbk = function(name, el) {
					$("div#xmas-selector li a.active").removeClass('active');
					(el || $("div#xmas-selector a[rel='"+name+"']")).addClass('active');
					SlotManager.clearSlots();
					SlotManager.registerSlot("#lp-products", promoproducts[name]);
					SlotManager.enableLoadSlots();
				};
				$("div#xmas-selector li a[rel]").live("click", function(e) {
					cbk($(this).attr("rel"), $(this));
				});
				var params = {}; params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function(data) {
					promoproducts = data;
					if (parameters.scroll && parameters.scroll > 4)
						cbk(['sylwester-przystawki', 'sylwester-przekaski', 'sylwester-slodycze', 'sylwester-szampany', 'sylwester-wina', 'sylwester-dladzieci', 'sylwester-napoje'][parameters.scroll-5]);
					else
						cbk('sylwester-szampany');
					api.getCampaignProducts('2014 Napoje', function(data){
						promoproducts['sylwester-napoje'] = data.productsIds;
						if (parameters.scroll == 11)
							cbk('sylwester-napoje');
					});
				};
				friscoStorage.get("promoproducts", params);
			},
			'superprezent' : function() {
				bindProductsButtons();
				SlotManager.clearSlots();
				SlotManager.registerSlot("#lp-products", [], undefined, {query: {c: [2205], q: ''}});
				SlotManager.enableLoadSlots();
			},
			'zima' : function() {
				bindProductsButtons();
				bindRotators('zima', 7, 12, 0, 0, true)();
				bindScroll(['.section1 h3:eq(0)', '.section1 h3:eq(1)', '.section1 h3:eq(2)', '.section3 h2', '.section5 .group']);
			},
			'sniadanie' : function() {
				bindProductsButtons();
				bindRotators('sniadanie', 6, 12, 0, 0, true)();
				bindScroll(['.section1 h2', '.section3 h2', '#group4-anchor', '.section7 h2']);
			},
			'paczki' : function() {
				bindProductsButtons();
				bindRotators('paczki', 6, 12, 0, 0, true)();
				bindScroll(['.section1 h2', '.big-1 + .columns-all', '.big-2 + .columns-all']);
			},
			'coca-cola-konkurs': function() {
				cms.cola_contest(function(data) {
					if (!data) return;
					api.getProducts(data, function(prods){
						frisco.renderProducts($("#lp-products"), prods, true);
					});
				});
			},
			'akcesoria-kuchenne' : function() {
				bindProductsButtons();
				bindRotators('akcesoria-kuchenne', 2, 12, 0, 0, true)();
			},
			'pomysl-na-smaczne-danie' : function() {
				bindProductsButtons();
				bindRotators('akcesoria-kuchenne2', 2, 12, 0, 0, true)();
			},
			'walentynki' : function() {
				bindProductsButtons();
				bindScroll(['.section2']);
			},
			'przekaski-na-ostatki' : function() {
				bindProductsButtons();
				bindRotators('ostatki', 4, 12, 0, 0, true)();
				bindScroll(['.group1-anchor', '.group2-anchor', '.group3-anchor', '.group4-anchor', '.group5-anchor']);
			},
			'kuchnia-francuska' : function() {
				bindProductsButtons();
				bindRotators('francja', 7, 12, 0, 0, true)();
				bindScroll(['.group1-anchor', '.group2-anchor', '.section5 .container']);
			},
			'przepis-na-chleb' : function() {
				bindProductsButtons();
				bindRotators('chleb', 4, 12, 0, 0, true)();
				bindScroll(['.section3 h2', '.section5', '.section5 h2']);
			},
			'jak-posprzatac-mieszkanie' : function() {
				bindProductsButtons();
				bindRotators('wiosna', 5, 12, 0, 0, true)();
// 				bindScroll(['.section3 h2', '.section5', '.section5 h2']);
			},
			'przepisy-na-wielkanoc' : function() {
				bindProductsButtons();
				bindRotators('wielkanoc2015', 4, 12, 0, 0, true)();
				bindScroll(['.group1-anchor', '.group3-anchor', '.group4-anchor']);
				
				var cache = {};
				var cbk = function(name) {
					SlotManager.clearSlots();
					SlotManager.registerSlot("#lp-products", cache[name]);
					SlotManager.enableLoadSlots();
				};
				
				var show_campaign = function(name, el) {
					$("div#xmas-selector li a.active").removeClass('active');
					(el || $("div#xmas-selector a[rel='"+name+"']")).addClass('active');
					if (cache[name])
						cbk(name);
					else
						api.getCampaignProducts(name, function(data){
							cache[name] = data.productsIds;
							cbk(name);
						});
				};
				$("div#xmas-selector li a[rel]").live("click", function(e) {
					show_campaign($(this).attr("rel"), $(this));
				});
				show_campaign('2015 WN_potrawy świąteczne');
			},
		};
		
		var state = core.getCurrentState();
		var pageData = pagesForState[state];
		$('#page_content').jqotesub(frisco.getTemplate(pageData.tpl || 'landing_page_unified'), {'pageData' : pageData});
		
		if (pageData.bodyclass)
			$("body").addClass(pageData.bodyclass);
		
		if (pageData.data != undefined) {
			var cbk = function(data) {
				SlotManager.clearSlots();
				SlotManager.registerSlot("#lp-products", data[pageData.data]);
				SlotManager.enableLoadSlots();
			};
			var p = {}; p[friscoStorage.PARAM_FOLLOWER_CALLBACK] = cbk;
			friscoStorage.get("promoproducts", p);
		} else if (pageData.campaign != undefined) {
			var cbk = function(data) {
				SlotManager.clearSlots();
				SlotManager.registerSlot("#lp-products", data.productsIds);
				SlotManager.enableLoadSlots();
			};
			api.getCampaignProducts(pageData.campaign, cbk);
		}
		
		// fire optional func to bind some extra links or whatever
		if (afterLoadCallbacksForState[state] && afterLoadCallbacksForState[state] instanceof Function) {
			afterLoadCallbacksForState[state]();
		}

		var loadRightMenu = function(data) {
			var items = [];
			_.each(data, function(el) {
				if(items.length < 4 && el['dest-url'] && !el['dest-url'].match('/stn,' + core.getCurrentState()))
					items.push(el);
			});
			if (!items.length)
				return false;
			var folder = pageData.tpl.match('video_lp_(.+)$')[1].replace(/_/g, '-');
			$('#page_content').jqoteapp(frisco.getTemplate('lp_right_menu'), {items: items, title: encodeURIComponent($("#lp header h1").text()), pin_img: encodeURIComponent(location.protocol + '//' + location.host + '/img/video-lp/' + folder + '/1.jpg')});
			$('#fixed-next .close').click(function() {
				$('#fixed-next').animate({left: -360});
				return false;
			});
			startFacebookAndPinterest();
		};

		if(pageData.tpl && pageData.tpl.match('video_lp')) {
			cms.menu_right(loadRightMenu);
			cms.video_lp_top_boxes(displayLPTopBanners);
			if (pageData.additionalTopBoxes)
				cms.video_lp_top_boxes(function(data){ displayLPTopBanners(data, true); });
		}
	};

	var loadBrandShopPage = function(prevState, subState, parameters) {
		var shops = {
			'piekarnia-putka': {
				defaultCategory: 'Piekarnia',
				brandTag: 3410305,
				categories: {
					'Piekarnia': {
						'Bułki i bagietki': [696],
						'Chleb': [3],
						'Pieczywo pełnoziarniste': [558]
					},
					'Cukiernia': [7]
				},
				thumbnailSize: 58,
				ornamentsCount: 4
			},
			'sklep-blikle': {
				defaultCategory: 'Ciasta',
				brandTag: 3407665,
				categories: {
					'Ciasta': [160, 4400],
					'Słodycze': [118, 3677, 119],
					'Lody': [161],
					'Pasztety': [3649]
				},
				thumbnailSize: 50,
				ornamentsCount: 3
			},
			'wierzejki': {
				defaultCategory: 'Boczek i baleron',
				brandTag: 3440491,
				categories: {
					'Boczek i baleron': [1102],
					'Kiełbasa i kabanosy': [1100],
					'Pasztet': [4481],
					'Polędwica i schab': [1099],
					'Salami i salceson': [1105],
					'Szynka': [1098],
					'Wędliny krojone': [4464],
					'Inne wędliny': [1106]
				},
				thumbnailSize: 58,
				ornamentsCount: 3
			}
		};
		var shopName = core.getCurrentState()
		var shop = shops[shopName];

		var getCategoriesIds = function(categories, categoryPath) {
			var c = categoryPath.split('>>');
			if(c[1]) return categories[c[0]][c[1]];
			if(_.isArray(categories[c[0]])) return categories[c[0]];
			return _.flatten(_.values(categories[c[0]]));
		};
		var loadCategory = function(categoryPath) {
			$(window).scrollTop(0);
			var categories = getCategoriesIds(shop.categories, categoryPath);
			api.searchProducts(null, categories, [shop.brandTag], function(totalFound, productsArray, brandsArray, tagsArray, categoriesArray, boughtProducts) {
				var products_ids = _.pluck(productsArray, 'product_id');
				var renderProducts = function(products) {
					var images = {};
					if (shop.ornamentsCount)
						$.each(products, function(i,p) {
							if(p.product_id == 81597) images[p.product_id] = 'piekarnia-putka/ornaments/czekolada';
							else if(p.product_id == 83573) images[p.product_id] = 'piekarnia-putka/ornaments/wisnia';
							else if(p.product_id == 83575) images[p.product_id] = 'piekarnia-putka/ornaments/malina';
							else if(p.product_id == 86127) images[p.product_id] = 'piekarnia-putka/ornaments/jagody';
							else if(i % 2 == 0) images[p.product_id] = shopName + '/ornaments/' + (Math.floor(i/2) % shop.ornamentsCount);
						});
					_.each(products, function(p) {
						p.full_name = p.full_name.replace('PUTKA ', '').replace('WIERZEJKI ', '').replace('A.BLIKLE ', '');
					});
					$('#page_content').jqotesub(frisco.getTemplate('brand_shop'), {products: products, images: images, shopName: shopName, categories: shop.categories, thumb: shop.thumbnailSize, categoryId: categories[0], currentCategory: categoryPath});
					$('#brand-shop .shop-menu-products li').click(function(){
						$("#brand-shop .shop-menu-products li").removeClass('active');
						$(this).addClass('active');
						var product = $(this).attr('product_id');
						$('html, body').animate({scrollTop: $("#brand-shop .big-products li[product_id=\"" + product + "\"]").offset().top});
					});
					$('#brand-shop .shop-categories a').click(function() {
						loadCategory($(this).attr('x-category'));
						return false;
					});
					$('#brand-shop .shop-categories a').removeClass('active');
					$('#brand-shop .shop-categories a[x-category="' + categoryPath + '"]').addClass('active');

					var renderRotator = function(num, products) {
						if(!products.length) {
							$('#brand-shop .rotator-big').hide();
							return;
						}
						frisco.renderProducts($("#featuredProducts"), products, true, null, 'video_lp_rotator_shelf', true);
						_.defer(function() { new SmallRotator($('#brand-shop .rotator-big'), 5); }, 1000);
					};
					_.defer(function() {
						api.searchProducts(null, categories, [shop.brandTag], renderRotator, 15, 2);
					}, 5000);
				}
				api.getProducts(products_ids, renderProducts, null, null, 15, null, true); // to get descriptions
			}, 15, 1);
		}

		var cat = shop.defaultCategory;
		if(parameters.cat) { cat = _.keys(shop.categories)[parameters.cat] || defaultCategory; }
		loadCategory(cat);

		// fixme: refactor, mostly copied from kubusMenu
		var updateMenu = function(posTop) {
			$("#brand-shop .shop-menu-products li").removeClass('active');
			var activeProduct = _.find($("#brand-shop .big-products li.product"), function(x) { return posTop < $(x).offset().top; }) || _.last($("#brand-shop .big-products li.product"));
			$("#brand-shop .shop-menu-products li[product_id=\"" + $(activeProduct).attr('product_id') + "\"]").addClass('active');

			var height=$(window).height();
			var menuHeight=$('#brand-shop .shop-menu').height();
			var maxmenuHeight=height-menuHeight-105;
			var menuNumber = $( "#brand-shop .shop-menu-products li.active").index();
			var menuMargin = (menuNumber * (-58)) + maxmenuHeight/2 - 60;
			var wysokoscmenu = $('#brand-shop .shop-menu-products').height() - height - 105;

			if (menuNumber * (58) + 60 > (maxmenuHeight/2))
				$("#brand-shop .shop-menu-products li").first().css({ marginTop:  menuMargin + 'px' });
			else
				$("#brand-shop .shop-menu-products li").first().css({ marginTop: 0 });
		};
		var throttledUpdateMenu = _.throttle(updateMenu, 200);

		var updatePos = function () {
			var posTop= $('html').scrollTop() || $('body').scrollTop();
			$('#brand-shop .shop-menu-box').toggleClass('active', posTop > 470);
			throttledUpdateMenu(posTop);
		}
		$(window).bind('scroll.brand-shop', updatePos);
		friscoEvents.hook('brand-shops', friscoEvents.FEV_ON_STATE_ENTER, function() {
			$(window).unbind('scroll.brand-shop');
		}, {type: friscoEvents.FEV_TYPE_ONETIME});
		updatePos();

	};

	var loadDolceGusto = function(prevState, subState, parameters) {
		var data = [
			[
				{id: 9278, desc: "Klasyczne włoskie latte macchiato łączy w sobie idealną równowagę kompozycji intensywnego espresso i mleka z cudowną, puszystą pianką. Zachwyci Cię nie tylko wyjątkowym smakiem i aromatem, ale także intrygującym wyglądem."},
				{id: 9273, desc: "Włoski klasyk. W tej powszechnie lubianej kawie gorące, spienione mleko skrywa warstwę gładkiego, aromatycznego espresso."},
				{id: 91427, desc: "Café au Lait to idealny sposób na dobry początek dnia! Uwieńczona aksamitną pianką, duża mleczna Café au Lait zawdzięcza swój łagodny smak harmonijnej kompozycji kawy i mleka, zamkniętych w jednej kapsułce."}
			],[
				{id: 9277, desc: "Duża czarna kawa o wspaniałym aromacie. Uwieńczona aksamitną warstwą ciemnej kawowej pianki – cremy. Po włosku „lungo” znaczy „długa”."},
				{id: 91423, desc: "Rozpocznij dzień od dużej, łagodnej czarnej kawy z gęstą, kremową pianką – cremą. Grande powstaje wyłącznie z ziaren arabiki, co zapewnia jej wyjątkowo harmonijny smak. Równie doskonała z mlekiem."},
			],[
				{id: 9275, desc: "Espresso Intenso zachwyci wszystkich wielbicieli małej czarnej swym mocnym charakterem i intensywnym bukietem smaku."},
				{id: 91421, desc: "Wyjątkowo intensywny aromat, wyrazisty smak i aksamitna crema na powierzchni z pewnością zadowolą wszystkich kawowych koneserów."},
				{id: 91429, desc: "Idealnie zaparzone espresso, mocne i aromatyczne, do którego dodano odrobinę mleka. Takie właśnie jest Cortado – mocne, z delikatną mleczną pianką."},
			],[
				{id: 91425, desc: "Idealny na śniadanie, kakaowy przysmak dla całej rodziny. Nesquik to pyszne kremowe kakao z obfitą, gęstą pianką, które smakuje dzieciom i... kusi dorosłych."},
				{id: 9274, desc: "Jeśli lubisz gorącą czekoladę, zakochasz się w naszym Chococino®. Pyszna czekolada z dodatkiem kremowego mleka, tworzy aksamitną konsystencję, która zachwyci każdego, kto docenia smak prawdziwej czekolady."},
			]
		];
		var ids = _.pluck(_.flatten(data), 'id');
		api.getProducts(ids, function(res) {
			var products = {};
			_.each(res, function(p) { products[p.product_id] = p; });
			_.each(data, function(x) {
				_.each(x, function(p) {
					_.extend(p, products[p.id]);
					p.name = p.full_name && p.full_name.replace('NESCAFÉ Dolce Gusto', '');
					var m = p.name && p.name.match(/^(.+) ([^ ]+ w kapsułkach) (.+)$/i);
					if (m)
						p.name = m[1] + "<br>" + m[2] + "<br><span>" + m[3].toLowerCase() + "</span>";
				});
			});
			$(parameters.container || '#page_content').jqotesub(frisco.getTemplate('dolce_gusto'), {data: data, banner: parameters.customBanner});
			$("body").addClass("notfixed");

			// fixme: refactor, mostly copied from loadBrandShopPage
			var updateMenu = function(posTop) {
				$("#brand-shop .shop-menu-products li").removeClass('active');
				var activeProduct = _.find($("#brand-shop .big-products li.product"), function(x) { return posTop < $(x).offset().top; }) || _.last($("#brand-shop .big-products li.product"));
				$("#brand-shop .shop-menu-products li[product_id=\"" + $(activeProduct).attr('product_id') + "\"]").addClass('active');

				var height=$(window).height();
				var menuHeight=$('#brand-shop .shop-menu').height();
				var maxmenuHeight=height-menuHeight-105;
				var menuNumber = $( "#brand-shop .shop-menu-products li.active").index();
				var menuMargin = (menuNumber * (-58)) + maxmenuHeight/2 - 60;
				var wysokoscmenu = $('#brand-shop .shop-menu-products').height() - height - 105;

				if (menuNumber * (58) + 60 > (maxmenuHeight/2))
					$("#brand-shop .shop-menu-products li").first().css({ marginTop:  menuMargin + 'px' });
				else
					$("#brand-shop .shop-menu-products li").first().css({ marginTop: 0 });
			};
			var throttledUpdateMenu = _.throttle(updateMenu, 200);

			var updatePos = function () {
				var posTop= $('html').scrollTop() || $('body').scrollTop();
				if (location.pathname.match("stn,dolce-gusto")) {
					var fixed = posTop > $(".shop-header + .shop-wrapper").offset().top - 110;
					$('#brand-shop .shop-menu-box').toggleClass('active', fixed);
					if (fixed) {
						var right = $(window).width() / 2 - 600;
						$('#brand-shop .shop-menu-box').css('right', right + "px");
					}
					else
						$('#brand-shop .shop-menu-box').css('right', '');
				}
				throttledUpdateMenu(posTop);
			}
			$(window).bind('scroll.brand-shop', updatePos);
			friscoEvents.hook('brand-shops', friscoEvents.FEV_ON_STATE_ENTER, function() {
				$(window).unbind('scroll.brand-shop');
			}, {type: friscoEvents.FEV_TYPE_ONETIME});
			$('#brand-shop .shop-menu-products li').click(function(){
				$("#brand-shop .shop-menu-products li").removeClass('active');
				$(this).addClass('active');
				var product = $(this).attr('product_id');
				$('html, body').animate({scrollTop: $("#brand-shop .big-products li[product_id=\"" + product + "\"]").offset().top - 100});
			});

		});
	};

	var yearOfShoppingPromo = function(prevState, subState, parameters) {
		document.title = "Opinie klientów o Frisco";
		$('#page_content').jqotesub(frisco.getTemplate('year_of_shopping_results'), {});
	};
	
	var juneContestInfo = function(prevState, subState, parameters) {
		$("body").addClass("notfixed");
		$('#page_content').jqotesub(frisco.getTemplate('june_contest_intro'), {});
		$('html, body').animate({scrollTop: $("#page_content").offset().top});
		
		if (frisco.useTrackingCode("sociomantic") && loggedUserId) {
			sociomantic.sonar.adv['frisco-pl'].clear();
			window.customer = {identifier: loggedUserId, segment: 1};
			sociomantic.sonar.adv['frisco-pl'].track();
		}
	};

	var juneContestResults = function(prevState, subState, parameters) {
		$("body").addClass("notfixed");
		$('#page_content').jqotesub(frisco.getTemplate('june_contest_results'), {});
		$('html, body').animate({scrollTop: $("#page_content").offset().top});
	};

	var addOctoberContestProducts = function() {
		cms.octoberContest(function(sections){
			_.each(sections, function(products_data, key){
				var products = [], multipacks={};
				$.each(products_data, function(i, p){
					if (p.show)
						products.push(p.id);
					if (p.multipack)
						multipacks[p.id] = true;
				});
				api.getProducts(products, function(products){
					frisco.renderProducts($("#oc-"+key+"-products"), products, true, null, null, true);
					var cart = friscoStorage.getShallow('cartData');
					$.each(products, function(i, p){
						if (multipacks[p.product_id] && p.multipack_id) {
							api.getProduct(p.multipack_id, function(multiPackData) {
								multiPackData.octoberContest = true;
								multiPackData.cartAmount = cart && cart.entries && cart.entries[multiPackData.multipack_id] && cart.entries[multiPackData.multipack_id].amount;
								place.find('li[product_id=' + p.product_id + ']').after($.jqote(frisco.getTemplate('product_shelf'), { product : multiPackData, switchEnable : true})).addClass("hidden").next(".multipack").removeClass("hidden");
							});
						}
					});
					var rotator = $('.big-'+key);
					if (rotator.length)
						new SmallRotator(rotator, 6);
				}, loggedUserId, null, null, true);
			});
		});
	};

	var juneContestPage = function(prevState, subState, parameters) {
			Popup.load({ title : "Konkurs został już zakończony.", content: "Wyniki zostaną ogłoszone 31 lipca na naszym profilu <a href='https://facebook.com/FriscoPL'>FriscoPL</a>.", size: Popup.SIZE.NORMAL, type: Popup.TYPE.MESSAGE});
			setTimeout(function(){ core.setState('defaultState'); }, 5000);
	};

	var octoberContestResults = function(prevState, subState, parameters) {
		$("body").addClass("notfixed");
		$('#page_content').jqotesub(frisco.getTemplate('october_contest_results'), {});
		$('html, body').animate({scrollTop: $("#page_content").offset().top});
	};

	var octoberContestPage = function(prevState, subState, parameters) {
		if (!octoberContestActive()) {
			Popup.load({ title : "Konkurs został już zakończony.", content: "Wyniki zostaną ogłoszone 8 grudnia na naszym profilu <a href='https://facebook.com/FriscoPL'>FriscoPL</a>.", size: Popup.SIZE.NORMAL, type: Popup.TYPE.MESSAGE});
			setTimeout(function(){ core.setState('defaultState'); }, 5000);
			return;
		}
		var voucher = (location.search.match(/voucherCode=(\w+)(&|$)/) || [])[1];
		$("body").addClass("notfixed");
		$('#page_content').jqotesub(frisco.getTemplate('october_contest_step2'), {voucher: voucher});
		addOctoberContestProducts();
		$("#page_content .holiday-contest .scroll").click(function(){
			$("html, body").animate({scrollTop: $("#section .big-kw").offset().top});
		});
		if (location.search == "?scroll") {
			$("html, body").animate({scrollTop: 900});
		}
		else {
			$('html, body').animate({scrollTop: $("#page_content").offset().top});
		}
		if (voucher && !Ribbon.get("voucher-info").length) {
			var ribElem = Ribbon.load({ container: "voucher-info", reusable: true, position: "up", color: "green", html: "Twój kupon to: "+voucher+"<span><br>Aby wziąć udział w konkursie, kliknij <a href='/stn,wygraj-kurs/?scroll'>tutaj</a>.</span>" });
			ribElem.hide();
			friscoEvents.hook('octoberContest', friscoEvents.FEV_ON_STATE_ENTER, function(params) {
				Ribbon.hide("ribbon_blue_up", true); // hide the ribbon from cms about the contest
				ribElem.show();
			}, {type: friscoEvents.FEV_TYPE_ONETIME});
		}
	};

	var loadCookingABCPage = function(prevState, subState, parameters) {
		var total = ABC_recipes.length;
		var num = parseInt(parameters.nr) || 1;
		if (num < 1 || num > total) num = 1;
		var next = num == total ? 1 : num+1;
		$('#page_content').jqotesub(frisco.getTemplate('abc_lp'), {num: num, total: total, recObj: ABC_recipes[num-1], next: next, nextTitle: ABC_recipes[next-1].title});
		document.title = ABC_recipes[num-1].title + " - ABC gotowania - Frisco.pl";
		$("body").addClass("notfixed");
		var all_products = {};
		cms.abc(num, function(data){
			var left = data.length;
			$.each(data, function(i, val) {
				var all = {}, to_show = [];
				$.each(val.products, function(i, prod_id) {
					if (prod_id.substr(-2) == "-h")
						prod_id = prod_id.substr(0, prod_id.length - 2);
					else
						to_show.push(prod_id);
					all[prod_id] = 1;
				});
				var recipe = $('#' + val.container);
				recipe.find('.photo img').attr('src', val.foto1);
				recipe.find('.image img').attr('src', val.foto2);
				all_products[val.container] = all;
				api.getProducts(to_show, function(products){
					frisco.renderProducts(recipe.find('.products'), products, true);
					if (--left == 0)
						renderCartContent();
				});
				try {
					var title = ABC_recipes[num-1].title, pin_img = val.foto1;
					recipe.find('p.photo').after('<div class="fb"><span class="fb-like" data-href="' + location.href + '#!" data-layout="button_count" data-send="false" data-show-faces="false" data-width="270"></span><span class="pinterest"><a href="//pinterest.com/pin/create/button/?url=' + encodeURIComponent(location.href) + '&media=' + encodeURIComponent(pin_img) + '&description=' + encodeURIComponent(title) + '" data-pin-do="buttonPin" data-pin-config="beside" target="_blank"></a></span></div>');
				} catch (e) {}
			});
			startFacebookAndPinterest();
		});
		$("#lp .add-all").click(function(){
			var btn = $(this);
			if (btn.hasClass("active"))
				return false;
			btn.addClass("active");
			
			var reqData = $.extend({}, all_products[btn.closest(".recipe-lp").attr("id")]); // Because reqData can be modified later, prepare object copy
			
			var cd = friscoStorage.getShallow('cartData');
			$.each(cd.entries, function(i, v){
				if (reqData[v.product_id])
					reqData[v.product_id] = v.amount + reqData[v.product_id];
			});
			
			api.updateProductsInCart(reqData, null, function(){
				friscoEvents.fire('abc', friscoEvents.FEV_CART_INVALIDATED, {});
				btn.removeClass("active");
			});
			return false;
		});
		cms.video_lp_top_boxes(displayLPTopBanners);
	};
	
	var displayActionHome = function(action, asHomePage, renderContent) {
		cms.action_home(action, function(data){
			if (loggedUserId && !data.maly_hp[1].link)
				data.maly_hp[1].link = '/stn,iList';
			else
				data.maly_hp[1].link = null;
			data.moreBanners = asHomePage;
			$("<div id='action-home'>").jqoteapp(frisco.getTemplate('action_home'), data).insertAfter($("#main-banner-container"));
			
			var ensureOneLine = _.throttle(function() {
				$("#action-home .products").each(function(i, container){
					container = $(container);
					var count = Math.floor(container.width() / 165 - 1);
					container.children(".productId").css('display', '').filter(":visible").slice(count).hide();
				});
			}, 200);
			
			var render = function(i, ids){
				api.getProducts(ids, function(prods) {
					var wrapper = $("#action-products-"+i);
					frisco.renderProducts(wrapper, prods, true, {gaAttr: "Strona-glowna"});
					ensureOneLine();
				}, loggedUserId, null, null, true);
			};
			
			render(0, data.products);
			if (asHomePage) {
				api.getCampaignProducts('2015_Promocje', function(data) { render(2, data.productsIds); });
				api.getCampaignProducts('2015_Nowości',  function(data) { render(3, data.productsIds); });
			}
			
			var recom_campaign = function() {
				api.getCampaignProducts('2015_Polecamy', function(data) { render(1, data.productsIds); });
			};
			var recom_ilist = function(cbk) {
				// show only available and updated products that are currently not in cart
				var filters = {
					'status' : [FRISCO.PRODUCT_STATUS_AVAILABLE, FRISCO.PRODUCT_STATUS_UPDATED], 
					'in_cart' : true
				}; 
				
				api.getProfiledBoughtProducts(loggedUserId, 1, 10, null, filters, function(products) {
					if (products.length >= 6) {
						frisco.renderProducts($("#action-products-1"), products, function(x) {
							return !x.is_alcohol && x.image_id > 0;
						}, {gaAttr: "Strona-glowna"});
					}
					
					if (cbk && cbk instanceof Function) 
						cbk(products);
				});
			};
			
			if (loggedUserId) {
				if (renderContent) { // loaded from tpl, full home page load
					recom_ilist(function(ps) {
						if (ps.length < 6)
							recom_campaign();
					});
				} else {
					if ($("#list4You").children().length == 0) {
						recom_campaign();
					} else {
						$("#list4You").children().clone().appendTo($("#action-products-1"));
					}
				}
			} else {
				recom_campaign();
			}
			
			$(window).bind("resize.action", ensureOneLine);
			friscoEvents.hook("action", friscoEvents.FEV_ON_STATE_ENTER, function(){
				$(window).unbind("resize.action");
			}, {type: friscoEvents.FEV_TYPE_ONETIME});
		});
	};
	
	var displayActionRecipes = function(data) {
		$('#page_content').jqotesub(frisco.getTemplate('action_recipes'), {data: data});
		document.title = data.header.title + " - Frisco.pl";
		$("body").addClass("notfixed");
		var all_products = {};
		var left = _.size(data.recipes);
		var recipes = $("#page_content .recipe-lp");
		_.each(data.recipes, function(recipeData, i) {
			var all = {}, ids = recipeData.products;
			_.each(ids, function(prod_id) {
				all[+prod_id] = 1;
			});
			var recipe = recipes.eq(i);
			all_products[i] = all;
			api.getProducts(ids, function(products){
				frisco.renderProducts(recipe.find('.products'), products, true);
				if (--left == 0)
					renderCartContent();
			}, loggedUserId, null, null, true);
			try {
				var title = recipeData.title, pin_img = recipeData.img;
				recipe.find('p.photo').after('<div class="fb"><span class="fb-like" data-href="' + location.href + '#!" data-layout="button_count" data-send="false" data-show-faces="false" data-width="270"></span><span class="pinterest"><a href="//pinterest.com/pin/create/button/?url=' + encodeURIComponent(location.href) + '&media=' + encodeURIComponent(pin_img) + '&description=' + encodeURIComponent(title) + '" data-pin-do="buttonPin" data-pin-config="beside" target="_blank"></a></span></div>');
			} catch (e) {}
		});
		startFacebookAndPinterest();
		
		$("#lp .add-all").click(function(){
			var btn = $(this);
			if (btn.hasClass("active"))
				return false;
			btn.addClass("active");
			
			var reqData = $.extend({}, all_products[btn.closest(".recipe-lp").index()]); // Because reqData can be modified later, prepare object copy
			
			var cd = friscoStorage.getShallow('cartData');
			$.each(cd.entries, function(i, v){
				if (reqData[v.product_id])
					reqData[v.product_id] = v.amount + reqData[v.product_id];
			});
			
			api.updateProductsInCart(reqData, null, function(){
				friscoEvents.fire('abc', friscoEvents.FEV_CART_INVALIDATED, {});
				btn.removeClass("active");
			});
			return false;
		});
	};
	
	var displayActionLP = function(action, data) {
		cms.action_home(action, function(banners){
			$('#page_content').jqotesub(frisco.getTemplate('action_products'), {action: action, data: data, banners: banners.long, moreText: data.moreText, sections: data.sections});
			var ids = [].concat.apply([], _.pluck(data.sections, 'ids'));
			
			api.getProducts(ids, function(allprods) {
				_.each(data.sections, function(section, nr) {
					var container = $("#page_content #section" + nr);
					var prods = allprods.splice(0, section.ids.length);
					frisco.renderProducts(container, prods, true, {gaAttr: "Strona kontentowa"});
				});
			}, loggedUserId, null, null, "exact");
		});
	};
	
	var loadHerbsRecipes = function(prevState, subState, parameters) {
		var routes = {
			'przepis1' : 'przepis_1',
			'przepis2' : 'przepis_2'
		};
		var lp = routes[core.getCurrentState()];
		if (!lp)
			return loadDefaultState();
		cms.action_recipes_old(function(lps){
			if (!lps || !lps[lp])
				return loadDefaultState();
			// convert data format
			var c = lps[lp];
			var data = {header: {title: c.title, html: c.text, img: c.img}, recipes: Herbs_recipes[lp].recipes};
			_.each(data.recipes, function(r, i){
				r.img = c['img'+(i+1)];
				r.products = c.products[i+1];
			});
			displayActionRecipes(data);
		});
	};
	
	var routeAction = function(action) { return function(prevState, subState, parameters) {
		var route = parameters.n;
		if (!route) {
			$('#page_content').jqotesub(frisco.getTemplate('action_home_wrapper'), {});
			displayActionHome(action, false, true);
		} else {
			cms.action_recipes(action, function(data1){
				var recipe = _.find(data1, function(r){ return r.header.url == route});
				if (recipe) {
					displayActionRecipes(recipe);
				} else cms.action_lps(action, function(data2){
					var lp = _.find(data2, function(r){ return r.url == route});
					if (lp) {
						displayActionLP(action, lp);
					}
					else {
						core.setState(core.getCurrentState());
					}
				});
			});
		}
	}};
	
	var loadHerbsProductsPage = function(prevState, subState, parameters) {
		var routes = {
			'zielnik'   : 'lp_zielnik',
			'ziola-all' : 'lp_zielnik',
			'mieta'     : 'lp_mieta',
			'kielki'    : 'lp_kielki',
			'trawa'     : 'lp_trawa',
			'oliwa'     : 'lp_nieoczywiste'
		};
		var lp = routes[core.getCurrentState()];
		if (!lp)
			return loadDefaultState();
		
		cms.action_lps('ziola', function(all){
			if (!all || !all[lp])
				return loadDefaultState();
			if (lp == 'lp_zielnik')
				all[lp].main = true;
			displayActionLP('ziola', all[lp]);
		});
	};

	var startFacebookAndPinterest = function() {
		if (_.isFunction(window.smSocInit))
			window.fbAsyncInit = smSocInit;
		(function(d, s, id) {
			var js, fjs = d.getElementsByTagName(s)[0];
			if (d.getElementById(id)) return;
			js = d.createElement(s); js.id = id;
			js.src = "//connect.facebook.net/pl_PL/sdk.js#xfbml=1&version=v2.2";
			fjs.parentNode.insertBefore(js, fjs);
		}(document, 'script', 'facebook-jssdk'));
		if (typeof FB != "undefined") FB.XFBML.parse(); /* In order to parse like button after navigation */
		(function(d, s, id) {
			var js, fjs = d.getElementsByTagName(s)[0];
			if (d.getElementById(id)) return;
			js = d.createElement(s); js.id = id;
			js.src = "//assets.pinterest.com/js/pinit.js";
			js.setAttribute("data-pin-zero", "1");
			js.setAttribute("data-pin-build", "parsePins");
			fjs.parentNode.insertBefore(js, fjs);
		}(document, 'script', 'pinterest-js'));
		if (typeof parsePins != "undefined") parsePins(); /* In order to parse pinit button after navigation */
	};

	var initFridgeProducts = function(parameters, data) {
		var all_products = {};
		var left = data.length;
		$.each(data, function(i, val) {
			var all = {}, to_show = [];
			$.each(val.products, function(i, prod_id) {
				if (prod_id.substr(-2) == "-h")
					prod_id = prod_id.substr(0, prod_id.length - 2);
				else
					to_show.push(prod_id);
				all[prod_id] = 1;
			});
			var recipe = $('#' + val.container);
			all_products[val.container] = all;
			api.getProducts(to_show, function(products){
				frisco.renderProducts(recipe.find('.products'), products, true);
				if (--left == 0) {
					renderCartContent();
					if (parameters.scroll) {
						$("body, html").animate({scrollTop: $(".recipe-lp").eq(parameters.scroll - 1).offset().top}, 500);
					}
				}
			});
		});

		$("#lp .add-all").click(function(){
			var btn = $(this);
			if (btn.hasClass("active"))
				return false;
			btn.addClass("active");
			
			var reqData = $.extend({}, all_products[btn.closest(".recipe-lp").attr("id")]); // Because reqData can be modified later, prepare object copy
			
			var cd = friscoStorage.getShallow('cartData');
			$.each(cd.entries, function(i, v){
				if (reqData[v.product_id])
					reqData[v.product_id] = v.amount + reqData[v.product_id];
			});
			
			api.updateProductsInCart(reqData, null, function(){
				friscoEvents.fire('fridge', friscoEvents.FEV_CART_INVALIDATED, {});
				btn.removeClass("active");
			});
			return false;
		});
		cms.video_lp_top_boxes(displayLPTopBanners);
		$('.recipe-lp').each(function() {
			try {
				var title = $(this).find('h2').text().replace(/Przepis pochodzi.*/, '');
				var pin_img = $(this).find('p.photo img').get(0).src;
				$(this).find('p.photo').after('<div class="fb"><span class="fb-like" data-href="' + location.href + '#!" data-layout="button_count" data-send="false" data-show-faces="false" data-width="270"></span><span class="pinterest"><a href="//pinterest.com/pin/create/button/?url=' + encodeURIComponent(location.href) + '&media=' + encodeURIComponent(pin_img) + '&description=' + encodeURIComponent(title) + '" data-pin-do="buttonPin" data-pin-config="beside" target="_blank"></a></span></div>');
			} catch (e) {}
		});
		startFacebookAndPinterest();
	};

	var loadFridgeCMSPage = function(prevState, subState, parameters) {
		var num = +parameters.p || 1;
		cms.fridge_page(num, function(data) {
			data = _.values(data)[0];
			if(!data.header.title && num != 1) core.setState('magazynfrisco', null, {p: 1});
			cms.fridge_routing(function(urls) {
				data.num = num;
				data.nextTitle = urls[num+1] || urls[1];
				data.prevTitle = urls[num-1];
				$('#page_content').jqotesub(frisco.getTemplate('fridge_lp'), data);
				document.title = "Magazyn Frisco " + num + " - " + data.title + " - Frisco.pl";
				initFridgeProducts(parameters, data.recipes);
			});
		});
		$("body").addClass("notfixed");
	};

	var loadFridgeSlugCMSPage = function(prevState, subState, parameters) {
		if (!parameters.n)
			loadFridgeCMSPage(prevState, subState, {p: 1});
		cms.fridge_routing(function(urls) {
			var num = _.indexOf(urls, parameters.n);
			if (num >= 0)
				loadFridgeCMSPage(prevState, subState, {p: num});
			else
				loadError404();
		});
	};

	var loadCriteoLandingPage = function(prevState, subState, parameters) {
		if (!parameters.ids) {
			core.setState('defaultState');
			return;
		}
		var ids = [];
		$.each(parameters.ids.split(','), function(i, x) { if(+x) ids.push(+x); });
		
		var title = __("Zobacz produkty, jakie przygotowaliśmy dla Ciebie");
		$('#page_content').jqotesub(frisco.getTemplate('criteo_landing_page'), {title: title});
		document.title = title + " - Frisco.pl";
		
		Loader.load(Loader.TYPE.APPEND, "ul#lp-products", "zaczekaj chwilę...");
		api.getProducts(ids, function(products){
			var width = 168;
			var count = Math.floor($("#popular_products").innerWidth() / width);
			var first_part = products.splice(0, count);
			
			frisco.renderProducts($('#popular_products .products'), first_part, false);
			$('#popular_products').css('visibility', 'visible');
			
			if (!products.length) {
				Loader.hide();
				return;
			}
			
			var final_products = [];
			
			var finalCbk = function() {
				final_products = final_products.sort(function(a, b) {
					if (a.category == b.category) return 0;
					return a.category < b.category ? -1 : 1;
				});
				
				Loader.hide();
				frisco.renderProducts($('#lp-products'), final_products, false);
			};
			
			$.each(products, function() {
				// TODO: this will be rewritten so that api has a switch to return category info in getProducts(); 
				// doing 40 (or so) _separate_ requests just for that is insanity
				api.getProduct(this.product_id, function(p) {
					p.category = $.map(friscoHelpers.buildBreadCrumbsFromProductCategories(p), function(e) {return String(e.category_id).lpad(0, 4)}).join(',');
					final_products.push(p);
					if (final_products.length == products.length)
						finalCbk();
				}, loggedUserId);
			});
			
			
		}, loggedUserId, undefined, undefined, true, false, undefined, true);
	}
    
	var loadPartnerSite = function(prevState, subState, parameters) {
		if (!parameters.ids) {
			core.setState('defaultState');
			return;
		}
		var ids = [];
		var quantities = {};
		$.each(parameters.ids.split(','), function(i, x) {
			if (x.indexOf("-") > -1) {
				var q = x.split("-");
				x = +q[0];
				quantities[x] = +q[1];
			}
			if(+x) ids.push(+x);
		});
		
		var types = {
			'partner-site': {title: "Idealny plan żywieniowy specjalnie dla Ciebie", left_title: "IDEALNY PLAN<br> ŻYWIENIOWY DLA CIEBIE", left_desc: "Wybierz składniki lub&nbsp;zamów wszystkie produkty z tej oferty", left_button: "ZAMÓW WSZYSTKIE »"},
			'wszystko-do-koszyka': {title: "Gotowa lista zakupowa", left_title: "GOTOWA LISTA ZAKUPOWA", left_desc: "Wrzuć wszystkie produkty do koszyka jednym kliknięciem", left_button: "DO KOSZYKA »"},
		};
		var current_options = types[core.getCurrentState()];
		
		$('#page_content').jqotesub(frisco.getTemplate('partner_site'), current_options);
		$("#order_all").click(function(){
			var btn = $(this);
			if (btn.hasClass("active"))
				return false;
			btn.addClass("active");
			var reqData = {}
			$.each(ids, function(i, id) {
				reqData[id] = quantities[id] || 1;
			});
			var cd = friscoStorage.getShallow('cartData');
			$.each(cd.entries, function(i, v){
				if (reqData[v.product_id])
					reqData[v.product_id] = v.amount + reqData[v.product_id];
			});
			
			api.updateProductsInCart(reqData, null, function(){
				friscoEvents.fire('cart', friscoEvents.FEV_CART_INVALIDATED, {});
				btn.removeClass("active");
			});
		});
		var title = current_options.title;
		document.title = title + " - Frisco.pl";
		api.getProducts(ids, function(products){
			// Since some product may have been not shown, update ids list for "add all" button
			ids = $.map(products, function(p) { return p.product_id; });
			
			frisco.renderProducts($('#lp-products'), products, false, function(prod){
				var q = quantities[prod.product_id];
				if (q)
					return {amount: q, customAmount: true}
				return {}
			});
			friscoEvents.fire('parallax', friscoEvents.FEV_PARALLAX_SCROLL, {scroll: true});
		}, loggedUserId, undefined, undefined, true);
	}
    
	var pqsLandingPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('pqs_landing'));
		var cbk = function(data) {
			SlotManager.clearSlots();
			SlotManager.registerSlot("#pqs-products", data['PQS_i_Ariel']);
			SlotManager.enableLoadSlots();
		};
		var p = {}; p[friscoStorage.PARAM_FOLLOWER_CALLBACK] = cbk;
		friscoStorage.get("promoproducts", p);
		
		$('.pork-banner ul.pork-nav li a').click(function(ev){
			if ($(this).parent().hasClass('active')) {
				$('.pork-banner .hidden').removeClass('active');
				$('.pork-banner ul.pork-nav li').removeClass('active');
			} else {
				$('.pork-banner .hidden').removeClass('active');
				$('.pork-banner ul.pork-nav li').removeClass('active');
				var className=$(this).parent().attr('class')
				$('.pork-banner .hidden.'+className).addClass('active');
				$(this).parent().addClass('active');
			}
		});
		
		$('.pork-banner a.close').click(function(ev){
			$('.pork-banner .hidden').removeClass('active');
			$('.pork-banner ul.pork-nav li').removeClass('active');
		});
		
	};

	var mikolajki13LandingPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('mikolajki13_landing'));
		var cbk = function(data) {
			SlotManager.clearSlots();
			SlotManager.registerSlot("#mikolajki13-products", data['mikolajki13']);
			SlotManager.enableLoadSlots();
		};
		var p = {}; p[friscoStorage.PARAM_FOLLOWER_CALLBACK] = cbk;
		friscoStorage.get("promoproducts", p);
	};
	
	var helpForumPage = function(prevState, subState, parameters) {
		// Zendesk forgot CORS on category requests, so we have "cached" categories here
		var categoryMap = {
			20114152: {"url":"https://frisco.zendesk.com/api/v2/categories/20114152.json","id":20114152,"name":"Częste pytania Klientów","description":"","position":2},
			20114202: {"url":"https://frisco.zendesk.com/api/v2/categories/20114202.json","id":20114202,"name":"Pierwsze zakupy","description":"","position":0},
			20114222: {"url":"https://frisco.zendesk.com/api/v2/categories/20114222.json","id":20114222,"name":"Regulaminy","position":9999},
		};
		var UNKNOWN_CATEGORY = "Nieznana kategoria";
		var base_template = frisco.getTemplate('help_zendesk_wrapper');
		var zendesk = FriscoApiManager.getZendeskApiClient();
		var categories;
		
		var addBodyClass = function(classNames) {
			$("body").addClass(classNames);
			friscoEvents.hook('zendesk_help', friscoEvents.FEV_ON_STATE_ENTER, function(){
				$("body").removeClass(classNames);
			}, {type: friscoEvents.FEV_TYPE_ONETIME});
		};
		
		var bindForm = function() {
			$("#ticketform").submit(function(event){
				event.preventDefault();
				var result = {};
				$.each($(this).serializeArray(), function(i, el) {
					result[el.name] = el.value;
				});
				if (result.a_comment_body)
					return; // spam
				if (!result.email || !result.subject || !result.body)
					return Popup.load({content: "Wypełnij wszystkie pola.", size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR, timeout: Popup.TIMEOUT.LONG});
				$(this).css("opacity", 0.5);
				if (result.order)
					result.subject += " (nr zam.: " + result.order + ")";
				zendesk.submitRequest(result.email, result.subject, result.body, function(res, error){
					if (!error && res && res.success) {
						$("#ticketform").hide();
						$("#thanks").show();
					} else {
						$("#ticketform").css("opacity", 1);
						if (error)
							Popup.load({content: error, size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR, timeout: Popup.TIMEOUT.LONG});
					}
				});
			});
			$("#searchform").submit(function(event){
				event.preventDefault();
				core.setState("pomoc", null, {page: "search", query: $("#query").val()}, null, false, true);
			});
		};
		
		switch (parameters.page) {
		case "search":
			var query = parameters.query || decodeURIComponent(((location.search.match(/query=([^&]+)(&|$)/) || [])[1] || "").replace(/\+/g, " "));
			var LEN = 200;
			zendesk.search(query, function(results){
				zendesk.getForums(function(forums){
					var forumById = _.object(_.pluck(forums, 'id'), forums);
					_.each(results, function(res) {
						res.forum = forumById[res.forum_id];
						res.category_name = categoryMap[res.forum.category_id].name || UNKNOWN_CATEGORY;
						res.excerpt = res.body.replace(/<[^>]+>/ig, "");
						if (res.excerpt.length > LEN)
							res.excerpt = res.excerpt.substr(0, res.excerpt.lastIndexOf(' ', LEN)) + '...';
					});
					addBodyClass("categories");
					$('#page_content').jqotesub(base_template, {help_template: 'help_zendesk_search', results: results, query: query.replace(/"/g, '&quot;')});
					bindForm();
					document.title = query + " - Szukaj - Pomoc - Frisco.pl";
				});
			});
			break;
		case "topic":
			zendesk.getTopic(parameters.id, function(topic){
				zendesk.getCachedForum(topic.forum_id, function(forum){
					var category_name = categoryMap[forum.category_id].name || UNKNOWN_CATEGORY;
					addBodyClass("entries-show");
					topic.created_at = topic.created_at.split('T')[0];
					topic.body = topic.body.replace(/(https?:\S+?)(<|\.\s|!|,|;|\s|$)/, '<a href="$1">$1</a>$2');
					$('#page_content').jqotesub(base_template, {help_template: 'help_zendesk_topic', category_name: category_name, forum: forum, topic: topic});
					bindForm();
					document.title = topic.title + " - Pomoc - Frisco.pl";
				});
			});
			break;
		case "forum":
			zendesk.getCachedForum(parameters.id, function(forum){
				zendesk.getCachedTopics(parameters.id, function(topics){
					var category_name = categoryMap[forum.category_id].name || UNKNOWN_CATEGORY;
					topics = _.sortBy(topics, 'updated_at').reverse();
					addBodyClass("forums forums-show");
					$('#page_content').jqotesub(base_template, {help_template: 'help_zendesk_forum', category_name: category_name, forum: forum, topics: topics});
					bindForm();
					document.title = forum.name + " - Pomoc - Frisco.pl";
				});
			});
			break;
		case "category":
			categories = [parameters.id];
		default:
			zendesk.getForums(function(forums){
				var forumsByCategory = _.groupBy(forums, 'category_id');
				categories = categories || _.chain(forums).pluck('category_id').uniq().value();
				categories = _.chain(categories).map(function(id){
					var cat = categoryMap[id] || {name: UNKNOWN_CATEGORY, id: id};
					cat.forums = _.sortBy(forumsByCategory[id], 'position');
					return cat;
				}).sortBy('position').value();
				$('#page_content').jqotesub(base_template, {help_template: 'help_zendesk_home', categories: categories, singleCategory: parameters.page == "category"});
				bindForm();
				if (parameters.page == "category")
					document.title = categories[0].name + " - Pomoc - Frisco.pl";
				else
					document.title = "Pomoc - Frisco.pl";
				
				// Fetch forum topics
				$.each(forums, function(i, forum) {
					zendesk.getCachedTopics(forum.id, function(topics){
						var forumDom = $("#forum_" + forum.id);
						forumDom.find(".sub-counter").text("(" + topics.length + ")");
						var pinnedTopics = _.chain(topics).sortBy('updated_at').last(3).map(function(topic){
							return '<li class="fade_truncation_outer articles">\
								<div class="fade_truncation_inner"></div>\
								<span><a href="/stn,pomoc/page,topic/id,' + topic.id + '">' + topic.title + '</a></span>\
							</li>'
						}).value().reverse().join("");
						forumDom.find("ul").append(pinnedTopics);
					});
				});
			});
		}
	};
	
	var metroLandingPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('metro112013_landing'));
		var cbk = function(data) {
			SlotManager.clearSlots();
			SlotManager.registerSlot("lp-products", data['metro112013']);
			SlotManager.enableLoadSlots();
		};
		var p = {}; p[friscoStorage.PARAM_FOLLOWER_CALLBACK] = cbk;
		friscoStorage.get("promoproducts", p);
		
		$("div#seeMore").bind("click", function() {
			core.setState('informacje-prasowe', null, {'art': '2013-11-05'});
		});
	};

	var friscoMobileLandingPage = function() {
		$('#page_content').jqotesub(frisco.getTemplate('frisco_mobile'));
	};

	var zamowNajwyzszaJakoscLandingPage = function() {
		$('#page_content').jqotesub(frisco.getTemplate('zamow_najwyzsza_jakosc'));
		if ($(window).scrollTop() > 180)
			$(window).scrollTop(180);
	};
	
	var bestpriceLandingPage = function(prevState, subState, parameters) {
		var v = new Date(); 
		var lastTu = null, lastMo = null, lastTh = null; 
		for (var i=1; i<8; i++) {
			if ( new Date(v - i*24*60*60*1000).getDay() == 4 ) { lastTh = new Date(v - i*24*60*60*1000); continue; }
			if ( new Date(v - i*24*60*60*1000).getDay() == 2 ) { lastTu = new Date(v - i*24*60*60*1000); continue; }
			if ( new Date(v - i*24*60*60*1000).getDay() == 1 ) { lastMo = new Date(v - i*24*60*60*1000); continue; }
		}
		
		var cpDate;
		if (v.getDay() < 2 || (v.getDay() == 2 && v.getHours() < 15) || (v.getDay() >= 5 && v.getHours() > 14) ) { cpDate = lastTh; } // Mo, Tu<16 + Fr>16, So, Su
		else { cpDate = lastMo; } // We, Th
		
		$('#page_content').jqotesub(frisco.getTemplate('bestprice_landing'), {'cartDate': lastTu, 'compDate' : cpDate});
		$('#tesco-popup .close a').click(function(){ $('#tesco-popup').hide(); return false; });
		$("#tesco-popup .scroll").click(function() { return false; });
		$('#tesco-lista .list a.show-popup').click(function(){
			$('#tesco-popup').show();
			$(document).one('click', function(){
				$('#tesco-popup').hide();
			})
			return false;
		});
		var show_category = function(cat) {
			$('#tesco-header h3').text($('#tesco-selector a[x-cat="' + cat + '"]').text());
			$('ul#tesco-products').html("");
			SlotManager.clearSlots();
			SlotManager.registerSlot("ul#tesco-products", [], undefined, {query: {c: [cat], t: ["3400836"], q: ''}});
			SlotManager.enableLoadSlots();
		};
		$('#tesco-selector a').click(function(){
			show_category($(this).attr('x-cat'));
			return false;
		});
		show_category('2403');
	};

	var genericTabLanding = function(prevState, subState, parameters) {
		var pagesForState = {
			'dziendziecka': {template: 'kidsday_lp'},
			'potrawy-na-grilla': {template: 'grill_meals_lp'},
		};
		var state = core.getCurrentState();
		var pageData = pagesForState[state];
		$('#page_content').jqotesub(frisco.getTemplate(pageData.template), {});
		var show_campaign = function(name) {
			var cbk = function(data) {
				SlotManager.clearSlots();
				SlotManager.registerSlot("ul#tesco-products", data.productsIds);
				SlotManager.enableLoadSlots();
			};
			$('#tesco-selector a').removeClass('active');
			$('#tesco-selector a[x-camp="' + name + '"]').addClass('active');
			$('ul#tesco-products').html("");
			api.getCampaignProducts(name, cbk);
		};
		var show_category = function(cat) {
            $('#tesco-selector a').removeClass('active');
            $('#tesco-selector a[x-cat="' + cat + '"]').addClass('active');
			$('ul#tesco-products').html("");
			SlotManager.clearSlots();
			SlotManager.registerSlot("ul#tesco-products", [], undefined, {query: {c: [cat], t: [], q: ''}});
			SlotManager.enableLoadSlots();
		};
		$('#tesco-selector a[x-cat]').click(function(){
			show_category($(this).attr('x-cat'));
			return false;
		});
		$('#tesco-selector a[x-camp]').click(function(){
			show_campaign($(this).attr('x-camp'));
			return false;
		});
		
		var num = +(location.search.match(/section=(\d+)/) || [])[1] || 0;
		var first = $('#tesco-selector a').eq(num);
		if (first.attr('x-cat'))
			show_category(first.attr('x-cat'));
		else
			show_campaign(first.attr('x-camp'));
	};

	var recommendedProductsPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('recommendations'));
		
		Fablo.recommendations.forUser({
			user: loggedUserId,
			container: '#recommendations ul',
			productTemplate: FabloConfig.productRenderer,
			results: 30,
			attributes: 'status=0&&acc'+FabloConfig.userGroup+'=1',
			productHeight: 350,
			productWidth: 180,
			onNoRecommendations: function() { $('#recommendations').html('brak rekomendacji'); }
		});
	};
    
    var giftLandingPage = function(prevState, subState, parameters) {
        if (loggedUserId) {
            core.setState('defaultState');
            return;
        }
        loadDefaultState(core.getCurrentState(), core.getCurrentSubstate(), core.getCurrentParameters())
        api.getGifts(function(res) {
            var gifts = res.gifts;
            var priceRound = Math.round(res.gifts[0].product.price_gross / 500) * 5;
            priceRound = Math.max(priceRound, 5);
            priceRound = Math.min(priceRound, 100);
            var closePopup = function() {
                $('#gift-popupbackground').remove();
            };
            $('body').jqoteapp(frisco.getTemplate('gifts_popup'), {gifts: gifts, priceRound: priceRound.toFixed(0)});
            $('#gift-popup .close').click(function() {
                closePopup();
                core.setState('defaultState');
                return false;
            });
            $('#gift-popup form').validate({
                rules: {email: {required: true, email: true}},
                highlight: function(el) { $(el).parent().addClass('error'); },
                unhighlight: function(el) { $(el).parent().removeClass('error'); },
                errorPlacement: function() {},
                submitHandler: function() {
                    var email = $("#gift-popup input[name=email]").val();
                    Rum.rumEvent(Rum.EMAIL_DROP_EVENT, email+"|gift-landing|"+parameters.src, loggedUserId);
                    api.putGiftEmail({
                        email: email,
                        source: parameters.src
                    }, function(res) {
                        if(res && res.success) {
                            closePopup();
                            _tdEmailThxPage("gifts", true);
                        } else {
                            $("#gift-popup input[name=email]").parent().addClass('error');
                            Popup.load({content: __('Podany przez Ciebie adres e-mail już jest w naszej bazie.'), size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR});
                        }
                    });
                }
            });
        });
    };

    var giftActivationPage = function(prevState, subState, parameters) {
        if(!parameters.email || !parameters.hash) {
            core.setState('defaultState');
            return;
        }
        $("body").addClass("notfixed");
        api.getGifts(function(res) {
            var gifts = res.gifts;
            var priceRound = Math.round(res.gifts[0].product.price_gross / 500) * 5;
            priceRound = Math.max(priceRound, 5);
            priceRound = Math.min(priceRound, 100);
            $('#page_content').jqotesub(frisco.getTemplate('gift_activation'), {gifts: gifts, priceRound: priceRound.toFixed(0)});
            $(window).scrollTop(220);
            $('#gift-activation .add-gift').bind('click.gift', function() {
                var giftId = $(this).attr('x-gift-id');
                var giftEl = $(this).closest('.gift');
                api.postGiftChoice({
                    email: parameters.email,
                    hash: parameters.hash,
                    giftId: giftId
                }, function(res, error) {
                    if(res && res.success) {
                        friscoEvents.fire('gift', friscoEvents.FEV_CART_INVALIDATED, {});
                        $('#gift-activation .on-thx-show, #gift-activation .on-thx-hide').toggle();
                        giftEl.siblings('.gift').hide();
                        giftEl.find('.add-gift').addClass("small").html("Kontynuuj <br>zakupy &raquo;").unbind('click.gift');
                    } else {
                        if (error.length && error[0] == "Wrong email")
                            Popup.load({content: __('Ten adres e-mail nie otrzymał prezentu lub link jest uszkodzony.'), size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR});
                        else
                            Popup.load({content: __('Wybrałeś swój prezent już wcześniej.'), size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING});
                        core.setState('defaultState');
                    }
                });
                return false;
            });
        });
    };

	var loadPressInfoPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('press_info'));
		document.title = $('#page_content h3').eq(0).text() + " - Frisco.pl";
		if(parameters.art) {
			var art = $('#press-releases').find('#art-' + parameters.art);
			if(art.length) {
				$('#press-releases .press-article').removeClass('visible');
				art.addClass('visible');
			}
		}
	};
	
	var loadPressHeadingsPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('press_headings'));
		document.title = $('#page_content h2').eq(0).text() + " - Frisco.pl";
		$(window).scrollTop(180);
	};

	var loadCodesPage = function(prevState, subState, parameters) {
		cms.codes_config(function(data){
			document.title = data.h1 + " - Frisco.pl";
			$('#page_content').jqotesub(frisco.getTemplate('codes'), data);
		});
	};

	function genericTrainingPage(id, title, template, stateName, columns, parsing){
		return function(prevState, subState, parameters) {
			$("body").addClass("notfixed");
			if (parameters.p) {
				api.getTrainingPart(id, parameters.p, function(res) {
					document.title = res.name + " - Frisco - supermarket online";
					if (res.partno) {
						if (_.isFunction(parsing))
							res.body = parsing(res.body);
						$('#page_content').jqotesub(frisco.getTemplate(template), {content: res});
						$(window).scrollTop(180);

						if(res.productsFromLinks) {
							frisco.renderProducts($('#part-products'), res.productsFromLinks, true, undefined, undefined, true);
							renderCartContent();
						} else if(res.categories) {
							api.searchProducts(null, res.categories, null, function(totalFound, productsArray, brandsArray, tagsArray, categoriesArray, boughtProducts) {
								frisco.renderProducts($('#part-products'), productsArray || [], true, undefined, undefined, true);
								renderCartContent();
							}, 3, 1, [], false, true);
						}
						startFacebookAndPinterest();
					} else {
						core.setState(stateName);
					}
				});
			} else {
				api.getTrainingParts(id, function(res){
					if (res.trainingparts) {
						document.title = title + " - Frisco - supermarket online";
						if (typeof columns === "undefined")
							columns = $(document).width() >= 1400 ? 5 : 4;
						var parts = [];
						for(var i = 0; i < columns; i++) { parts.push([]); }
						$.each(res.trainingparts, function(i, p) { parts[i % columns].push(p); });
						$('#page_content').jqotesub(frisco.getTemplate(template), {parts: parts, columns: columns});
						$('#page_content img').error(function(){
							$(this).attr('src', '/img/ppd/placeholder.jpg');
						});
					}
				});
			}
			cms.video_lp_top_boxes(displayLPTopBanners);
		};
	};
    
    var recipeParsing = function(text) {
        var el = $('<div/>').html(text);
        
        function splitAndWrap(text, wrapper) {
            if (!text) return '';
            text = _.compact(_.invoke(text.split(/<br>|\n/), 'trim'));
            text = _.map(text, function(e) {return document.createTextNode(e); });
            return $(text).appendTo('<div>').wrap(wrapper).closest('div').html();
        }
        
        return {
            description: el.find('opis').text(),
            recipe: splitAndWrap(el.find('przepis').html(), '<p>'),
            time: el.find('time').text().split(':')[1],
            tags: el.find('tags').text(),
            ingredients: splitAndWrap(el.find('sklad').html(), '<li>'),
        };
    }
    
    var ppdPage = genericTrainingPage(14, 'Poradnik Praktycznej Pani Domu', 'ppd_page', 'praktyczna-pani-domu');
    var recipesPage = genericTrainingPage(15, 'Pyszne Przepisy', 'recipes_page', 'pyszne-przepisy', 4, recipeParsing);
    var xmasRecipesPage = genericTrainingPage(17, 'Świąteczne Przepisy', 'xmas_recipes_page', 'swiateczne-przepisy', 4, recipeParsing);

    var ppdLandingPage = function(prevState, subState, parameters) {
		frisco.hideGUI();
		$('body').jqoteapp(frisco.getTemplate('ppd_landing'));
		bind_email({
			customSubmit: function() {
				$.post('/ppd_subscribe', {
					email: $('#ppd-lp-form input[name="email"]').val(),
					zipcode: $('#ppd-lp-form input[name="zipcode"]').val()
				}, function(res) {
					if(res.success) {
						$('#ppd-form-part').hide();
						$('#ppd-thx-part').show();
					} else {
						Popup.load({content: "Nie udało się zapisać emaila. Sprawdź poprawność wprowadzonych danych.", size: Popup.SIZE.NORMAL, type: Popup.TYPE.ERROR, timeout: Popup.TIMEOUT.NORMAL});
					}
				});
			}
		});
	};
	
	var ppdLandingPageOptOut = function(prevState, subState, parameters) {
		frisco.hideGUI();
		$('body').jqoteapp(frisco.getTemplate('ppd_landing_out'));
	};

	var zamowKoszSwiatecznyPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('zamow_kosz_swiateczny'));
		$('#page_content form').submit(function(ev){
			ev.preventDefault();
			var zendesk = FriscoApiManager.getZendeskApiClient();
			var date = new Date();
			var dateString = date.getDate() + '/' + (date.getMonth()+1);
			var data = {email: $('#inputEmail').val(), phone: $('#inputPhone').val()};
			if (!data.phone && !data.email) {
				Popup.load({content: "Wpisz numer telefonu lub email.", size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR, timeout: Popup.TIMEOUT.LONG});
				return;
			}
			if (data.phone && !data.phone.match(/^\d{9}$/)) {
				Popup.load({content: "Nieprawidłowy numer telefonu (wymagane 9 cyfr)", size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR, timeout: Popup.TIMEOUT.LONG});
				return;
			}
			zendesk.submitRequest(data.email || "zamow@frisco.pl", "Kosz świąteczny - " + dateString, "Nr telefonu: " + data.phone, function(res, error){
				if (!error && res && res.success) {
					$('#page_content form p.button').addClass('thanks').text("Dziękujemy, skontaktujemy się w ciągu 1h.");
					// Google Tag Manager for SALESMORE
					var gtmdata = {
						'event': 'info', 
						'pageTitle': 'Rejestracja',
						'transactionId': 'Z-' + res.ticketId,
					};
					sendGTMEvent(gtmdata);
				} else {
					Popup.load({content: "Upewnij się, że email jest poprawny.", size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR, timeout: Popup.TIMEOUT.LONG});
				}
			});
		});
	};

	var pgAoLandingPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('pg_ao_landing'));
		
		var promoproducts = friscoStorage.get("promoproducts");
		
		var cbk = function(place) {
			SlotManager.clearSlots();
			SlotManager.registerSlot("#ao-products", promoproducts[place || 'pg-ao14-pampers']);
			SlotManager.enableLoadSlots();
		};
		cbk('pg-ao14-pampers');
		
		$('.logo-list li a').click(function(ev){
			$('.logo-list li.active').removeClass('active');
			$(this).parent().addClass('active');
			$('html, body').animate({scrollTop: $('#scrollposition').offset().top});
			ev.preventDefault();
		});
		
		$("#olimpiada li a[rel]").click(function(e) {
			var place = $(this).attr("rel");
			var brand = $(this).data('brand') || place.split('-').pop()
			$("#olimpiada h2 strong").text(brand);
			
			cbk(place);
		});
	};
    
	var loadKubusPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('kubus'));
		$("body").addClass("notfixed");
		document.title = 'Kubuś - Frisco - supermarket online';
		var cache = {};
		var posChanged=true;
		
		function updatemenu(){
			if (posChanged) {
				posChanged = false;
				var posTop=Math.max($('html').scrollTop(), $('body').scrollTop());
				var kubusName;
				
				$(".kubus-details .kubus-submenu li").removeClass('active');
				$(".kubus-group-box.active .kubus-list li.product" ).each(function() {
					var position =  $(this).position();
					if ((posTop > position.top+$(this).height()) && (posTop < position.top  + 2*$(this).height())) {
						kubusName=$(this).attr('id');
						return false;
					}
				});
				$(".kubus-details .kubus-submenu ."+kubusName).addClass('active');
				
				var height=$(window).height();
				var menuHeight=$('.kubus-details .kubus-menu').height();
				var maxmenuHeight=height-menuHeight-5;
				var kubusMenuNumber = $( ".kubus-details .kubus-submenu.active li.active").index();
				var kubusMenuMargin = (kubusMenuNumber * (-115)) + maxmenuHeight/2 - 60;
				var wysokoscmenu = $('.kubus-details .kubus-submenu.active').height() - height;
				
				if ((kubusMenuNumber * (115) +60 > (maxmenuHeight/2)) &&  (-kubusMenuMargin  < wysokoscmenu+260 ))
					$(".kubus-details .kubus-submenu.active li").first().css({ marginTop:  kubusMenuMargin + 'px' });
				else if ((kubusMenuNumber * (115) +60 <= (maxmenuHeight/2)))
					$(".kubus-details .kubus-submenu.active li").first().css({ marginTop: 0 });
			}
		}
		
		function updatePos() {
			var posTop=Math.max($('html').scrollTop(), $('body').scrollTop());
			var height2=$('.kubus-section .kubus-box').height() + $('#wrapper .head.main').height();
			$('.kubus-details .kubus-menu-box').toggleClass('active', posTop>height2+117);
			posChanged = true;
		}
		
		var interval = setInterval(updatemenu, 200);
		$(window).bind('scroll.kubus', updatePos);
		friscoEvents.hook('kubus-page', friscoEvents.FEV_ON_STATE_ENTER, function(){
			clearInterval(interval);
			$(window).unbind('scroll.kubus');
		}, {type: friscoEvents.FEV_TYPE_ONETIME});
		updatePos();
		
		var image_map = {
			4162: 'k2', 13843: 'small-kiwi', 7694: 'jablko', 299: 'pom', 13839: 'banan_truskawka', 4298: 'k4', 4150: 'k1', 4160: 'pom', 4153: 'k5', 4155: 'banan', 4158: 'k2',
			84883: 'pom', 4373: 'pom', 300: 'k1', 4445: 'k1', 5483: 'k4',
			10987: 'jablko', 13834: 'k5', 41815: 'k4',
			13835: 'banan', 13836: 'k4', 13837: 'banan_truskawka',
			38898: 'k1', 38899: 'jablko', 38900: 'banan_truskawka',
		};
		
		cms.kubus(function(sections){
			var display = function(name) {
				$('.kubus-details .kubus-submenu').fadeOut(400).removeClass('active').filter('#m-'+name).delay(400).fadeIn(400).addClass('active').find('li').first().addClass('active');
				$('.kubus-details .kubus-text-box .kubus-group-box').fadeOut(400).removeClass('active').filter('#'+name).delay(400).fadeIn(400).addClass('active');
			}
			var render = function(name, products) {
				$('#'+name+' .kubus-list').jqotesub(frisco.getTemplate('kubus_items'), {products: products, images: image_map, grammage: name == 'kubus_waterr'});
				renderCartContent();
				var menu = $('#m-'+name).empty();
				$.each(products, function(i, prod){
					var id = 'kubus_' + prod.product_id;
					menu.append('<li class="'+id+'"><a href="#'+id+'"><img width="85" height="85" alt="" src="/img/kubus/min/'+prod.product_id+'.jpg"></a></li>');
				});
			}
			var load = function(section, first) {
				if (cache[section])
					return display(section);
				api.getProducts(sections[section], function(products) {
					cache[section] = products;
					render(section, products);
					if (!first) display(section);
				}, loggedUserId, null, null, true, true);
			};
			$('.kubus-details .kubus-menu li a, .kubus-section .kubus-navigation ul li a').click(function(ev){
				var name=$(this).parent().attr('class').replace('active', '').trim();
				load(name);
// 				$('html, body').animate({scrollTop: $('.kubus-details .kubus-text-box').offset().top + 108});
				$('.kubus-navigation .active').removeClass('active');
				$('.kubus-navigation li.'+name).addClass('active');
				var prevItem=$('.kubus-section .header-bg li:visible');
				if (name != 'kubus_start') {
					$('.kubus-section .header-bg li.'+name).css({zIndex: 1}).fadeIn(function(){
						$(this).css({zIndex: 0})
						if (prevItem.get(0) != this)
							prevItem.hide();
					});
				}
				else {
					prevItem.fadeOut();
				}
				ev.stopPropagation();
				ev.preventDefault();
			});
			$('.kubus-details .kubus-submenu').on('click', 'a', function(ev){
				$('html, body').animate({scrollTop: $($(this).attr('href')).offset().top})
				ev.stopPropagation();
				ev.preventDefault();
			});
			// Initially load bestsellers
			Fablo.recommendations.popular({
				container: $(),
				results: 6,
				attributes: "tag_ids=51",
				onProductsRendered: function(data) {
					sections.kubus_start = _.pluck(data, 'id');
					load('kubus_start', true);
				}
			});
		});
	};

	var pdsLandingPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('pds_landing'));
		var state;
		if (subState == "head shoulders") { state = "head-shoulders" }
		else if (subState == "blend a med") { state = "blend-a-med" }
		else { state = subState; }
		
		if ($("#pds-logos div." + state).length) { 
			$("#pds-head").show();
			$("#pds-logos div." + state).addClass("active");
			$("#pds-bottom a." + state).addClass("active");
			
			api.searchProducts(subState, [parameters.c], [3399446], function(totalFound, productsArray, brandsArray, tagsArray, categoriesArray, boughtProducts) {
				if (productsArray.length) {
					frisco.renderProducts($('ul.products'), productsArray, false);
					$('ul.products').parent("li").show();
				}
				renderCartContent();
			}, 15, 1, [], false);
		}
		else if (!subState) {
			$("#pds-head").hide();
		}
		else { 
			$("#pds-head").hide();
			Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
		}
	};

    var tdRedirect = function (prevState, subState, parameters) {
             tradedoubler.tradeDoublerRedirect();
    };

    var smRedirect = function (prevState, subState, parameters) {

             salesmore.salesMoreRedirect();
    };

	var afterSalesSurvey = function(prevState, subState, parameters) {
		var orderUserId = parameters.orderUserId;
		var orderYear = parameters.orderYear;
		var orderId = parameters.orderId;
		var hash = parameters.hash;
		
		if (!orderUserId || !orderYear || !orderId || !hash) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.IMPROPER_PARAMS, timeout: Popup.TIMEOUT.NORMAL });
			core.setState('defaultState');
			return false;
		}
		
		var dumbContainer = document.createElement('div');
		var state = core.getCurrentState();
		
		$(dumbContainer).jqotesub(templates.after_sales_survey_content, { source : parameters.src ? parameters.src : ""});
		
		$.colorbox({
			html : $(dumbContainer),
			onOpen: function(){
				$("#cboxOverlay").addClass("tdLandingPage");
				$("#colorbox").addClass("afterSalesSurvey");
				$("html").addClass("scrollable");
			},
			overlayClose: false, opacity: 1, 
			onClosed: function() {
				$("#cboxOverlayFirstLayer").remove();
				$("#cboxOverlay").removeClass("tdLandingPage");
				$("#colorbox").removeClass("afterSalesSurvey");
				core.setState('defaultState');
			}
		});
		
		$('input').attr('disabled', true);
		api.getOrderReview(orderUserId, orderYear, orderId, hash, function (data) {
			if (data && data.order_id) {
				$('input').removeAttr('disabled');
				$('span.orderDate').html ( friscoHelpers.timestamp2str(data.delivery_date, 1, true) );
			} else {
				Popup.loadMessage({ messageId: Popup.MESSAGES.NO_SUCH_SURVEY, timeout: Popup.TIMEOUT.NORMAL });
				$.colorbox.close();	
				core.setState('defaultState');
				return false;
			}
		});
		
		$("#survey").validate({
			submitHandler : function(form) {
				if($("#survey .radio-line .checked").length == 4) {
					var punctuality = $(form).find('input[name=punctuality]:checked').val();
					var content = $(form).find('input[name=content]:checked').val();
					var support = $(form).find('input[name=support]:checked').val();
					var recommendation = $(form).find('input[name=recommendation]:checked').val();
					
					var commentBox = $(form).find('textarea[name=inputComment]');
					if ( commentBox.attr("value") == commentBox.attr("title"))
						var comment = null;
					else
						var comment = commentBox.val();
					var postdata = {
						punctuality: punctuality,
						content: content,
						support: support,
						recommendation: recommendation,
						comment: comment
					};
					
					$('input').attr('disabled', true);
					
					api.fillOrderReview(orderUserId, orderYear, orderId, hash, postdata, function(review) {
						$('input').removeAttr('disabled');
						if (review && review.orderreview_id) {
							$.colorbox.close();
							Popup.loadMessage({ messageId: Popup.MESSAGES.SURVEY_FINAL, timeout: Popup.TIMEOUT.NORMAL });
							core.setState('defaultState');
							return true;
						} else {
							Popup.loadMessage({ messageId: Popup.MESSAGES.SURVEY_SUBMIT_ERROR, timeout: Popup.TIMEOUT.NORMAL });
						return false;
						}
					});
				
				} else {
					Popup.loadMessage({ messageId: Popup.MESSAGES.SURVEY_INCOMPLETE, timeout: Popup.TIMEOUT.NORMAL });
				}
				return false; // do not commit real submit
			}
		});
		
		$("#survey .radio-line label").click(function() {
			if($(this).hasClass("checked")) {
				return false
			} else {
				$(this).closest(".radio-line").find("label").removeClass("checked");
				$(this).closest(".radio-line").find("input").attr('checked', false);
				$(this).addClass("checked");
				$(this).children("input").attr('checked', true);
				return true
			}
		});
		
		$('#survey textarea.comment').focus(function() {
			if($(this).attr("value") == $(this).attr("title")) { $(this).attr("value","") }
		});
		$('#survey textarea.comment').blur(function() {
			if($(this).attr("value") == "") { $(this).attr("value",$(this).attr("title")) }
		});
		
		if (core.getCurrentState() == "afterSalesSurvey") {
			loadDefaultState(core.getCurrentState(), core.getCurrentSubstate(), core.getCurrentParameters());
		}
	};
	
	var genericPopup = function(template, data, cls, cookie_name, cbk) {
		var dumbContainer = $(document.createElement('div'));
		dumbContainer.jqotesub(template, data);
		dumbContainer.find("a").click($.colorbox.close);
		$.colorbox({
			html : dumbContainer,
			onOpen: function(){
				$("#cboxOverlay").addClass("tdLandingPage");
				$("#colorbox").addClass(cls);
				$("html").addClass("scrollable");
			},
			overlayClose: false,
			opacity: 1,
			onClosed: function() {
				$("#cboxOverlay").removeClass("tdLandingPage");
				$("#colorbox").removeClass(cls);
			}
		});
		$.cookie(cookie_name, 1, {path : '/'})
		$("a#cancelGiftPopup").on('click', function() {
			$.colorbox.close();
		});
		if (_.isFunction(cbk))
			cbk();
	}
	
	// These popup functions should return true when no popup will be actually displayed.
	var showGiftsPopupXmas = function(cbk) {
		if ($.cookie('xmas_gift'))
			return true;
		if ( !frisco.friscoVanAvailable() )
			return true;
		cms.gift_popup(function(config){
			if (!config) return;
			var ids = _.pluck(config.content, 'id');
			api.getProducts(ids, function(data) {
				genericPopup(templates.gifts_popup_xmas, {url: config.url, products: data, links: _.pluck(config.content, 'link')}, "popup-gift-xmas", 'xmas_gift', cbk);
			}, loggedUserId, null, null, true);
		});
	};
    
	var showPopupNYE = function(cbk) {
		if ($.cookie('nye_popup'))
			return true;
		cms.nye_popup(function(config){
			genericPopup(templates.gifts_popup_nye, {url: config.url, text: config.text}, "popup-nye", 'nye_popup', cbk);
		});
	};
    
	var _tdEmailThxPage = function(curSource, loadThxPage, isMobileSource, isFBSource) {
// 		isMobileSource = isMobileSource || $(window).width() <= 1000;
		if (loadThxPage)
			$('#page_content').jqotesub(templates.register_td_landing, { fb: isFBSource, mobile: isMobileSource, source: curSource });
		if (isMobileSource && loadThxPage) {
			$(".head.main").hide();
// 			frisco.setViewPort('width=500');
// 			$("body").addClass("mobile");
			$(".landingPage .go-home").click(function(){
				$(".head.main").show();
// 				frisco.initGUI();
			});
		}
	};
	
    var _registerTdEmail = function(curSource, email, postcode, emailTakenMsg, loadThxPage, isMobileSource, isFBSource, callback) {
        if (!curSource)
            curSource = 'tradedoubler';

        if (!loggedUserId)
            Bounce.disable(); // later don't show bounce overlay (which is essentially tdLandingPage) if someone already signed his e-mail
        
        Rum.rumEvent(Rum.EMAIL_DROP_EVENT, ""+email+"|generic-landing|"+curSource, loggedUserId);

        api.addTdEmail(curSource, email, postcode, function(data) {
            /* handle ajax call here */
            if (data && data.success) {
                if (_gaq && _gaq.push){
                    _gaq.push(['_setCustomVar', 1, 'Landing-page', 'Ok', 1 ],['_trackEvent','Landing-page','Mail','Ok']);
                }
                _tdEmailThxPage(curSource, loadThxPage, isMobileSource, isFBSource); // doesn't do anything if loadThxPage == false
                $.colorbox.close();
                $("#up-bottom").remove();

				// Google Tag Manager for SALESMORE
				var gtmdata = {
					'event': 'info', 
					'pageTitle': 'Rejestracja',
					'transactionId': data.tdemail_id,
				};
				sendGTMEvent(gtmdata);

            } else if (data && data.email_used) {
                //alert(__('Wystąpił problem podczas przetwarzania danych. Spróbuj ponownie, jeśli problem się powtórzy skontaktuj się z BOK'));
                if (_gaq && _gaq.push){
                    _gaq.push(['_setCustomVar', 1, 'Landing-page', 'W-bazie', 1 ],['_trackEvent','Landing-page','Mail','W-bazie']);
                }
                if (emailTakenMsg)
                    Popup.load({ content: "<div class='text'>"+emailTakenMsg+"</div", type: Popup.TYPE.ERROR, size: Popup.SIZE.FLASH, timeout: Popup.TIMEOUT.LONG });
                else
                    Popup.loadMessage({ messageId: Popup.MESSAGES.TD_EMAIL_ERROR, timeout: Popup.TIMEOUT.NORMAL });
            }
            else {
                Popup.loadMessage({ messageId: Popup.MESSAGES.TD_UNKNOWN_ERROR, timeout: Popup.TIMEOUT.NORMAL });
            }
            if (typeof(callback) === 'function')
                callback(data && data.success, isFBSource, data);
        });
        
        return false;
    };
	
	// If adding new td page, remember to update isClaimBonusLP and (if using FB on the page) update BaseController.php

	var tdABLandingPage = function(prevState, subState, parameters) {
		var data = core.getCurrentState().match(/odbierz-bon-([ow]([123]))/);
		parameters.FB_PLN = data[2] * 10;
		parameters.extra = {type: data[2], min: parameters.FB_PLN == 10 ? 150 : 200, columnLayout: false};
		
		var hide = function(mobile) {
			return function() {
				var mlp = $("#contentSection");
				mlp.fadeOut(function() {
					$(this).remove();
					if(mobile) {
						// frisco.initGUI() removes "mobile" class from <body> and vieport, that would break layout of thx page on mobile
						$("#wrapper").show();
						$("#ribbons").show();
					} else {
						frisco.initGUI();
					}
				});
				// Deactivate LP before redirect to polec-nas
				if (!mlp.length)
					frisco.initGUI();
			};
		};
		
		if ($(window).width() < 1024) {
			parameters.mobile = true;
			frisco.hideGUI(640);
			parameters.container = 'body';
			parameters.container_append = true;
			parameters.callback = hide(true);
			parameters.afterRender = function(){ $("#mobileLP #top").bind("click", hide(false)); };
		}

		tdABCommonLandingPage(data, prevState, subState, parameters);
	};
    
	var tdAB2LandingPage = function(prevState, subState, parameters) {
		var data = core.getCurrentState().match(/odbierz-bon-([ow]([456]))/);
		parameters.FB_PLN = 30;
		parameters.extra = {type: data[2], min: 200, columnLayout: data[2] != 4};
		tdABCommonLandingPage(data, prevState, subState, parameters);
	};

	var tdABCommonLandingPage = function(data, prevState, subState, parameters) {
		$('body').addClass('notfixed');
		parameters.template = 'mailling_content_duo_ab2';
		parameters.FB_FEED_LINK = "https://www.frisco.pl/stn,odbierz-bon-" + data[1];
		parameters.src = "promo082014_" + data[1] + "0";
		parameters.FB_CATEGORY = 'odbierz-bon';
		parameters.allow_fb = true;
		parameters.allow_email = true;
		parameters.keepState = true;
		parameters.emailAlreadyExists = 'Akcja przeznaczona jest dla nowych klientów. <br/> Możesz polecić nasz sklep znajomym i odebrać kupon 40zł na zakupy, <a href="/stn,polec-nas">kliknij >></a>';
		parameters.extra.pln = parameters.FB_PLN;
		if (!parameters.container)
			parameters.container = '#page_content';
		
		var bg = (location.search.match(/p=(\d+)/)||[])[1];
		if (parameters.FB_PLN == 20 && bg == 20) {
			// special exceptional case
			parameters.extra.type = 5;
			parameters.extra.columnLayout = true;
		}
		var test = (location.search.match(/t=([^&]+)/)||[])[1];
		var header = (location.search.match(/h=([^&]+)/)||[])[1];
		if (header > 1) {
			$(".head.main").hide();
			parameters.extra.header = header;
			var old_cbk = parameters.callback;
			parameters.callback = function() {
				$(".landingPage .go-home").click(function(){
					$(".head.main").show();
				});
				if (_.isFunction(old_cbk))
					old_cbk();
			}
		}
		else if (!parameters.afterRender)
			parameters.afterRender = function(){ $(window).scrollTop(180); };
		parameters.extra.alt = !!location.search.match(/v=2/);
		var defaults = {h1: "Bon <span>:PLN: zł</span>", h2: "na zakupy spożywcze z dostawą do domu", button: "POBIERZ »", buttonfb: "Zaloguj się z Facebookiem"};
		$.extend(parameters.extra, defaults);

		var next = function(){
			if (bg && !parameters.extra.pbg)
				parameters.extra.pbg = "https://b-content.frisco.pl/landingi/" + bg + ".jpg";
			parameters.extra.h1 = parameters.extra.h1.replace(/:PLN:/g, parameters.FB_PLN);
			var url_detection = (location.search.match(/d=(\d+)/)||[])[1];
			if (url_detection) // can override oneinput property from test
				parameters.check = parameters.extra.oneline = (url_detection == "1");
			tdGenericLandingPage(prevState, subState, parameters);
		};

		if (test) {
			cms.ab_tests(function(data){
				data = data[test]
				$.extend(parameters.extra, data);
				if (data && data.oneinput == "true") {
					parameters.check = true;
					parameters.extra.oneline = true;
				}
				if (bg && data)
					parameters.extra.pbg = data["foto" + bg];
				next();
			});
		} else {
			next();
		}
	};

	var tdPartnerPage = function(prevState, subState, parameters) {
		var partner = parameters.name
		cms.partner_lp(partner, function(data){
			if (!data) {
				core.applyStateUrl("/");
				return;
			}
			parameters.extra = {text: data['text-info'], img: data.html};
			parameters.FB_FEED_LINK = "https://www.frisco.pl/stn,partner/name," + partner;
			parameters.template = 'mailling_content_duo_partner';
			if (document.referrer.indexOf('facebook.com') != -1)
				parameters.selected_tab = 1;
			parameters.src = data.kampania;
			parameters.FB_PLN = 15;
			parameters.allow_fb = true;
			parameters.allow_email = true;
			parameters.keepState = true;
			parameters.container = '#page_content';
			tdGenericLandingPage(prevState, subState, parameters);
		});
	};
	
	var tdNew2LandingPage = function(prevState, subState, parameters) {
		parameters.template = 'mailling_content_duo_v2';
		tdNewBaseLandingPage(prevState, subState, parameters);
	};

	var tdNewLandingPage = function(prevState, subState, parameters) {
		parameters.template = 'mailling_content_duo';
		tdNewBaseLandingPage(prevState, subState, parameters);
	};

	var tdNewBaseLandingPage = function(prevState, subState, parameters) {
		if (navigator.userAgent.match(/Android|iPhone|iPad/i) && !$.cookie("mobileLP"))
			return tdMobileLandingPage(prevState, subState, parameters);
		
		parameters.FB_FEED_LINK = "https://www.frisco.pl/stn," + core.getCurrentState() + "/";
		if (document.referrer.indexOf('facebook.com') != -1)
			parameters.selected_tab = 1;
		parameters.src = "2014_02_SM";
		parameters.FB_PLN = 20;
		parameters.allow_fb = true;
		parameters.allow_email = true;
		parameters.keepState = true;
		parameters.container = '#page_content';
		tdGenericLandingPage(prevState, subState, parameters);
	};

	var tdB2BLandingPage = function(prevState, subState, parameters) {
		parameters.FB_FEED_LINK = "https://www.frisco.pl/stn,specjalna-oferta-dla-firm/";
		parameters.template = 'mailling_content_b2b';
		parameters.src = "promo102014_50b2b";
		parameters.FB_PLN = 50;
		parameters.allow_fb = true;
		parameters.allow_email = true;
		parameters.keepState = true;
		parameters.container = '#page_content';
		tdGenericLandingPage(prevState, subState, parameters);
	};

	var tdKupon50LandingPage = function(prevState, subState, parameters) {
		parameters.FB_FEED_LINK = "https://www.frisco.pl/stn,odbierz-kupon-50/";
		parameters.template = 'mailling_content_b2b';
		parameters.extra = {type: 1};
		parameters.src = "promo112014_konf";
		parameters.FB_PLN = 50;
		parameters.allow_fb = true;
		parameters.allow_email = true;
		parameters.keepState = true;
		parameters.container = '#page_content';
		tdGenericLandingPage(prevState, subState, parameters);
	};

	var tdFBLandingPage = function(prevState, subState, parameters) {
		parameters.selected_tab = 1;
		tdLandingPage(prevState, subState, parameters);
	};
	
	var yearOfShoppingPromoRedirect = function(prevState, subState, parameters) {
		var vendor = parameters.vendor;
		if (!vendor || vendor == "gazetka" || vendor == "kwiecienonline") {
			frisco.initGUI();
			core.setState("rok-zakupow");
		} else {
			core.setState("mobile-kupon", null, {vendor: vendor});
		}
		return;
	};

	var juneContestPromo = function(prevState, subState, parameters) {
			Popup.load({ title : "Konkurs został już zakończony.", content: "Wyniki zostaną ogłoszone 31 lipca na naszym profilu <a href='https://facebook.com/FriscoPL'>FriscoPL</a>.", size: Popup.SIZE.NORMAL, type: Popup.TYPE.MESSAGE});
			setTimeout(function(){ core.setState('defaultState'); }, 5000);
	};

	var octoberContestPromo = function(prevState, subState, parameters) {
		if (!octoberContestActive()) {
			Popup.load({ title : "Konkurs został już zakończony.", content: "Wyniki zostaną ogłoszone 8 grudnia na naszym profilu <a href='https://facebook.com/FriscoPL'>FriscoPL</a>.", size: Popup.SIZE.NORMAL, type: Popup.TYPE.MESSAGE});
			setTimeout(function(){ core.setState('defaultState'); }, 5000);
			return;
		}
		$("body").addClass("notfixed");
		parameters.template = 'mailling_content_duo_october';
		parameters.extra = {};
		parameters.container = '#page_content';
		parameters.afterRender = function(){
			$('html, body').animate({scrollTop: $("#page_content").offset().top});
			addOctoberContestProducts();
		}
		followerCbk = function() {
			if (parameters.email && parameters.hash) { // show 1st step, do activation
				api.activateTdEmail(parameters.email, parameters.hash, function(data) {
					var tabPage = null;
					if (data && data.success && data.success == 1) {
						tabPage = 'verified';
					} else if (data && data.data >= 400 && data.response.indexOf("activated") > 0) {
						Popup.loadMessage({ messageId: Popup.MESSAGES.TD_EMAIL_ERROR, timeout: Popup.TIMEOUT.NORMAL });
						tabPage = 'activated';
					} else {
						Popup.loadMessage({ messageId: Popup.MESSAGES.TD_ACCOUNT_VERIFY_ERROR, timeout: Popup.TIMEOUT.NORMAL });
						tabPage = 'register_fail';
					}
					parameters.extra.tabPage = tabPage;
					tdGenericLandingPage(prevState, subState, parameters);
				});
			} else { // show 1st step, allow registration
				parameters.extra.tabPage = 'register';
				tdGenericLandingPage(prevState, subState, parameters);
			}
		};
		if (document.referrer.indexOf('facebook.com') != -1)
			parameters.selected_tab = 1;
		parameters.check = true;
		parameters.src = "octoberContest";
		parameters.FB_PLN = 20;
		parameters.FB_FEED_LINK = "https://www.frisco.pl/stn,wygraj-kurs-promo/?utm_campaign=konkurs-jezyk-share-FB";
		parameters.allow_fb = true;
		parameters.allow_email = true;
		parameters.keepState = true;
		parameters.customThxPage = true;
		parameters.allowLoggedUsers = true;
		parameters.callback = function(ok, fbuser, data){
			if (!ok)
				return;
			if (data.needs_activation)
				$(".thanks-wrapper").replaceWith('<p class="big slim"><span>Dziękujemy</span></p><p>Aby odebrać BON 20 zł i wziąć udział w konkursie zaloguj się na swoją skrzynkę i kliknij "Potwierdzam adres e-mail".</p><p class="image"><img src="/img/october-contest/arrow.png" width="61" height="55" alt=""></p>');
			else
				$(".thanks-wrapper").replaceWith('<p class="big slim"><span>Dziękujemy</span></p><p>Wysłaliśmy na Twoją skrzynką bon o wartości 20 zł.<br/>Życzymy udanych zakupów!</p><p class="image"><img src="/img/october-contest/arrow.png" width="61" height="55" alt=""></p>');
			$(".holiday-contest .sponsor-box").addClass("up").find("p:first-child").addClass("sponsor");
		};
		followerCbk();
	};

	var tdPaypalLandingPage = function(prevState, subState, parameters) {
		parameters.afterRender = function(){
			api.getVoucherCampaign(303, function(info){
				var TOTAL = 1200;
				if (info) {
					if (info.vouchersUsed > TOTAL)
						info.vouchersUsed = TOTAL;
					$("#page_content .voucherCount").text(TOTAL - (info.vouchersUsed || 0));
					if (info.vouchersUsed == TOTAL) {
						Popup.load({ title : "Akcja została już zakończona.", content: "Wszystkie kupony zostały rozdane.", size: Popup.SIZE.NORMAL, type: Popup.TYPE.MESSAGE});
						$("#paypalpage .form-content").addClass("inactive").find("input").prop("disabled", true);
					}
				}
			});
		};
		parameters.src = "paypalpromo";
		parameters.allow_email = true;
		parameters.keepState = true;
		parameters.container = '#page_content';
		parameters.template = 'mailling_content_paypal';
		parameters.allowLoggedUsers = true;
		tdGenericLandingPage(prevState, subState, parameters);
	};

	var tdMobileLandingPage = function(prevState, subState, parameters) {
		parameters.mobile = true;
		parameters.allow_mail = true;
		parameters.template = 'mobile_mailling';
		parameters.container = 'body';
		parameters.container_append = true;
		parameters.src = parameters.vendor || "apka_mobilna_30PLN";
		parameters.allow_email = true;

		frisco.hideGUI(500);

		var hide = function() {
			var mlp = $("#mobileLP");
			mlp.fadeOut(function() {
				$(this).remove();
				frisco.initGUI();
			});
			// Deactivate LP before redirect to polec-nas
			if (!mlp.length)
				frisco.initGUI();
		};
		parameters.callback = hide;

		tdGenericLandingPage(prevState, subState, parameters);

		$("#mobileLP #top").bind("click", hide);
	};

	var tdBounceLandingPage = function() {
		parameters = {};
		parameters.FB_PLN = 15;
		parameters.FB_FEED_LINK = "https://www.frisco.pl/stn,tdFBLandingPage/";
		parameters.src = "bounce";
		parameters.allow_fb = true;
		parameters.allow_email = true;
		parameters.template = 'mailling_content_bounce';
		tdGenericLandingPage('', '', parameters);
	}

	var tdLandingPage = function(prevState, subState, parameters) {
		if (navigator.userAgent.match(/Android|iPhone|iPad/i) && !$.cookie("mobileLP"))
			return tdMobileLandingPage(prevState, subState, parameters);
		
		if (document.referrer.indexOf('facebook.com') != -1)
			parameters.selected_tab = 1;
		
		parameters.FB_PLN = 15;
		parameters.FB_FEED_LINK = "https://www.frisco.pl/stn,tdFBLandingPage/";
		var state = core.getCurrentState();
		if (state === 'tdLandingPage' || state === 'tdFBLandingPage' || state === 'promo-lp-ab0') // Disable fb binding for firsttimers and "?promo=true"
			parameters.allow_fb = true;
		parameters.allow_email = true;
		tdGenericLandingPage(prevState, subState, parameters);

		// cloudtechnologies
		friscoEvents.fire('td_landing', friscoEvents.FEV_LOAD_TD_LP);
	};

	var mailerResubscribeForm = function(prevState, subState, parameters) {
		var withCoupon = !!core.getCurrentState().match(/-kupon/);
		parameters.template = 'mailling_content_resubscribe';
		parameters.extra = {coupon: withCoupon};
		parameters.src = "newsletter_lp" + (withCoupon ? "_kupon" : "");
		parameters.allow_email = true;
		parameters.keepState = true;
		parameters.container = '#page_content';
		parameters.customThxPage = true;
		parameters.allowLoggedUsers = true;
		parameters.callback = function(ok, fbuser, data){
			if (!ok)
				return;
			$("#page_content .form-container").fadeOut(500, function(){ $("#page_content .thx").fadeIn(500); });
		};
		tdGenericLandingPage(prevState, subState, parameters);
		$("#agree").rules("add", {required : true});
		$("#resub-page .emailForm").validate().settings.messages.agree = {required: "Musisz wyrazić zgodę."}
	};

	var bind_email = function(parameters) {
        function check_mail(el, callback) {
            friscoHelpers.getEmailDomains(function(domains) {
                el.mailcheck({
                    domains: domains,
                    topLevelDomains: ["pl", "com", "net", "org", "info", "edu", "gov"],
                    suggested: function(element, suggestion) {
                        var hint = element.closest('.hintHolder').find('.hintContent strong').text('Czy chodziło Ci o: ' + suggestion.full + ' ?').parent();
                        hint.show().unbind('click').click(function(){
                                element.val(suggestion.full);
                                $(this).hide();
                            });
                        element.focus(function(){ hint.hide(); });
                        if (_.isFunction(callback)) callback(false, element);
                    },
                    empty: function(element) {
                        if (_.isFunction(callback)) callback(true, element);
                    }
                });
            });
        }
        
        var container = $(parameters.container || 'body');
        // do not bind footer forms - unless container is #footer.
        var forms = container.find('.emailForm:not(.bound)').not(container.find('#footer .emailForm:not(.bound)'));
        forms.find('input[name=email]').focus(function() {
            if($(this).attr("value") == $(this).attr("title")) { $(this).attr("value","") }
        });
        forms.find('input[name=email]').blur(function() {
            if($(this).attr("value") == "") { $(this).attr("value",$(this).attr("title")) }
            check_mail($(this));
        }).change(function(){
            $(this).closest('form').data('mailcheckHalted', false);
        });

        forms.each(function(){ $(this).addClass("bound").validate({
            debug : false,
            rules : {
                email : {
                    required : true,
                    email    : true,
                    delayed  : {
                        delay : 500,
                        callback : function(value, resultHandlers) {
                            if (parameters.forceEmailCheck) apiUsers.isEmailTaken(value, resultHandlers.invalid, resultHandlers.valid);
                            else resultHandlers.valid();
                        }
                    }
                },
                
                postCode_0: {
                    required: true,
                    digits: true,
                    minlength : 2,
                    maxlength : 2
                },
            
                postCode_1: {
                    required: true,
                    digits: true,
                    minlength : 3,
                    maxlength : 3
                },
            },

            messages : {
                email : {
                    required : __("Adres e-mail jest wymagany"),
                    email    : __("Proszę podać prawidłowy adres e-mail"),
                    delayed  : parameters.emailAlreadyExists || __("Podany e-mail jest już zarejestrowany.")
                },
            
                postCode_0 : {
                    required : __("Kod pocztowy jest wymagany"),
                    digits: __("Nieprawidłowy kod pocztowy"),
                    minlength: __("Nieprawidłowy kod pocztowy"),
                    maxlength:  __("Nieprawidłowy kod pocztowy")
                },
                
                postCode_1 : {
                    required : __("Kod pocztowy jest wymagany"),
                    digits: __("Nieprawidłowy kod pocztowy"),
                    minlength: __("Nieprawidłowy kod pocztowy"),
                    maxlength:  __("Nieprawidłowy kod pocztowy")
                },
            },
            
            errorPlacement: function(error, element) {                   
                if ( $(element).attr('id') == 'register_postCode_0') {
                        error.insertAfter( $('register_postCode_1').next() );
                } else {
                    error.insertAfter(element);
                }
            },

            errorElement : "p",
            showErrors: function(errorMap, errorList) {
                var errorListSize = errorList.length;
                this.defaultShowErrors();
                if(errorListSize > 0) {
                    $('p.error').each(function() {
                        if($(this).closest('div.tooltip').size() == 0) {
                            $(this).wrap('<div class="tooltip"></div>');
                            $(this).parent(".tooltip").prepend('<span class="icon"></span>');
                            $(this).parent(".tooltip").append('<span class="arrow"></span>');
                            $(this).parent(".tooltip").css('width', $(this).width() );
                        }
                    });
                }
            },
            
            highlight : function(element, errorClass) {
                $(element).addClass(errorClass);
            },
            
            unhighlight : function(element, errorClass) {
                $(element).removeClass(errorClass);
                $(element).siblings(".tooltip").remove();
            },
            
            invalidHandler: function(form, validator){
                if(_gaq && _gaq.push){
                    var element = $(form).find('input[name=email]');
                    if( validator.errorList[0].message == __("Podany e-mail jest już zarejestrowany.")) {
                        _gaq.push(['_setCustomVar', 1, 'Landing-page', 'W-bazie', 1 ],['_trackEvent','Landing-page','Mail','W-bazie']);
                    } else if(element.val() == element.attr("title")){
                        _gaq.push(['_setCustomVar', 1, 'Landing-page', 'Pusty', 1 ], ['_trackEvent','Landing-page','Mail','Pusty']);
                    } else {
                        _gaq.push(['_setCustomVar', 1, 'Landing-page', 'Blad', 1 ],['_trackEvent','Landing-page','Mail','Blad']);
                    }
                }
            },
            
            submitHandler : function(form) {
                check_mail($(form).find('input[name=email]'), function(result){
                    if (!result && !$(form).data('mailcheckHalted')) {
                        $(form).data('mailcheckHalted', true);
                        $(form).find('.hintContent').effect('pulsate', {times: 2});
                        return false;
                    }
                    var customSubmit = parameters.customSubmit;
                    if(customSubmit) { customSubmit(); return; }
                    var email = $(form).find('input[name=email]').val();
                    var postcode = $(form).find('input[name=postCode_0]').val()+'-'+$(form).find('input[name=postCode_1]').val();
                    _registerTdEmail(parameters.src, email, postcode, parameters.emailAlreadyExists, !parameters.customThxPage, parameters.mobile, false, parameters.callback);
                });
            }
        })}); // $(".emailForm").each( .validate()
        
        // Exception for mobile-kupon
        if (parameters.mobile) {
			$( "#register_email, #inputEmail" ).rules( "remove");
			$( "#register_email, #inputEmail" ).rules( "add", {
                    required : true,
                    email    : true,
                });
        } // if (parameters.mobile)
    };
	
	var bind_fb = function(parameters){
		var FB_OPTIONS = null;
		cms.fb_popup(function(options){
			FB_OPTIONS = options;
		});
		
		var handle = function(extra_data) {
			extra_data = extra_data || {};
			FB.api('/me', 'get', extra_data, function(user) {
				_registerTdEmail(parameters.src, user.email, '-', parameters.emailAlreadyExists, false, parameters.mobile, true, function(ok, _fbuser, data){
					$('#page_content').jqoteapp(frisco.getTemplate('mailling_fb_popup'), {});
					if (ok && FB_OPTIONS) {
						var parse = function(input) {
							return input.replace(/:PLN:/g, parameters.FB_PLN).replace(/:GENDER:([^:]*):([^:]*):/g, user.gender != "female" ? "$1" : "$2");
						};
						var end = function(){
							$("#fbpop, #fbpop-box").hide();
							_tdEmailThxPage(parameters.src || 'tradedoubler', !parameters.customThxPage, parameters.mobile, true);
							if (typeof(parameters.callback) === "function")
								parameters.callback(ok, user, data);
						};
						var category = parameters.FB_CATEGORY || core.getCurrentState();
						var message = parse(FB_OPTIONS[category + '-t1'] || FB_OPTIONS.t1);
						$("#fbpop .title").text(parse(FB_OPTIONS[category + '-h1'] || FB_OPTIONS.h1));
						$("#fbpop .heading").text(message);
						$("#fbpop .text strong").text(parse(FB_OPTIONS[category + '-h2'] || FB_OPTIONS.h2));
						$("#fbpop .text span").text(parse(FB_OPTIONS[category + '-t2'] || FB_OPTIONS.t2));
						$("#fbpop .icon").attr("src", FB_OPTIONS["icon"+parameters.FB_PLN]);
						$("#fbpop-box, #fbpop .cancel").click(function(ev){
							ev.preventDefault();
							end();
						});
						$("#fbpop .post").click(function(){
							$(this).css("opacity", 0.5);
							var sub_extra_data = $.extend(extra_data, {message: message, link: parameters.FB_FEED_LINK});
							FB.api('/me/feed', 'post', sub_extra_data, function(){
								end();
							});
						});
						setTimeout(function(){$("#fbpop, #fbpop-box").show()}, 1000);
					}
					else if (typeof(parameters.callback) === "function")
						parameters.callback(ok, user, data);
				});
			});
		}
		
		window.fbAsyncInit = function () {
			FB.init({
				appId: parameters.FB_APP_ID || FB_APP_ID,
				version: 'v2.2',
				cookie: true,
				xfbml: true
			});
			if (_.isFunction(window.smSocInit))
				smSocInit();
			if (parameters.check && !parameters.selected_tab) {
				FB.getLoginStatus(function(response) {
					if (response.status === 'connected' || response.status === 'not_authorized') {
						$('.mailing-duo .switch').removeClass('showform');
					}
				});
			}
			var token = (location.hash.match(/access_token=([^&]+)(&|$)/) || [])[1];
			if (token) {
				handle({access_token: token});
			}
		};
		
		(function(d, s, id) {
			var js, fjs = d.getElementsByTagName(s)[0];
			if (d.getElementById(id)) return;
			js = d.createElement(s); js.id = id;
			js.src = "//connect.facebook.net/pl_PL/sdk.js#xfbml=1&version=v2.2";
			fjs.parentNode.insertBefore(js, fjs);
		}(document, 'script', 'facebook-jssdk'));
		
		if (navigator.userAgent.match('CriOS')) {
			// Chrome on iOs FB login bug workaround
			$(".fbLogin").attr('href', 'https://www.facebook.com/dialog/oauth?scope=publish_stream,email&response_type=token&client_id=' + (parameters.FB_APP_ID || FB_APP_ID) + '&redirect_uri=' + location.href+'/');
		}
		else
			$(".fbLogin").click(function(){
				FB.login(function(response) {
					if (response.authResponse)
						handle();
				}, {scope: 'publish_stream,email'});
				return false;
			});
	};

	var tdGenericLandingPage = function(prevState, subState, parameters) {
		if (loggedUserId && !parameters.allowLoggedUsers) {
			if (typeof(parameters.callback) === "function")
				parameters.callback(false);
			core.setState('polec-nas');
			Popup.loadMessage({ messageId: Popup.MESSAGES.TD_NOT_AVAILABLE_FOR_LOGGED, size: Popup.SIZE.FLASH, timeout: Popup.TIMEOUT.LONG });
			return;
		}

		var params = {source : parameters.src ? parameters.src : "", fb: parameters.allow_fb, tab: parameters.selected_tab, mobile: parameters.mobile};
		$.extend(params, parameters.extra);
		
		var template = templates[parameters.template || 'mailling_content'];
		//if (parameters.src == "firstimers") {
		//	$('body').jqoteapp(templates.first_time_bar, params);
		//} else
		if (parameters.container && parameters.container_append) {
			$(parameters.container).jqoteapp(template, params);
		} else if (parameters.container) {
			$(parameters.container).jqotesub(template, params);
		} else {
			var dumbContainer = document.createElement('div');
			$(dumbContainer).jqotesub(template, params);

			$.colorbox({
				html : $(dumbContainer), 
				onOpen: function(){
					$("#cboxOverlay").addClass("tdLandingPage");
					$("#colorbox").addClass("tdLandingPage");
					$("html").addClass("scrollable");
					if(parameters.template == 'mailling_content_201411outdoor') $("#colorbox").addClass("popup-outdoor");
				},
				onComplete: function(){
						if (window.runOnCBoxLoad) {
							window.runOnCBoxLoad();
							delete window.runOnCBoxLoad;
						}
				},
				overlayClose: false, opacity: 1, 
				onClosed: function() {
					$("#cboxOverlayFirstLayer").remove();
					$("#cboxOverlay").removeClass("tdLandingPage");
					$("#colorbox").removeClass("tdLandingPage");
					if(parameters.template == 'mailling_content_201411outdoor') $("#colorbox").removeClass("popup-outdoor");
				}
			});
		}
		
		if (parameters.allow_fb)
			bind_fb(parameters);
		
		if (parameters.allow_email)
			bind_email(parameters);
		if (parameters.allow_fb && parameters.allow_email)
			$('.mailing-duo .link').click(function(ev){
				$('.mailing-duo .switch').toggleClass('showform');
				ev.preventDefault();
			});
		if (parameters.afterRender)
			parameters.afterRender();

		if(_gaq && _gaq.push){
			$("#cboxClose").bind("click", function() {
				_gaq.push(['_trackEvent','Landing-page','Zamknij']);
				return true;
			});
		}
		
		if (frisco.useTrackingCode("sociomantic") && loggedUserId) {
			sociomantic.sonar.adv['frisco-pl'].clear();
			window.customer = {identifier: loggedUserId, segment: parameters.sociomanticSegment || 2};
			sociomantic.sonar.adv['frisco-pl'].track();
		}

        if (isClaimBonusLP(core.getCurrentState()) && !parameters.keepState)
            loadDefaultState(core.getCurrentState(), core.getCurrentSubstate(), core.getCurrentParameters());
	};

	var loadFeaturePage = function(prevState, subState, parameters) {
		DBG('FEATURE PAGE', 'Loading feature page', prevState, subState, parameters);
		var tplName, subpageName;
		
		var title = CONFIG.FEATURE_PAGES[parameters.name].title;
		var promo_name = CONFIG.FEATURE_PAGES[parameters.name].promo;
		var parseSubpageTitle = function(stn) {
			if (title instanceof Object && title[stn] != undefined)
				return title[stn] + " - Frisco - supermarket online";
			else 
				return title + " - Frisco - supermarket online";
		};
		
		var _loadTemplate = function(page, reload) {
			if (reload) {
				var content = $.jqote(templates[tplName], {state : page, title: title, name: parameters.name, slot: parameters.slot});
				var contentObj = $('<div>').html(content);
				$("div#feature-lp>div[rel]").remove();
				$("div#feature-lp").append(contentObj.find("div[rel="+page+"]"));
			} else {
				$('#page_content').jqotesub(templates[tplName], {state : page, title: title, name: parameters.name, slot: parameters.slot});
// 				$("div#feature-lp>div[rel]").not("div#feature-lp>div[rel="+page+"]").remove();
			}
			
			var colorLp = $('#feature-lp').attr('data-color');
			$('.lp-popup-bg').css({ backgroundColor: 'rgb('+colorLp+')' });
			$('.lp-links a').css({ color: 'rgb('+colorLp+')' });
			$('.lp-links .red a').css({ backgroundColor: 'rgb('+colorLp+')', color: 'white' });
			$('.recipes').css({ backgroundColor: 'rgb('+colorLp+')'});
			$('.lp-links .red-text').css({ backgroundColor: 'rgb('+colorLp+')' });
			
			// bind links
			$("div#feature-lp a[rel]").bind('click', function(e) {
				e.preventDefault();
				e.stopPropagation();
				var stn = $(this).attr('rel');
				
				_routeFeature(stn, true);
				
// 				parameters.page = stn;
// 				core.setState('feature', null, parameters, parseSubpageTitle(stn));
				return false;
			});
		}
		
		var _routeFeature = function(stn, reloadTemplate) {
			if ($("#feature-lp").length) {
				$("#feature-lp").css({'min-height' : Math.min($("#feature-lp div[rel="+stn+"]").height(), $("#feature-lp div[rel="+subpageName+"]").height()) });
				
	// 			$('html, body').animate({
	// 				scrollTop: $("#feature-lp").offset().top
	// 			}, 200);
				
				$('body').addClass('feature notfixed');
				var wpos = $(window).scrollTop();
				var pos = $("#feature-lp").offset().top;
				$("body").css({ "margin-top": (pos-wpos)+"px", "overflow-y": "scroll", }); // overflow-y is to fix the blink of the window width change 
				$(window).scrollTop(pos); 
				$("body").css("transition", "all 1s ease");
				$("body").css("margin-top", "0");
				
				$("body").on("webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd", function() {
					$("body").css("transition", "none");
				});
				
				_loadTemplate(stn, true);
				
// 				if (reloadTemplate) {
// 					var content = $.jqote(templates[tplName], {state : stn, title: title, name: parameters.name});
// 					var contentObj = $('<div>').html(content);
// 					$("div#feature-lp>div[rel]").remove();
// 					$("div#feature-lp").append(contentObj.find("div[rel="+stn+"]"));
// 				}
// 				$("div#feature-lp>div[rel]").hide();
				$("div#feature-lp>div[rel="+stn+"]").show();
			}

			// don't perform changes via core.setState upon this switching, it makes ue of History.js plugin 
			// which forces popState which, in turn, scrolls window to top as it was page reload, which makes 
			// scroll to top of the content feel jagged (FF&Opera especially)
			document.title = parseSubpageTitle(stn); // IE8 minimal feature set, native history doesn't work
			parameters.page = stn;
// 			var url = core.getUrl('feature', subState, parameters);
// 			History.pushState({stateName : 'feature', substateName : subState}, parseSubpageTitle(stn), encodeURI(url));
// 			History.replaceState({stateName : 'feature', substateName : subState}, parseSubpageTitle(stn), encodeURI(url));
// 			if (history && history.pushState instanceof Function)
// 				history.pushState({stateName : 'feature', substateName : subState}, parseSubpageTitle(stn), encodeURI(url));
		};
		
		if (undefined == parameters.name) {
			console.error("[loadFeaturePage] No page name given, aborting!");
			return false;
		}
		tplName = "feature_"+parameters.name;
		
		if (undefined == parameters.page) subpageName = 'entry';
		else subpageName = parameters.page;
		
		
		if (prevState == 'feature') {
			var currentParameters = core.getCurrentParameters();
			if (currentParameters && currentParameters.name != parameters.name)
				return _routeFeature(subpageName, true);
		}
		
		if (catalog) { catalog.disable(); }
		
		// embed template
		_loadTemplate(subpageName);
		
		// bind mechanics
		if ($("#feature-lp").length) {
			var elFirstTop = $('#lp-bg').offset().top;
			var speedFactor = 0.075;
			var _updateScroll = function() {
				var pos = $(window).scrollTop();
				var winHeight = $(window).height();
				var elTop = $('#lp-bg').offset().top;
				var elHeight = $('#lp-bg').outerHeight(true);
				
				if (elTop + elHeight < pos || elTop > pos + winHeight) {
					return;
				}
				
	// 			$('#feature-lp .links-top').css({ position: 'absolute', top: '440px' });
				$('#lp-bg').css({ 'background-position': "50% " + Math.round((elFirstTop - pos) * speedFactor) + "px" });
				$('.lp-hide').css({ opacity: Math.max(0, Math.min(1, 1-((pos-elTop-200)/200))) });
			};
			
			friscoEvents.hook('parallax', friscoEvents.FEV_PARALLAX_SCROLL, _updateScroll, {type: friscoEvents.FEV_TYPE_VOLATILE}); // volatile, {'feature':true}
			
			if ($('div#feature-lp').length) {
				$(window).scroll(function() {
					friscoEvents.fire('parallax', friscoEvents.FEV_PARALLAX_SCROLL, {}); // _updateScroll();
				});
				_updateScroll();
			}
		}
		_routeFeature(subpageName);
		
		if ( $("#featuredProducts").length > 0 ) {
			var cbk = function(data) {
				SlotManager.clearSlots();
				SlotManager.registerSlot("#featuredProducts", data[promo_name || tplName]);
				SlotManager.enableLoadSlots();
			};
			var p = {}; p[friscoStorage.PARAM_FOLLOWER_CALLBACK] = cbk;
			friscoStorage.get("promoproducts", p);
		}
		cms.video_lp_top_boxes(displayLPTopBanners);
	};
	
	var tdActivation = function(prevState, subState, parameters) {
		// temporary disabled for PayPal campaign, probably will make problems sometime later
// 		if (loggedUserId) {
// 			window.location = "/";
// 			return;
// 		}	

		if (!parameters.email || !parameters.hash) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.TD_ACCOUNT_ACTIVAION_ERROR, timeout: Popup.TIMEOUT.NORMAL });
			setTimeout( function() {window.location = '/'; }, 1000);
			return;
		}

		api.activateTdEmail(parameters.email, parameters.hash, function(data) {     
			if (data && data.success && data.success == 1) {
				if (!parameters.src)
					parameters.src = 'tradedoubler';
				if (parameters.src == 'firstimers')
					parameters.src = 'tradedoubler';
				
				if (parameters.src == 'afilo' || parameters.src == 'nsales' || parameters.src == 'cube')
					$('#page_content').jqotesub(templates.td_landing_activation, { parameters: parameters, src_ts: data.src_ts }); 
				else if (parameters.src == 'salesmore')
					$('#page_content').jqotesub(templates.td_landing_activation, { parameters: parameters, src_ts: data.src_ts, trackImgTag: salesmore.leadTrackBackTag(data.orderNumber, data.checksum) }); 
				else if (parameters.src == 'omg')
					$('#page_content').jqotesub(templates.td_landing_activation, { parameters: parameters, src_ts: data.src_ts }); 
				else
					$('#page_content').jqotesub(templates.td_landing_activation, { parameters: parameters, trackImgTag: tradedoubler.leadTrackBackTag(data.src_ts) }); 
				
				Popup.loadMessage({ messageId: Popup.MESSAGES.TD_ACCOUNT_VERIFIED, timeout: Popup.TIMEOUT.NORMAL });
				
				// Google Tag Manager for SALESMORE
				var gtmdata = {
					'event': 'info', 
					'pageTitle': 'Aktywacja',
					'transactionId': data.tdemail_id,
				};
				sendGTMEvent(gtmdata);
				return;
			} else if (data && data.data == 200 && data.response == "Email already activated") {
				Popup.loadMessage({ messageId: Popup.MESSAGES.TD_ACCOUNT_ALREADY_VERIFIED, timeout: Popup.TIMEOUT.NORMAL });
				core.setState('defaultState');
			} else {
				Popup.loadMessage({ messageId: Popup.MESSAGES.TD_ACCOUNT_VERIFY_ERROR, timeout: Popup.TIMEOUT.NORMAL });
				window.location = "/";
				return;
			}
		});
	}; // tdActivation()

	var mailerUnsubscribe = function(prevState, subState, parameters) {
		if (!parameters.userId || !parameters.hash || !parameters.email) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.MAILER_UNSUBSCRIBE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
			setTimeout( function() { window.location = '/'; }, 2000);
			return;
		}

		var source = null;
		if (parameters.source)
		source = parameters.source;
		
		var callbacks = {
			"#popupYes" : function() { 
				Popup.hide();
				api.unsubscribeFromMailing(parameters.userId, parameters.hash, parameters.email, source, function(data) {
					if (data && data.success) {
						Popup.loadMessage({ messageId: Popup.MESSAGES.MAILER_UNSUBSCRIBED, timeout: Popup.TIMEOUT.NORMAL });
						loadDefaultState(core.getCurrentState(), core.getCurrentSubstate(), core.getCurrentParameters());
					} else {
						Popup.loadMessage({ messageId: Popup.MESSAGES.MAILER_UNSUBSCRIBE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
						//setTimeout( function() { window.location = '/'; }, 2000);
					}
				});
			},
			"#popupNo" : function() { 
				Popup.hide();
				window.location = '/';
			},
		};
		Popup.loadMessage({ messageId: Popup.MESSAGES.UNSUBSCRIBE_MAILINGS, callbacks: callbacks });
		
	}; // var mailerUnsubscribe = function(prevState, subState, parameters)

	var mailerResubscribe = function(prevState, subState, parameters) {
		Popup.loadMessage({ messageId: Popup.MESSAGES.MAILER_RESUBSCRIBED, timeout: Popup.TIMEOUT.LONG });
		loadDefaultState(core.getCurrentState(), core.getCurrentSubstate(), core.getCurrentParameters());
	};

	var registerPromoGift = function(prevState, subState, parameters) {
		if (loggedUserId) {
			core.setState('defaultState');
		} else {
			var dumbContainer = document.createElement('div');
			var state = core.getCurrentState();

			if (state == 'wybierzPrezent') {
				$(dumbContainer).jqotesub(templates.register_content_promogift, { source : parameters.src ? parameters.src : ""});

				$.colorbox({html : $(dumbContainer), onOpen: function(){
					$("#cboxOverlay").addClass("registerPromoGift");
					$("#colorbox").addClass("registerPromoGift");

					$("html").addClass("promoGift");
				}, overlayClose: false, escKey: false, opacity: 1});
			} else {
				$(dumbContainer).jqotesub(templates.register_content_promogift, { source : parameters.src ? parameters.src : ""});

				$.colorbox({html : $(dumbContainer), onOpen: function(){
					$("#cboxOverlay").addClass("registerPromoGift");
					$("#cboxOverlay").addClass("enableCloseButton");
					$("#colorbox").addClass("registerPromoGift")

					$("html").addClass("promoGift");
					}
				});

				$("#cboxClose").bind("click", function(event) { 
					event.stopPropagation();
					event.stopImmediatePropagation();
					setTimeout(function() {
						$("#cboxOverlay").removeClass("registerPromoGift").removeClass("enableCloseButton");
						$("#colorbox").removeClass("registerPromoGift").removeClass("enableCloseButton");
					}, 600);
				});
			}

			$("ul.giftProducts li label").each(function(index) {
				$(this).click(function() {
					if($(this).hasClass("checked")) {
						return false
					} else {
						$("ul.giftProducts li label").removeClass("checked");
						$(this).addClass("checked");
						$(this).siblings("input").attr( 'checked', true );
						return true
					}
				});
			});

			bindRegisterTabs();
			bindRegisterValidations();
			_bindPostCodeCompleter();
		}
	};

	var allBrandsPage = function(prevState, subState, parameters) {
		Loader.load(Loader.TYPE.COVER, "#page_content", "Zaczekaj chwilę...");
		cms.brands(function(res) {
			Loader.hide();
			$('#page_content').jqotesub(frisco.getTemplate('brands'), {data: res});
		});
	};

	var loadRegister = function(prevState, subState, parameters) {
		if (parameters && parameters.info_reg && parameters.info_reg == 'ok') {
			var src_ts = core.getParam('src_ts');
			$('#page_content').jqotesub(frisco.getTemplate('register_landing'), {parameters: { src: core.getParam('src'), src_ts: src_ts}});
			$.colorbox.close(); // ICE = wybierzPrezent etc
		
			var voterEmail = null;
			if (parameters && parameters.email && friscoHelpers.validateEmail(parameters.email)) 
				voterEmail = parameters.email;

			var _addPollVote = function(form) {
			//if ($(this).hasClass('disabled'))
			//    return false;     

			//$('p.buttons .checkout').addClass('disabled');
				
			var votedatavalue 	= $(form).find('input[name=howDoYouKnow]:checked').val()

			if (votedatavalue == undefined) {
				Popup.loadMessage({ messageId: Popup.MESSAGES.SURVEY_NO_INPUT, timeout: Popup.TIMEOUT.NORMAL });
				return false;
			}
			
			var votedataid="howDoYouKnow";
			switch (votedatavalue) {
				case '1':  votedataid='FriscoVAN'; break;
				case '2':  votedataid='InternetCommercial'; break;
				case '3':  votedataid='Flyer'; break;
				case '4':  votedataid='PromoPaper'; break;
				case '5':  votedataid='PaperCommercial'; break;
				case '6':  votedataid='FromFriend'; break;
				case '7':  votedataid="Other"; break;
			}

			if ( (votedatavalue == 7) && ($('input[id=howDoYouKnowOther]').val().length<1) ) {
				Popup.loadMessage({ messageId: Popup.MESSAGES.SURVEY_ABOUT_FRISCO, timeout: Popup.TIMEOUT.NORMAL });
				return false;
			} else if (votedatavalue == 7) {
				votedatavalue=$('input[id=howDoYouKnowOther]').val();
			}

			$(form).find('input[type=submit]').attr('disabled', true);
			
			api.addPollVote(votedataid, votedatavalue, voterEmail, function(data) {
				// handle ajax call here 
				if (data && data.success && data.success == 1) {
					Popup.loadMessage({ messageId: Popup.MESSAGES.SURVEY_FINAL, timeout: Popup.TIMEOUT.NORMAL });
					$.colorbox.close();
					$('div[class=howDoYouKnow_poll]').hide('medium');
				} else {
					Popup.loadMessage({ messageId: Popup.MESSAGES.SURVEY_SUBMIT_ERROR, timeout: Popup.TIMEOUT.NORMAL });
				}
			});
			
			return false;
			};
			frisco.bindRadios($('#FormPollHowDoYouKnow label'));
			$("#FormPollHowDoYouKnow").validate({
			debug : false,
			rules : {},
			messages : {},
			
			errorPlacement: function(error, element) {                   
						error.insertAfter(element);
			},

			errorElement : "p",
			showErrors: function(errorMap, errorList) {
				var errorListSize = errorList.length;
				this.defaultShowErrors();

				if(errorListSize > 0) {
					$('p.error').each(function() {
						if($(this).closest('div.tooltip').size() == 0) {
							$(this).wrap('<div class="tooltip"></div>');
							$(this).parent(".tooltip").prepend('<span class="icon"></span>');
							$(this).parent(".tooltip").append('<span class="arrow"></span>');
							$(this).parent(".tooltip").css('width', $(this).width() );
						}
					});
				}
			},
			
			highlight : function(element, errorClass) {
					$(element).addClass(errorClass);
			},
			
			unhighlight : function(element, errorClass) {
					$(element).removeClass(errorClass);
					$(element).siblings(".tooltip").remove();
			},
			
			submitHandler : function(form) {
					_addPollVote(form);
			}
			}); // $("#FormPollHowDoYouKnow").validate()

			return;
		}
		
		if (catalog) { catalog.disable(); }
		Sidebar.hide(); 
		if (parameters.activate) {
			var uid = parameters.activate.split("$")[0];
			if ( !isNaN(uid) && uid == loggedUserId ) { // logged on the same account
				var profile = friscoStorage.getFresh("userProfile");
				if (loggedUserId == uid && profile.status_id == 1) {
					core.setState('defaultState');
					Popup.load({ content: "<div class='text'>"+__("To konto już zostało aktywowane, zapraszamy do zakupów.")+"</div>", size: Popup.SIZE.FLASH, type: Popup.TYPE.MESSAGE, timeout: Popup.TIMEOUT.LONG });
					return;
				}
			} else if (loggedUserId) { // logged user cannot register new user
				Popup.load({ content: "<div class='text'>"+__("Jesteś zalogowany na inne konto, niż próbujesz aktywować. <br/>Wyloguj się i ponów próbę aktywacji.")+"</div>", size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING, timeout: Popup.TIMEOUT.LONG });
				core.setState('defaultState');
				return;
			}
			
			// FIXME this state should not be present in history!
			apiUsers.activateUser(parameters.activate, function(data) {
				/* We will go to special landing page from here */
				parameters.loggedUserId = loggedUserId;
				if ( (parameters.src == 'salesmore') && data && data.checksum && data.orderNumber) 
					$('#page_content').jqotesub(templates.register_landing_activation, { parameters: parameters, trackImgTag: salesmore.leadTrackBackTag(data.orderNumber, data.checksum) }); 
				else
					$('#page_content').jqotesub(templates.register_landing_activation, { parameters: parameters }); 
				
				$("#loginFromRegister").bind('click', function(e) {
					frisco.loginPopup();
				});
				Popup.loadMessage({ messageId: Popup.MESSAGES.ACCOUNT_ACTIVATED, timeout: Popup.TIMEOUT.NORMAL });
				/*if (prevState) {
					core.setState(prevState); //FIXME: previous state should carry it's parameters with it
				} else {
					core.setState('defaultState');
				}*/
				
			}, function(data) {
				var profile = friscoStorage.getFresh("userProfile");
				if (loggedUserId == uid && profile.status_id == 1) {
					core.setState('defaultState');
					Popup.load({ content: "<div class='text'>"+__("To konto już zostało aktywowane, zapraszamy do zakupów.")+"</div>", size: Popup.SIZE.FLASH, type: Popup.TYPE.MESSAGE, timeout: Popup.TIMEOUT.LONG });
				} else {
					core.setState('defaultState');
					Popup.loadMessage({ messageId: Popup.MESSAGES.ACCOUNT_ACTIVATION_ERROR, timeout: Popup.TIMEOUT.LONG });
				}
			});
		} else {
			// no parameters, so standard register is to be presented
			if (loggedUserId) {
				core.setState('defaultState');
				Popup.loadMessage({ messageId: Popup.MESSAGES.ACCOUNT_CREATED, timeout: Popup.TIMEOUT.LONG });
			} else {
				frisco.loginRegisterAction(null, {fullLoad: true});
			}
		}
	};

	var loadShowShoppingList = function(prevState, subState, parameters) {
		if (catalog) { catalog.disable(); }
		Sidebar.hide(); 
		if (prevState == "showList") { return; }
		
		var listId = parameters.id;
		
		api.getUserShoppingList(session.user_id, parameters.id, function(list) {
			$('#page_content').jqotesub(templates.shopping_list_content, { shopping_list : list});
			renderCartContent();
// 			frisco.checkUnavailableProducts();
			
			$('#page_content li.settings > a.edit').click(function() {
				$('.list').addClass("editable");
				return false;
			});
			
			$('#page_content li.edit > a.save').click(function() {
				$('.list').removeClass("editable");
				return false;
			});
			
			$('#page_content li.addAll a').click(function() {
				var productsList = {};
				
				$.each(list.products, function(index, productItem) {
					productsList[productItem.product_id] = productItem.amount;
				});
					
				api.updateProductsInCart(productsList, null, function(cart_data) {
					friscoStorage.set('cartData', cart_data);
					friscoSession.set('cart_version', cart_data.version);
// 					friscoEvents.fire('cart', friscoEvents.FEV_CART_DATA_CHANGED, cart_data);
				});
					
				if(_gaq && _gaq.push){
					_gaq.push(['_trackEvent','Serwis','Lista-zakupow','Dodaj-do-koszyka-wszystko']);
				}
				return false;
			});
			
			$('#page_content li.delete > a.delete').click(function() {
				var callbacks = {
					"#popupYes" : function() {
						api.deleteUserShoppingList(session.user_id, listId, function(r){
							if (r) {
								core.setState('lists');
							}
						});
						Popup.hide();
					},
					"#popupNo" : function() { 
						Popup.hide();
					},
				};
				Popup.loadMessage({ messageId: Popup.MESSAGES.DELETE_USER_LIST, callbacks: callbacks });
				return false;
			});
			
			var timeout = null;
			$('#page_content div.list div.name input').keyup(function() {
				var name = $(this).val();
				
				if (timeout) clearTimeout(timeout);
				timeout = setTimeout(function() {
					api.updateUserShoppingList(session.user_id, listId, name, function(r) {
						if (r) {
							$('#contentHeader h3').html(name);
						}
					});
				}, 600);
			});
			
			$('#page_content ul#products > li > div').append('<a href="#" class="delete">' + __('usuń') + '</a>');
			$('#page_content ul#products li .editableAmount a.increase').click(function(event) {
				event.stopImmediatePropagation();
				
				var productId = $(this).closest(".productId").attr("product_id");
				var value = parseInt($(this).siblings('span').html());
				
				if (productId) {
					api.updateProductInShoppingList(session.user_id, listId, productId, value+1, function(ok) {
						if (ok) {
							var element = $('#page_content ul#products li[product_id='+productId+'] .editableAmount > span');
							var input = $('#page_content ul#products li[product_id='+productId+'] .addToCart > input.quantity');
							element.html(parseInt(element.html()) + 1);
							input.val(parseInt(element.html()));
						}
					});
				}
				
				return false;
			});
			
			$('#page_content ul#products li .editableAmount a.decrease').click(function(event) {
				event.stopImmediatePropagation();
				var productId = $(this).closest(".productId").attr("product_id");
				var value = parseInt($(this).siblings('span').html());
				
				if (productId && value > 1 ) {
					api.updateProductInShoppingList(session.user_id, listId, productId, value-1, function(ok) {
						if (ok) {
							var element = $('#page_content ul#products li[product_id='+productId+'] .editableAmount > span');
							var input = $('#page_content ul#products li[product_id='+productId+'] .addToCart > input.quantity');
							element.html(parseInt(element.html()) - 1);
							input.val(parseInt(element.html()));
						}
					});
				}
				
				return false;
			});
			
			$('#page_content ul#products li .delete').click(function(event) {
				event.stopImmediatePropagation();
				var productId = $(this).parent("div").parent("li").attr("product_id");
				if (productId) {
					api.deleteProduct2ShoppingList(session.user_id, listId, productId, function(ok) {
						if (ok) {
							$('#page_content ul#products li[product_id='+productId+'] ').remove();
						}
					});
				}
				return false;
			});
		});
	};

	var loadShoppingList = function() {
		var currentPage = 1; var itemsPerPage = 20;
		var lastListsAmount = 0, shouldLoadMore = true;
		if (catalog) { catalog.disable(); }
		
		$('#page_content').jqotesub(templates.shopping_lists, {fullRender : true});
		
		var container = $('ul#shoppingLists');
		container.on('click', ".addAll", function(e) {
			e.stopImmediatePropagation();
			
			var This = $(this);
			var listId = This.attr('list_id');
			
			var lists = friscoStorage.getShallow('userLists'), listsById = {};
			$.each(lists, function(i, l) {
				listsById[l.shopping_list_id] = l.products;
			});
			var productsList = {}; 
				
			$.each(listsById[listId], function(index, productItem) {
				productsList[productItem.product_id] = productItem.amount;
			});

			api.updateProductsInCart(productsList, null, function(cart_data) {
				friscoStorage.set('cartData', cart_data);
				friscoSession.set('cart_version', cart_data.version);
// 				friscoEvents.fire('cart', friscoEvents.FEV_CART_DATA_CHANGED, cart_data);
				if (!This.closest("li").data("highlight")) {
					This.closest("li").data("highlight",true)
					This.closest("li").effect("highlight", {color: '#F3F8BA'}, 1000, function() {
						This.closest("li").data("highlight",false);
					});
				}
			});

			if (_gaq && _gaq.push) {
				_gaq.push(['_trackEvent','Serwis','Lista-zakupow','Dodaj-do-koszyka-wszystko']);
			}
			return false;
		});
		
		var cbk = function(lists) {
			if (currentPage == 1) {
				if (lists.length == 0)
					$('ul.shoppingLists').before('<div class="firstTimers">'+ __("Nie masz żadnych list zakupowych.") +'</div>');
				
				friscoStorage.setShallow('userLists', {});
			}
			
			lastListsAmount = lists.length;
			if (lastListsAmount < itemsPerPage) shouldLoadMore = false;
			
			var renderCbk = function() {
				container.append(out);
			}; 
			
			container.jqoteapp(templates.shopping_lists, {shopping_lists: lists});
			friscoStorage.setShallow( $.extend(friscoStorage.getShallow('userLists'), lists) );
			
// 			var userLists = {};
// 			var out = '';
// 			$.each(lists, function(index, item) {
				
// 				api.getUserShoppingList(session.user_id, item.shopping_list_id, function(list) {
// 					userLists[item.shopping_list_id] = list;
					//out += $.jqote(templates.shopping_list_shelf, {list: list});
					
					//container.jqoteapp(templates.shopping_list_shelf, {list: list});
// 					if (index == lastListsAmount-1)
// 						renderCbk();
					
// 					container.find(".products_info").html(list.products_count + " " +__('produkty') + ", " + __('wartość')  + " " + list.human_price_gross +  " zł");
// 					var imgContainer = container.find("ul.images");
// 					var imageMaxDimension = 68;
// 
// 					var productsCount = list.products.length;
// 					if (productsCount == 1) { imageMaxDimension = 170; }
// 					else if(productsCount == 2 ) { imageMaxDimension = 110; }

// 					$.each(list.products, function(index, item) {
// 						if (index == 6) {
// 							imgContainer.parent().append('<span class="more">' + __("Zobacz wszystko") + '</span>');
// 							return false;
// 						}
// 
// 						imgContainer.append('<li class="width_'+ imageMaxDimension +'px"><a href="' + helpers.url('showList', { id : item.shopping_list_id }) + '"><img src="' + helpers.img_url(item.product.image_id, imageMaxDimension, imageMaxDimension) + '" title="' + __$(item.product.full_name) + '"/></a></li>');
// 					});
// 				});
// 			});
			
// 			friscoStorage.setShallow( $.extend(friscoStorage.getShallow('userLists'), userLists) );
		}
		
		api.getUserShoppingLists(session.user_id, currentPage, itemsPerPage, {products : true}, cbk);
		
		friscoEvents.hook('loadMoreLists', friscoEvents.FEV_LOAD_MORE, function() {
			if (shouldLoadMore)
				api.getUserShoppingLists(session.user_id, ++currentPage, itemsPerPage, {products : true}, cbk);
		});
	};

	var loadNutriciaRegulation = function(prevState, subState, params) {
		if (params && params.loadOnLayer) {
			var content = $.jqote(templates.nutricia_regulations, {compactTemplate: true});
			Popup.load({ title : __("Regulamin korzystania ze sklepu pracowniczego Nutricia"), content: content, size: Popup.SIZE.FULLSIZE, type: Popup.TYPE.MESSAGE, /*timeout: Popup.TIMEOUT.NORMAL*/ });
		} else {
			$('#page_content').jqotesub(templates.nutricia_regulations, {});
			document.title = $('#page_content h2').eq(0).text();
		}
	};
	
	var loadAbout = function() {
		$('#page_content').jqotesub(templates.about, {});
        document.title = $('#page_content h2').eq(0).text();
	};
	
	var loadRegulation = function(prevState, subState, params) {
		$('#page_content').jqotesub(templates.regulation_content, {});
		document.title = $('#page_content h2').eq(0).text();
		var scrollToOld = function() { $(window).scrollTop($('#old-regulation').offset().top - 80); };
		if(params.old) { _.defer(scrollToOld); }
		$('.head a.to-old').click(scrollToOld);
	};
	
	var loadPrivacy = function() {
		$('#page_content').jqotesub(templates.privacy_content, {});
        document.title = $('#page_content h2').eq(0).text();
	};
	
	var loadWork = function() {
		$('#page_content').jqotesub(templates.work_content, {});
        document.title = $('#page_content h2').eq(0).text() + " - Frisco.pl";
	};
    
	var loadSavingPrograms = function(prevState, subState) {
		if (prevState != 'savingPrograms') {
			$('#page_content').jqotesub(templates.saving_programs_content, {});
// 			return _routeHelp(subState);
		}
		
		_routeLoadSavingPrograms(subState);
	};
	
	var _routeLoadSavingPrograms = function(subState) {
		if (!subState) {
			return;
		}
		$("#page_content .article.help > div.content > div > ul > li").hide();
		switch(subState) {
// 			case 'savingPrograms':
// 				$("#page_content .article.help .savingPrograms").show();
// 				break;
			case 'freeShipping':
				$("#page_content .article.help .freeShipping").show();
				return;
		}
	};
    
	var loadAboutFrisco = function(prevState, subState) {

        if(prevState == 'aboutFrisco') {
            return _routeAboutFrisco(subState);
        }

        $('#page_content').jqotesub(templates.about_frisco_content, {});
        

        _routeAboutFrisco(subState);

    };
    
	var _routeAboutFrisco = function(subState) {
        if(!subState) {
            return;
        }
        $("#page_content .article.help > div.content > div > ul > li").hide();
        switch(subState) {
            case 'packPurchases':
                $("#page_content .article.help .packPurchases").show();
                break;
            case 'freshFruits':
                $("#page_content .article.help .freshFruits").show();
                break;
            case 'freshFishAndMeat':
                $("#page_content .article.help .freshFishAndMeat").show();
                break;
            case 'expirationDate':
                $("#page_content .article.help .expirationDate").show();
                break;

            case 'deliverTheShopping':
                $("#page_content .article.help .deliverTheShopping").show();
                break;
            case 'friscoIsGreen':
                $("#page_content .article.help .friscoIsGreen").show();
                return;
        }
    };
    
	var loadFirstShopping = function(prevState, subState) {

        if(prevState == 'firstShopping') {
            return _routeFirstShopping(subState);
        }

        $('#page_content').jqotesub(templates.first_shopping_content, {});
        

        _routeFirstShopping(subState);

    };
   
	var _routeFirstShopping= function(subState) {
        if(!subState) {
            return;
        }
        $("#page_content .article.help > div.content > div > ul > li").hide();
        switch(subState) {
            case 'registerAndLogin':
                $("#page_content .article.help .registerAndLogin").show();
                break;
            case 'costOfDelivery':
                $("#page_content .article.help .costOfDelivery").show();
                break;
            case 'deliveryDates':
                $("#page_content .article.help .deliveryDates").show();
                break;
            case 'paymentOptions':
                $("#page_content .article.help .paymentOptions").show();
                break;
            case 'changeOrder':
                $("#page_content .article.help .changeOrder").show();
                break;
           case 'complain':
                $("#page_content .article.help .complain").show();
                return;
        }
    };
	
	var loadSecurity = function() {
		$('#page_content').jqotesub(templates.security_content, {});
        document.title = $('#page_content h2').eq(0).text();
		
	};

	var loadSettings = function(prevState, subState, parameters) {

		DBG('SETTINGS', 'Loading settings', prevState, subState);
		if (catalog) { catalog.disable(); }

    		if(!loggedUserId) {
	    	    frisco.loginPopup();
	            return;
        	}
        	
        	// Check if we were redirected to force password change
		// switch only
		if(prevState == 'settings') {
			return _routeSettings(subState);
		}

    	DBG('SETTINGS', 'Rendering page');
		$('#page_content').jqotesub(templates.settings_content, {});
		

    	DBG('SETTINGS', 'Inner routing');
		_routeSettings(subState);

		/** generic **/
//		bindSettingsTabs();
		_bindSettingsRefreshingHooks();

		if ( (subState == 'myAccount') && (parameters.forcePassword) ) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.NEW_PASSWORD_REQUIRED, timeout: Popup.TIMEOUT.NORMAL });
			$('#userChangePassword_email').removeClass('active');
			$('#userChangePassword_edit').addClass('active').show();
			// set information 
			apiUsers.userNotifiedAfterPasswordReset(loggedUserId, function(){});
		}
    };

	var _routeSettings = function(subState) {
		// TODO: nice, gentle way not ugly screen shaking click
		if (!subState) {
			return;
		}

		$("#page_content .settings ul li.active").removeClass("active");
		
		switch(subState) {
			case 'addresses':
				_renderSettingsDeliveryAddresses();
				break;
			case 'communication':
				_renderCommunicationOptions();
				break;
			case 'myAccount':
				_renderSettingsAccount();
				break;
			case 'payments':
				_renderSettingsPayments();
				break;
			case 'history':
				_renderSettingsOrderList();
				break;
			default:
				_renderSettingsAccount();
				return;
		}

		$("#selector_" + subState).addClass("active");
		$("#settingsContent").show();
	};

	var _renderSettingsAccount = function(userData) {
		if (undefined == userData) {
			DBG('SETTINGS', 'Lack of user data');
// 			var params = {};  params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = _renderSettingsAccount;
			userData = friscoStorage.get('userData');
		}
		
		// if still nothing...
		if (!userData) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.NO_PROFILE_DATA, timeout: Popup.TIMEOUT.NORMAL });
			return;
		}

		DBG('SETTINGS', 'Rendering account data', userData);

		$("#settingsContent").jqotesub(templates.settings_tab_account, {userData: userData});

		$("div.settings .edit").click(function() {
			$(this).parent().removeClass("active");
			$(this).parent().siblings("div.editable").addClass("active");
		});
		$("div.settings .cancel").click(function() {
			$(this).closest(".active").siblings("div.visible").addClass("active");
			$(this).closest(".active").removeClass("active");
		});


    	var cbk = function(eventObj) {
    		var formObj = $(eventObj.currentTarget);
    		if (eventObj.originalEvent.explicitOriginalTarget)
        		var button = eventObj.originalEvent.explicitOriginalTarget;
			else
				var button = $(formObj).find("button[clicked=true]");


    		if(typeof $(formObj).valid == 'function') {
    			if(! $(formObj).valid()) {
    				return false;
    			}
    		}

    		if( !$(button).hasClass('save')) {
    			return false;
    		}

    		eventObj.stopImmediatePropagation();
    		var serialized = formObj.serializeArray();
    		var userData = {};
    		for (var i in serialized) {
    			var key = serialized[i].name;
    			var subKey = null;
    			if(0 < key.indexOf('[')) {
    				subKey = key.substr(key.indexOf('[') + 1, key.length - key.indexOf('[') - 1);
    				key = key.substr(0, key.indexOf('['));
    			}
    			if(subKey) {
    				if(typeof userData[key] == 'undefined') {
    					userData[key] = {};
    				}
    				userData[key][subKey] = serialized[i].value;
    			} else {
    				userData[key] = serialized[i].value;
    			}
    		}


            if (userData && userData['accountType'] == 1) {

                userData['is_company'] = 1;
            }


			// correct above data with prefix
			if (userData && userData['telephonePrefix'])
				userData['phone_prefix'] = userData['telephonePrefix'];

    		// lil routing for invoice form radio
    		if(formObj.attr('name') == 'invoice_form') {
    			// flatten postcode
    			userData['invoice_address']['postcode'] = friscoHelpers.flattenPostCode(userData['invoice_address']['postcode']);

    			// if no invoice, drop invoice address
    			$.each(formObj.parent().find('input[name="accountType"]'), function(idx, obj) {
    				if($(obj).prop('checked')) {
    					if($(obj).val() == 0) {
    						userData['invoice_address'] = null;
    					}
    				}
    			}.bind(this));
    		}

			var updCbk = (function(button) {
				return function(data) {
					if (data !== undefined) {
						Popup.loadMessage({ messageId: Popup.MESSAGES.ACCOUNT_UPDATED, timeout: Popup.TIMEOUT.NORMAL });
						friscoStorage.setShallow('userData', data);
						$(button).closest(".active").siblings("div.visible").addClass("active");
						$(button).closest(".active").removeClass("active");
						core.setState('settings', 'myAccount', {});
						core.loadCurrentState(true);
					} else {
						Popup.loadMessage({ messageId: Popup.MESSAGES.ACCOUNT_UPDATE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
					}
				};
			})(button);
			apiUsers.updateUser(loggedUserId, userData, updCbk);
			return false;
		};

		(function(cbk) {
			$.each($('#page_content .settings .myAccount form'), function(idx, form) {
				$(form).submit(cbk);
				
				/* Trick to tell which button was clicked during form submission */
				$(form).find("button").click(function() {
					$("button", $(this).parents("form")).removeAttr("clicked");
					$(this).attr("clicked", "true");
				});
			});
		})(cbk);

    	$('#page_content .settings .myAccount .invoiceChanger input[name="accountType"]').change(function(eventObj) {
    		var inputObj = $(eventObj.currentTarget);
    		if(inputObj.val() == 1) {
    			$('#page_content .settings .myAccount .invoiceAddrPicker').show();
    		} else {
    			$('#page_content .settings .myAccount .invoiceAddrPicker').hide();
    		}
    	});

    	// name form validation
    	$("#page_content .settings .myAccount form[name=name_form]").validate({
            rules : {
            	'name': {
					required : true,
    				minlength : 3
		    	},
	            'surname': {
    				required : true,
		    		minlength : 2
	        	}
            },
            messages : {
            	'name' : {
            		required : __("Imię jest wymagane"),
            		minlength: __("Imię musi mieć przynajmniej 3 znaki")
        		},
            	'surname' : {
            		required : __("Nazwisko jest wymagane"),
            		minlength: __("Nazwisko musi mieć przynajmniej 2 znaki")
        		}
            },
            errorPlacement: function(error, element) {
                    error.insertAfter(element);
            },
            errorElement : "p",
            highlight : function(element, errorClass) {
                $(element).addClass(errorClass);
                $(element).parent().addClass(errorClass);
            },
            unhighlight : function(element, errorClass) {
                $(element).removeClass(errorClass);
                $(element).parent().removeClass(errorClass);
            }
        });

    	// COE person form validation
    	$("#page_content .settings .myAccount form[name=coe_name_form]").validate({
            rules : {
            	'COE_name': {
					required : true,
    				minlength : 3
		    	},
	            'COE_surname': {
    				required : true,
		    		minlength : 2
	        	}
            },
            messages : {
            	'COE_name' : {
            		required : __("Imię osoby kontaktowej jest wymagane"),
            		minlength: __("Imię musi mieć przynajmniej 3 znaki")
        		},
            	'COE_surname' : {
            		required : __("Nazwisko osoby kontaktowej jest wymagane"),
            		minlength: __("Nazwisko musi mieć przynajmniej 2 znaki")
        		}
            },
            errorPlacement: function(error, element) {
                    error.insertAfter(element);
            },
            errorElement : "p",
            highlight : function(element, errorClass) {
                $(element).addClass(errorClass);
                $(element).parent().addClass(errorClass);
            },
            unhighlight : function(element, errorClass) {
                $(element).removeClass(errorClass);
                $(element).parent().removeClass(errorClass);
            }
        });

    	// passwords form
    	$("#page_content .settings .myAccount form[name=password_form]").validate({
            rules : {
                'password': {
                    required : true,
                    minlength: 8,
                    regexp   : "^[^ ]*$"
		    	},
	            'repeat_password': {
    				required : true,
		    		equalToElement: $("#page_content .settings .myAccount form[name=password_form] input[name=password]")
	        	}
            },
            messages : {
                'password' : {
                    required : __("Hasło jest wymagane"),
                    minlength: __("Hasło musi mieć przynajmniej 8 znaków"),
                    regexp   : __("Hasło nie może zawierać spacji")
        		},
            	'repeat_password' : {
            		required : __("Powtórzone hasło jest wymagane"),
            		equalToElement: __("Powtórzone hasło musi być identyczne z wprowadzonym hasłem")
        		}
            },
            errorPlacement: function(error, element) {
                    error.insertAfter(element);
            },
            errorElement : "p",
            highlight : function(element, errorClass) {
                $(element).addClass(errorClass);
                $(element).parent().addClass(errorClass);
            },
            unhighlight : function(element, errorClass) {
                $(element).removeClass(errorClass);
                $(element).parent().removeClass(errorClass);
            }
        });


    	// phones form validation
    	$("#page_content .settings .myAccount form[name=phone_form]").validate({
            debug : true,
            rules : {
            	'phone_no': {
                               required : true,
                               digits: true,
                               minlength : { param: 9, depends : function(element) { return _validatePhoneLength(element); } } ,
                               maxlength : { param: 16, depends : function(element) { return _validatePhoneLength(element); } } 
		    	},
	            'mobile_no': {
                               required : false,
                               digits: true,
                               minlength : 9
	        	}
            },
            messages : {
            	'phone_no' : {
            		required : __("Numer telefonu jest wymagany"),
                       minlength: __("Numer telefonu musi mieć przynajmniej 9 znaków dla polskich numerów"),
                       digits    : __("Numer musi składać sie tylko z cyfr")
        		},
            	'mobile_no' : {
            		required : __("Numer telefonu komórkowego jest wymagany"),
                       minlength: __("Numer telefonu komórkowego musi mieć przynajmniej 9 znaków"),
                       digits    : __("Numer musi składać sie tylko z cyfr")

        		}
            },
            errorPlacement: function(error, element) {
                    error.insertAfter(element);
            },
            errorElement : "p",
            highlight : function(element, errorClass) {
                $(element).addClass(errorClass);
                $(element).parent().addClass(errorClass);
            },
            unhighlight : function(element, errorClass) {
                $(element).removeClass(errorClass);
                $(element).parent().removeClass(errorClass);
            }
        });

    	// invoice form validation
    	$("#page_content .settings .myAccount form[name=invoice_form]").validate({
            rules : {
            	'company_name': {
				required : true,
		    	},
	            'invoice_address[nip]': {
    				required : true,
		    		minlength : 8,
		    		digits: true,
		    		nip: true,
	        	},
                'invoice_address[street]': {
                    required : true
                },
                'invoice_address[number]': {
                    required : true
                },
                'invoice_address[postcode]': {
                    required : true,
                	minlength : 6,
                	maxlength : 6
                },
                'invoice_address[city]': {
                    required : true
                }
            },
            messages : {
            	'company_name' : {
            		required : __("Nazwa firmy jest wymagana"),            	
        		},
            	'invoice_address[nip]' : {
                	required : __("NIP jest obowiązkowy"),
                	minlength: __("Numer NIP musi mieć przynajmniej 8 znaków"),
                	digits: __('Nip może zawierać tylko cyfry'),
                	nip: __('Wprowadzony numer NIP jest niepoprawny'),
            	},
            	'invoice_address[street]' : {
                    required : __("Ulica jest wymagana")
                },
                'invoice_address[number]' : {
                    required : __("Numer domu jest wymagany")
                },
                'invoice_address[postcode]' : {
                    required : __("Kod pocztowy wymagany"),
                    minlength: __("Kod pocztowy musi mieć 6 znaków"),
                    maxlength: __("Kod pocztowy może mieć max. 6 znaków")
                },
                'invoice_address[city]' : {
                    required : __("Miasto jest wymagane")
                }
            },
            errorPlacement: function(error, element) {
                    error.insertAfter($(element).parent().children().last());
            },
            errorElement : "p",
            highlight : function(element, errorClass) {
                $(element).addClass(errorClass);
                $(element).parent().addClass(errorClass);
            },
            unhighlight : function(element, errorClass) {
                $(element).removeClass(errorClass);
                $(element).parent().removeClass(errorClass);
            }
        });

        bindAddressCompleter('settings_myaccount_completer',
			$("#page_content .settings .myAccount form[name=invoice_form] input[name='invoice_address[street]']"), // street
			$("#page_content .settings .myAccount form[name=invoice_form] input[name='invoice_address[postcode]']"), // postcode
			$("#page_content .settings .myAccount form[name=invoice_form] input[name='invoice_address[city]']"), // city
			$("#page_content .settings .myAccount form[name=invoice_form] input[name='invoice_address[number]']") // street no
		);

    };

	var _renderCommunicationOptions = function(userProfile) {
		// settings edit options
		if (!userProfile) {
			userProfile = friscoStorage.get('userProfile');
		}

		// if still nothing...
		if (!userProfile) {
			Popup.loadMessage({ messageId: Popup.MESSAGES.NO_PROFILE, timeout: Popup.TIMEOUT.NORMAL });
			return;
		}

		$("#settingsContent").jqotesub(templates.settings_tab_communication, {userProfile: userProfile});

		$("div.settings .edit").click(function() {
			$(this).parent().removeClass("active");
			$(this).parent().siblings("div.editable").addClass("active");
		});
		$("div.settings .cancel").click(function() {
			$(this).closest(".active").siblings("div.visible").addClass("active");
			$(this).closest(".active").removeClass("active");
		});

		$('.settings .content .communication form[name=communication_options_settings] .vouchersPicker option[value=' + (userProfile.accept_voucher ? userProfile.accept_voucher : '0')  + ']').attr("selected", true);

		$('.settings .content .communication form[name=communication_options_settings] .newsletterPicker option[value=' + (userProfile.accept_spam ? userProfile.accept_spam : '0') + ']').attr("selected", true);

		$('.settings .content .communication form[name=communication_terms_settings] .termPicker option[value=' + (userProfile.shopping_day_reminder !== null ? userProfile.shopping_day_reminder : '-1') + ']').attr("selected", true);

		// TODO: this is not handled by backends .. remove !??!?
		$('.settings .content .communication form[name=communication_options_settings] .specialOffersPicker option[value=0]').attr("selected", true);

		// setting preview values
		var textValue = $('.settings .content .communication form[name=communication_terms_settings] .termPicker option[value=' + (userProfile.shopping_day_reminder !== null ? userProfile.shopping_day_reminder : '-1') + ']').html();

		$('.settings .content .communication .reminder_day').html(textValue);

		textValue = $('.settings .content .communication form[name=communication_options_settings] .vouchersPicker option[value=' + (userProfile.accept_voucher ? userProfile.accept_voucher : '0')  + ']').html();
		$('.settings .content .communication .vouchersPick').html(textValue);

		textValue = $('.settings .content .communication form[name=communication_options_settings] .newsletterPicker option[value=' + (userProfile.accept_spam ? userProfile.accept_spam : '0') + ']').html();
		$('.settings .content .communication .newsletterPick').html(textValue);

		textValue = $('.settings .content .communication form[name=communication_options_settings] .specialOffersPicker option[value=0]').html();
		$('.settings .content .communication .specialOffersPick').html(textValue);

		// bind button handlers
		var cbk = function(eventObj) {
			// fired by save button, save ;!
			var formObj = $(eventObj.currentTarget);
			if (eventObj.originalEvent.explicitOriginalTarget)
				var curButton = $(eventObj.originalEvent.explicitOriginalTarget);
			else
				var curButton = $(formObj).find("button[clicked=true]");
				
			if (curButton && curButton.hasClass('save')) {
				console.log('saving data ;!', $(formObj));
				var userData = {};
				switch($(formObj).attr('name')) {
					case "communication_options_settings":
						userData["accept_spam"] = $('.settings .content .communication form[name=communication_options_settings] .newsletterPicker')
												.find('option:selected').val();
						userData["accept_voucher"] = $('.settings .content .communication form[name=communication_options_settings] .vouchersPicker')
												.find('option:selected').val();
						break;
					case "communication_terms_settings":
						userData["shopping_day_reminder"] = $('.settings .content .communication form[name=communication_terms_settings] .termPicker')
												.find('option:selected').val();
						break;
					default:
						throw "Invalid form with updating settings request";
				}

				(function(userId, newParams, button) {
					api.updateUser(userId, newParams, function(data) {
						if (data !== undefined) {
							Popup.loadMessage({ messageId: Popup.MESSAGES.PROFILE_SETTINGS_UPDATED, timeout: Popup.TIMEOUT.NORMAL });
							friscoStorage.setShallow('userProfile', data.user);
							_renderCommunicationOptions();
							$(button).closest(".active").siblings("div.visible").addClass("active");
							$(button).closest(".active").removeClass("active");
						} else {
							Popup.loadMessage({ messageId: Popup.MESSAGES.PROFILE_SETTINGS_UPDATE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
						}
					});
				})(loggedUserId, userData, curButton);
				return false;
			} else {
				console.log('form canceled ;!', $(formObj));
			}
			return false;
		}

		$('.settings .content .communication form[name=communication_options_settings]').submit(cbk);
		$('.settings .content .communication form[name=communication_terms_settings]').submit(cbk);

		/* Trick to tell which button was clicked during form submission */
		$('.settings .content .communication form[name=communication_options_settings]').find("button").click(function() {
			$("button", $(this).parents("form")).removeAttr("clicked");
				$(this).attr("clicked", "true");
		});

		$('.settings .content .communication form[name=communication_terms_settings]').find("button").click(function() {
			$("button", $(this).parents("form")).removeAttr("clicked");
				$(this).attr("clicked", "true");
		});
	};

	var _deliveryAddressEditionFinishCallback = function(saveResult) {
//		TODO: make api returns full list
//		if(saveResult != undefined) {
//			friscoStorage.set('deliveryAddresses', saveResult);
//		}

		// FIXME:TEMPORARY SOLUTION to fire hooks
		friscoStorage.getFresh('deliveryAddresses');
		friscoStorage.getFresh('deliveryMethod');
		saveResult && frisco.setUsersPostcode();
	};

	var _bindSettingsRefreshingHooks = function() {
		// delivery addresses
		var hookFunc = function(event) {
			if (typeof event.eventData != undefined) {
				friscoStorage.setShallow('deliveryAddresses', event.eventData);
				_renderSettingsDeliveryAddresses();
			}
		};
		
		friscoEvents.hook('settingsRefreshingGuard', friscoEvents.FEV_DELIVERY_ADDRESSES_CHANGED, hookFunc);
	};

	var _clearEditDeliveryAddressForm = function(curValidationHandle) {
		$.each($('#page_content .settings .content #deliveryAddressEdit input'), function(idx, obj) {
			switch($(obj).attr('type')) {
				case 'text':
				case 'hidden':
					$(obj).val('');
					break;
				case 'checkbox':
					$(obj).prop('checked', false);
					break;
				default:
					break;
			}
		});

		$('span#descriptionCounter').html('0');
		$('#page_content .settings .content #deliveryAddressEdit #description').val('');		

		if (curValidationHandle)
		    curValidationHandle.resetForm();

		$('#street').css('border-color', '');
	};

	var _renderSettingsDeliveryAddresses = function(deliveryAddresses) {
		if (undefined == deliveryAddresses) {
			DBG('SETTINGS', 'Lack of delivery addresses');
			deliveryAddresses = friscoStorage.get('deliveryAddresses');
			if (deliveryAddresses == null) { return false; } // 404-proofing
		}
		
		DBG('SETTINGS', 'Rendering delivery addresses tab');
		$("#settingsContent").jqotesub(templates.settings_tab_addresses, {deliveryAddresses: deliveryAddresses});

		$('#page_content .settings .content .deliveryAdress tbody .address').remove();

		var saveCbk = function() {
			var form = $('#page_content .settings .content #deliveryAddressEdit form');
			var addr_no = form.find('.address_no').val();
			var addr_data = {
				'postcode': friscoHelpers.flattenPostCode(form.find('input[name=postCode_0]').val() + form.find('input[name=postCode_1]').val())
			};
			var data = form.serializeArray();
			for (var i in data) {
				var name = data[i].name;
				var value = data[i].value;

				if (name.match(/postCode/)) {
					continue;
				}
				addr_data[name] = value;
			}

			if (addr_no == undefined || !addr_no) {
				callbacks = {
					"#popupYes" : function() { 
						Popup.hide();
						
						/* Check if entered street is a custom street so we can handle it internally */
						if ( $('#street').attr('custom-street') ) {
							addr_data['custom_street'] = true;
						} 
						
						apiUsers.addUserAddress(loggedUserId, addr_data, function(result) {
							if (result) {
								if (!!addr_data['is_main']) {
									api.setUserAddressNo(loggedUserId, result.address_no, function(){
										friscoStorage.setShallow('checkoutAddressNo', result.address_no);
										$.cookie('postcode', friscoHelpers.formatPostCode(result.address.postcode), { path : '/', expires: 762 });
										_deliveryAddressEditionFinishCallback(true);
									}, true); 
								}
								$('#page_content .settings .content tr.addAddress').hide();
								$('#page_content .settings .content #deliveryAddressEdit').removeClass("active");
							} else {
								Popup.loadMessage({ messageId: Popup.MESSAGES.PROFILE_DATA_SAVE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
								return false; 
							}
						});
					},
					"#popupNo" : function() { 
						Popup.hide();
					},
				};
				
				// add
				if (checkIfAddressAlreadyExists(addr_data)) 
					Popup.loadMessage({ messageId: Popup.MESSAGES.ADD_ADDRESS, callbacks: callbacks });
				else 
					callbacks["#popupYes"].call();
				
			} else {
				// update
				apiUsers.updateUserAddress(loggedUserId, addr_no, addr_data, function(result) {
					if (result) {
						if (!!addr_data['is_main']) {
							api.setUserAddressNo(loggedUserId, result.address_no, function(){
								friscoStorage.setShallow('checkoutAddressNo', result.address_no);
								$.cookie('postcode', friscoHelpers.formatPostCode(result.address.postcode), { path : '/', expires: 762 });
								_deliveryAddressEditionFinishCallback(true);
							}, true);
						} 
						/* If addr_no that has been changed is the current/active address for all calculations then refresh them */
						var curUserProfile = friscoStorage.getShallow('userProfile'); 
						if (curUserProfile && curUserProfile.delivery_address_no == addr_no) {
							// update minimal order value
							friscoEvents.fire('orderMinimalValueAddressChanged', friscoEvents.FEV_ORDER_MINIMAL_VALUE_CHANGED, address_no);	
							// update delivery prices
							friscoStorage.getFresh('deliveryPrices');
						}

						$('#page_content .settings .content tr.addAddress').hide();
						$('#page_content .settings .content #deliveryAddressEdit').removeClass("active");
					} else {
						Popup.loadMessage({ messageId: Popup.MESSAGES.PROFILE_DATA_SAVE_ERROR, timeout: Popup.TIMEOUT.NORMAL });
						return false;
					}
				});
			}
		};

		var curValidationHandle = $("#deliveryAddressEdit > form").validate({
			rules : {
				street: {
					required:  true,
					fromselect: true,
				},
				visible_name: {
					required: true
				},
				city: {
					required: true
				},

				postCode_0: {
					required: true
				},
				postCode_1: {
					required: true
				},

				description: {
					maxlength: 254
				}
			},
			messages : {
				street : {
					required : __("Ulica jest wymagana"),
					fromselect: __('Nie znamy tej ulicy.')+' <a href="#" id="streetWarningYes">'+__('Kliknij by potwierdzić nazwę.'),
				},
				visible_name : {
					required : __("Nazwa Twojego adresu jest wymagana")
				},
				city : {
					required : __("Miasto jest wymagane")
				},
				postCode_0 : {
					required : __("Kod pocztowy jest wymagany")
				},
				postCode_1 : {
					required : __("Kod pocztowy jest wymagany")
				},

				description : {
					maxlength: __('Dodatkowe informacje mogą mieć maksymalnie 254 znaki'),
				},
			},
			errorPlacement: function(error, element) {
					if ( $(element).attr('id') == 'register_postCode_0') {
							error.insertAfter( $('register_postCode_1').next() );
					} else {
						error.insertAfter(element);
					}
			},
			errorElement : "p",
			showErrors: function(errorMap, errorList) {
				var errorListSize = errorList.length;
				this.defaultShowErrors();

				if(errorListSize > 0) {
					$('p.error').each(function() {
						if($(this).closest('div.tooltip').size() == 0) {
							$(this).wrap('<div class="tooltip"></div>');
							$(this).parent(".tooltip").prepend('<span class="icon"></span>');
							$(this).parent(".tooltip").append('<span class="arrow"></span>');
							$(this).parent(".tooltip").css('width', $(this).width() );
						}
					});
				}
			},
			highlight : function(element, errorClass) {
				$(element).addClass(errorClass);
			},
			unhighlight : function(element, errorClass) {
				$(element).removeClass(errorClass);
				$(element).closest("li").children(".tooltip").remove();
			},
			submitHandler : function(form) {
				saveCbk();
			}
		});

		_clearEditDeliveryAddressForm(curValidationHandle);
		/* Description counter */
		$('textarea#description').keyup(function() {
			$('#descriptionCounter').html( $(this).val().length );
			if ($(this).val().length > 254 )
					$('#descriptionCounter').css('color', 'red');
			else
				$('#descriptionCounter').css('color', '');
		});

		$.each(deliveryAddresses, function(index) {
			var address = deliveryAddresses[index];
			$('#page_content .settings .content .deliveryAdress tbody').prepend('<tr class="address" address_no="'+address.address_no+'"></tr>');
			$('#page_content .settings .content .deliveryAdress tbody tr[address_no='+address.address_no+']').jqoteapp(templates.settings_delivery_address, {address : address});

			// bind handling calls
			var editCbk = function(event) {
				_clearEditDeliveryAddressForm(curValidationHandle);
				
				var row = $(event.currentTarget).parent().parent();
				var addr_no = row.attr("address_no");

				var addresses = friscoStorage.getShallow('deliveryAddresses');
				var address;
				for (var i = 0; i < addresses.length; i++) {
					if (addresses[i].address_no == addr_no) {
						address = addresses[i];
						break;
					}
				}

				if (!address) {
					return;
				}

				$('span#descriptionCounter').html('0');

				// showing and filling form
				$.each(address, function(key, value) {
					var input = $('#page_content .settings .content #deliveryAddressEdit input[name=' + key + ']');
					if (input.length == 0) {
						return;
					}
					if (input.attr('type') == 'text' || input.attr('type') == 'hidden') {
						input.val(_esc(value));
					} else if(input.attr('type') == 'checkbox') {
						input.prop('checked', value ? 1 : 0);
					}
				});

				if (address.postcode) {
					var postcode = friscoHelpers.formatPostCode(address.postcode);
					$('#page_content .settings .content #deliveryAddressEdit input[name=postCode_0]').val(postcode.substr(0, 2));
					$('#page_content .settings .content #deliveryAddressEdit input[name=postCode_1]').val(postcode.substr(3));
				}
				
				$('#page_content .settings .content tr.addAddress').show();
				$('#page_content .settings .content #deliveryAddressEdit').addClass("active");
				
				if (address.description) {
					var curDesc = _esc(address.description)
					$('#page_content .settings .content #deliveryAddressEdit textarea[name=description]').val(curDesc);
					$('span#descriptionCounter').html(curDesc.length);
				}
			};

			var deleteCbk = function(event) {
				var row = $(event.currentTarget).parent().parent();
				var addr_no = row.attr("address_no");

				var addresses = friscoStorage.getShallow('deliveryAddresses');
				var address;
				for (var i = 0; i < addresses.length; i++) {
					if(addresses[i].address_no == addr_no) {
						address = addresses[i];
						break;
					}
				}
				
				if (!address) {
					return;
				}
				
				var callbacks = {
					"#popupYes" : function() {
						apiUsers.deleteUserAddress(loggedUserId, address.address_no, function() { 
							// Update user's profile delivery_address_no if needed
							api.setUserAddressNo(loggedUserId, 0, function(){
								var params = {}; params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = _renderSettingsDeliveryAddresses;
								friscoStorage.getFresh('deliveryAddresses', params);
								friscoStorage.getFresh('deliveryMethod'); // update deliveryMethod
							});
						_deliveryAddressEditionFinishCallback(); 
						});
						Popup.hide();
					},
					"#popupNo" : function() { 
						Popup.hide();
					},
				};
				Popup.loadMessage({ messageId: Popup.MESSAGES.DELETE_ADDRESS, callbacks: callbacks });
			};
			
			// render editing place
			$('#page_content .settings .content .deliveryAdress tbody tr[address_no='+address.address_no+'] .edit').click(editCbk);
			$('#page_content .settings .content .deliveryAdress tbody tr[address_no='+address.address_no+'] .delete').click(deleteCbk);
		});

		// bind autocompleter
		bindAddressCompleter('settings_completer', $("#deliveryAddressEdit input[name=street]"), // street
			[$("#deliveryAddressEdit input[name=postCode_0]"), $("#deliveryAddressEdit input[name=postCode_1]")], // postcode
			$("#deliveryAddressEdit input[name=city]"), // city
			$("#deliveryAddressEdit input[name=street_no]") // street no
		);

		var addNewCbk = function() {
			// showing empty form
			$('#page_content .settings .content tr.addAddress').show();
			$('#page_content .settings .content #deliveryAddressEdit').addClass("active");
			_clearEditDeliveryAddressForm(curValidationHandle);
		};
		var cancelNewCbk = function() {
			// showing empty form
			_clearEditDeliveryAddressForm(curValidationHandle);
			$('#page_content .settings .content tr.addAddress').hide();
			$('#page_content .settings .content #deliveryAddressEdit').removeClass("active");
			_renderSettingsDeliveryAddresses(); // we need this, because validation did not worked for second time
		};

		// bind buttons
		$('#page_content .settings .content .deliveryAdress .addNewAddress').click(addNewCbk);
		$('#page_content .settings .content .deliveryAdress .cancel').click(cancelNewCbk);
	};

	var _renderSettingsOrderList = function(orderList) {
		if (undefined == orderList) {
			DBG('SETTINGS', 'Lack of orders list');
			orderList = friscoStorage.get('orderList');
			if (orderList == null) { return false; } // 404-proofing
		}

		$("#settingsContent").jqotesub(templates.settings_tab_history, {orderList: orderList});
		$('#page_content .settings .content .orderHistory tbody .order').remove();

		$.each(orderList, function(index) {
			var order = orderList[index];
			$('#page_content .settings .content .orderHistory tbody').prepend(
					'<tr class="order order' + order.year + '_'+order.order_id+'" order_id="'+order.order_id+'" order_year="' + order.year + '"></tr>');

			$('#page_content .settings .content .orderHistory tbody tr.order' + order.year + '_'+order.order_id).jqoteapp(templates.settings_order, {order : order});

			// bind handling calls
			var editCbk = function(event) {
				var row = $(event.currentTarget).parent().parent();
				var order_id = row.attr("order_id");
				var year = row.attr("order_year");
				if (!order_id) {
					console.error("Invalid edition link");
					Popup.loadMessage({ messageId: Popup.MESSAGES.ERROR, timeout: Popup.TIMEOUT.NORMAL });
				} else {
					core.setState('viewOrder', null, {orderId: order_id, year: year});
				}
			};

			var cancelCbk = function (event) {
				var row = $(event.currentTarget).parent().parent();
				var curOrderId = row.attr("order_id");
				var curOrderYear = row.attr("order_year");
				
				var callbacks = {
					"#popupYes" : function() {
						api.updateOrderStatus(loggedUserId, curOrderId, curOrderYear, FRISCO.ORDER_STATUS_CANCELLED, function(data) {
							if (!data) {
								Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_CANCEL_ERROR, timeout: Popup.TIMEOUT.NORMAL });
							} else {
								friscoEvents.fire('homeCancelOrder', friscoEvents.FEV_ORDER_STATUS_CHANGED, {orderId: curOrderId, orderYear: curOrderYear, orderStatus: FRISCO.ORDER_STATUS_CANCELLED});
								friscoStorage.set('lastOrder', null);
								friscoStorage.set('orderList', undefined);
								
								pub.getBalance();
								
								var cartData = friscoStorage.get('cartData');
								// if cart bound to order, and the order is the one that we've just cancelled then cancel edit mode
								if (cartData && cartData.order_id && cartData.order_id == curOrderId && cartData.order_year && cartData.order_year == curOrderYear ) {
									leaveOrderEditionMode({ noRedirect:true, silent:false });
								}
								
								// SalesManago Delete Sale
// 								setTimeout(function() {
// 									var curProfile = friscoStorage.getShallow('userProfile');
// 									if (curProfile.salesManagoContactId && curProfile.salesManagoContactId != null) {
// 										api.smCancelSale(loggedUserId, curOrderYear, curOrderId, function() {});
// 									}
// 								}, 3000);
							}
							_renderSettingsOrderList();
							Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_CANCELLED, timeout: Popup.TIMEOUT.NORMAL });
						});
						Popup.hide();
					},
					"#popupNo" : function() { 
						Popup.hide();
					},
				};
				Popup.loadMessage({ messageId: Popup.MESSAGES.CANCEL_ORDER, callbacks: callbacks });
			};

			// bind handling calls
			var add2CartCbk = function(event) {
				event.stopImmediatePropagation();
				
				var row = $(event.currentTarget).parent().parent();
				var order_id = row.attr("order_id");
				var year = row.attr("order_year");
				
				Popup.loadMessage({ messageId: Popup.MESSAGES.ADDING_TO_CART/*, timeout: Popup.TIMEOUT.NORMAL*/ });
				api.loadOrderAgain(session.user_id, order_id, year, function(entryCart) {
					Popup.hide();
// 					var eventData = {oldCart : friscoStorage.getShallow('cartData'), entryCart: entryCart};
					//friscoEvents.fire('cart', friscoEvents.FEV_CART_INVALIDATED, {});
					friscoStorage.set('cartData', entryCart);
// 					friscoEvents.fire('orderLoadedAgain', friscoEvents.FEV_CART_DATA_CHANGED, eventData);
				});
				return false;
			};

			$('#page_content .orderHistory tr[order_id='+order.order_id+'] .cancelOrder').click(cancelCbk);
			$('#page_content .orderHistory tr[order_id='+order.order_id+'] .edit').click(editCbk);
			$('#page_content .orderHistory tr[order_id='+order.order_id+'] .addAll').click(add2CartCbk);
		});
	};

	var _renderSettingsPayments = function(orderList) {
		if (undefined == orderList) {
			DBG('SETTINGS', 'Lack of orders list');
			orderList = friscoStorage.get('orderList');
			if (orderList == null) { return false; } // 404-proofing
		}

		$("#settingsContent").jqotesub(templates.settings_tab_payments, {orderList: orderList});
		$('#page_content .settings .content .settlement tbody .order').remove();

		$.each(orderList, function(index) {
			var order = orderList[index];
			$('#page_content .settings .content .settlement tbody').prepend(
					'<tr class="order order' + order.year + '_'+order.order_id+'" order_id="'+order.order_id+'" order_year="' + order.year+ '"></tr>');
			$('#page_content .settings .content .settlement tbody tr.order' + order.year + '_'+order.order_id).jqoteapp(templates.settings_payment, {payment : order});

			// bind handling calls
			var payCbk = function(event) {
				var row = $(event.currentTarget).parent().parent();
				var order_id = row.attr("order_id");
				var order_year = row.attr("order_year");
				window.location = helpers.url('payment', {orderId: order_id, year: order_year });
			};

			$('#page_content .settings .content .settlement tbody tr[order_id='+order.order_id+'] .payNow').click(payCbk);
		});
	};

	var loadProductIntoSlider = function(product_id) {
		var _redrawSidebar = function(content, productData) {
			if ((Sidebar.getRenderedContentIdIn1stSlot() && Sidebar.getRenderedContentIdIn1stSlot() != 'product') || 		Sidebar.getRenderedContentIdIn2ndSlot() == 'product') {
				Sidebar.renderIn2ndSlot('product', content);
			} else {
				Sidebar.render('product', content);
			}
			Sidebar.show();
			
		}; // redrawSidebar()
		
		api.getProduct(product_id, function(productData) {
			var cart = friscoStorage.getShallow("cartData");
			productData.amountCart = cart.entries[productData.product_id] && cart.entries[productData.product_id].amount;
			
			var content = $.jqote(templates.product_sidebar, {product : productData});
			var content_Mainprice = $.jqote(templates.product_sidebar_price, {product : productData});
			var contentObj = $(content);
			
			$(contentObj).find('#sidebarMainPrice').prepend(content_Mainprice);
			/* Get multipack product if needed */
			if (productData.multipack_id) {
				api.getProduct(productData.multipack_id, function(multiPackData) {
					multiPackData.cartAmount = cart.entries[multiPackData.multipack_id] && cart.entries[multiPackData.multipack_id].amount;
					
					var content_multipack = $.jqote(templates.product_sidebar_price, {product : multiPackData});
					$(contentObj).find('#multiPackPrice').remove();
					$(contentObj).find('#sidebarMultiPack').prepend(content_multipack);
					_redrawSidebar(contentObj, productData);
					
					if (multiPackData.status == FRISCO.PRODUCT_STATUS_UNAVAILABLE) {
						$("#page_sidebar #sidebarMultiPack .addToCart").remove();
						$("#page_sidebar #sidebarMultiPack .unavailable").show();
						$("#page_sidebar #sidebarMultiPack .unavailable").html( __("chwilowo niedostępny")  );
					} else if(multiPackData.status == FRISCO.PRODUCT_STATUS_WITHDRAWN) {
						$("#page_sidebar #sidebarMultiPack .addToCart").remove();
						$("#page_sidebar #sidebarMultiPack .unavailable").show();
						$("#page_sidebar #sidebarMultiPack .unavailable").html( __("produkt wycofany")  );
					}
					
					var multiPack = $("#page_sidebar div.productContent #sidebarMultiPack");
					var mainPrice = $("#page_sidebar div.productContent #sidebarMainPrice");
					if (multiPackData.image_id) { 
						multiPack.bind("mouseover", function() {
							$(this).siblings("div.image").children("img").attr("src", __$(helpers.img_url(multiPackData.image_id, 180, 180)) )
						});
						multiPack.bind("mouseout", function() {
							$(this).siblings("div.image").children("img").attr("src", __$(helpers.img_url(productData.image_id, 180, 180)) )
						});
					} 
				}, loggedUserId);
			} else {
				_redrawSidebar(contentObj, productData);
			}
			
			$(contentObj).find('a.showFullView').on("click", function() {
				core.setState('product', null, {pid : $(this).attr('pid')});
			});
			
			(function(product) {
				Fablo.trace.visited({user: loggedUserId, products: [product.product_id]});
				
				setTimeout(function() {
					smEvent("load-product:"+parameters.pid);
				}, 3000);
			})(prod);
		}, loggedUserId);
	};
/*
	var renderCartDeliveryDate = function() {
		DBG("CART", "Rendering delivery date"); 
		var delivery_date = friscoStorage.get("deliveryDate");
		DBG("CART", "Got date", delivery_date);
		if (delivery_date && typeof delivery_date == 'object') {
			var content = friscoHelpers.timeWindowToDayPart(delivery_date.window_id) + ' '
							+ friscoHelpers.timeWindowToHourPart(delivery_date.window_id);
			$("#page_content .cart .chooseDeliveryDate").hide();
			$("#page_content .cart .showDeliveryDate .nearestDate").html(content);
			$("#page_content .cart .showDeliveryDate").show();
		} else {
			$("#page_content .cart .chooseDeliveryDate").show();
			$("#page_content .cart .showDeliveryDate").hide();
		}
		return;
	};
*/
	/**
	* Full cart view rendering
	*/
	var loadCart = function(prevState, subState, parameters) {
		var cbk = function(cartData) {
			if (catalog) { catalog.disable(); }
			Sidebar.hide();  //$("#top-boxs").hide();
			
			// hide sidebar cart
			if (cartData != null) {
// 				hideCartSlider();
 				renderCartContent(cartData);
			}
			
			// TODO: solve this racing condition (api same call repsonse buffering with gets...)
// 			DBG('CART', 'windowsList check');
// 			var params = {}; params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function() {
// 				loadCart(_prevState, _parameters);
// 			};
			
			pub.getBalance();
			bindDeliveryMinimalPrice();
			
			// Criteo
			if (frisco.useTrackingCode("criteo"))
			setTimeout(function() {
				try {
					var criteo_products = [];
					for (i in cartData.entries) {
						var orderItem = cartData.entries[i].product;
						criteo_products.push({id: orderItem.product_id, price: (orderItem.price_gross / 100).toFixed(2), quantity: cartData.entries[i].amount});
					}
					window.criteo_q = window.criteo_q || [];
					window.criteo_q.push(
						{ event: "setAccount", account: 4936 },
						{ event: "setCustomerId", id: loggedUserId },
						{ event: "setSiteType", type: "d" },
						{ event: "viewBasket", user_segment: "1", item: criteo_products}
					);
				} catch (e) {}
			}, 1);
			
			// Sociomantic
			if (frisco.useTrackingCode("sociomantic"))
			setTimeout(function() {
				try {
				var sociomantic_products = [];
				for (i in cartData.entries) {
					var orderItem = cartData.entries[i].product;
					sociomantic_products.push({identifier: orderItem.product_id, amount: (orderItem.price_gross / 100).toFixed(2), currency: 'PLN', quantity: cartData.entries[i].amount});
				}
				sociomantic.sonar.adv['frisco-pl'].clear();
				if (loggedUserId) window.customer = {identifier: loggedUserId};
				window.basket = {products: sociomantic_products};
				sociomantic.sonar.adv['frisco-pl'].track();
				} catch (e) {}
			}, 1);
			
			// Google Tag Manager for SALESMORE
			var gtm_products = [];
			for (i in cartData.entries) {
				var orderItem = cartData.entries[i].product;
				gtm_products.push({sku: orderItem.product_id, name: orderItem.full_name, price: (orderItem.price_gross / 100).toFixed(2), quantity: cartData.entries[i].amount});
			}
			var gtmdata = {
				'event': 'info',
				'pageTitle': 'koszyk',
				'transactionTotal': (cartData.price_gross / 100).toFixed(2),
				'transactionProducts': gtm_products,
			};
			sendGTMEvent(gtmdata);
		};
			
		var params = {}; params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = cbk;
		friscoStorage.get('cartData', params);
		return;
	};

	// method to call when user action on cart content has been made and we know it went this way
	// this effectively has to do partial redraw only on changed items
	var updateCartContent = function(updateData) {
		if (!updateData) { return; }
		var cartData = updateData.entryCart || updateData;
		DBG('CART::updateCartContent', "entryCart.entries: " + cartData.entries);
		
		var oldCartData = updateData.oldCart || friscoStorage.getShallow('cartData');
		if (cartData.version == oldCartData.version) {
			// technically, if we got so far, it shouldn't happen, but let's make a sanity check
			DBG('CART UPDATER', "Hi, I just've saved you unneeded list refresh");
			return;
		}
		
// 		var cartByProductId = {}; //friscoStorage.getShallow('cartById');
// 		for (var i in cartData.entries) {
// 			cartByProductId[cartData.entries[i].product_id] = cartData.entries[i];
// 		}
		
		var cartDiff = friscoStorage.getShallow('cartDiff');
		
		if (!$.isEmptyObject(cartDiff)) {
			var state = core.getCurrentState();
			
			if (state == 'checkout') {
				checkoutUpdateTotalValue();
			} else if (state == 'cart') {
				checkoutUpdateTotalValue();
				
				// TODO: hesus fuckin christ, mod api response to return cartData enumerated by id not ts_id
				// FIXED! Yay! :D
				$.each(cartData.entries, function(i, elem) { 
					if (cartDiff[elem.product_id]) {
						if (cartDiff[elem.product_id].old == 0) { // add to list
							$('ul#products').jqoteapp(templates.cart_product_shelf, { product : elem.product, cart_entry: elem });
// 						} else if (cartDiff[elem.product_id]['new'] == 0) { // delete it
// 							$('ul#products').remove('li[product_id='+elem.product_id+']');
						} else { // just mod it
							$("ul#products li[product_id="+elem.product_id+"]").find('span.amount').html(cartData.entries[elem.product_id].amount);
							$("ul#products li[product_id="+elem.product_id+"]").find('strong.ttlHumanPrice').html(cartData.entries[elem.product_id].human_price_gross + ' zł');
						}
					}
				});
				
				// delete removed products
				$.each(cartDiff, function(i, elem) {
					if (elem['new'] == 0) { // delete it
						$('ul#products li[product_id='+i+']').fadeOut({
							always: function() { $(this).remove(); }
						});
					}
				});
			} else {
				$.each(cartDiff, function(i, elem) {
					$("[product_id="+i+"]")
						.toggleClass('active', elem['new'] > 0)
						.find("span.amount").html(elem['new']);
				});
				
				bindDeliveryMinimalPrice();
				
// 				if (state == 'orderCart')
// 					checkoutUpdateTotalValue();
			}
			
			$('.subtotal p.price:not(.protected)').html(friscoHelpers.parsePrice(cartData.human_price_gross, {currency: true}));
			
			// sidebar cart update
			renderSliderCartContent({ updateData : cartData, cartDiff : cartDiff, cartById : cartData.entries });
			
			if (loggedUserId) {
				var curProfile = friscoStorage.getShallow('userProfile');
				if (curProfile.salesManagoContactId && curProfile.salesManagoContactId != null) {
					var prods = [];
					$.map(cartData.entries, function(elem, i) { 
						prods.push(elem.product_id); 
					});
					api.smUpdateCart(loggedUserId, prods, function(data) { 
						console.log("[updateCartContent] updated cart for salesmanago"); 
					});
				}
			}
		}
	};
	
	// fully redraw prducts in cart:
	// - with #page_content redraw (jqotesub) on stn,cart
	// - with marking products as "in cart" elsewhere
	var renderCartContent = function(cartData) {
		if (!cartData || cartData === undefined) {
			cartData = friscoStorage.getShallow('cartData');
		}
		if (!cartData) {
			return;
		}
		
		if (cartData.entryCart)
			cartData = cartData.entryCart;
		
		DBG('CART::renderCartContent', "cartData.entries: " + cartData.entries);
		var state = core.getCurrentState();
		if (state == 'checkout') {
			checkoutUpdateTotalValue();
		} else if (state == 'cart') {
			$('#page_content').jqotesub(templates.cart_content, {cart : cartData});
			if (cartData.gift_id != null && cartData.giftData) {
				cartData.giftData.tag_ids = [];
				cartData.entries[cartData.giftData.productId] = {
					amount:1, created_at:1, gift:true, human_price_gross:cartData.giftData.human_price_gross, is_promoonly:true, product:cartData.giftData, product_id:cartData.giftData.product_id, status:FRISCO.PRODUCT_STATUS_AVAILABLE, viewOnly:true
				};
			}
			frisco.renderProducts($('ul#products'), cartData.entries, false, function(x){
				return { product : x.product, cart_entry: x };
			}, 'cart_product_shelf');
			
			
			$('.subtotal p.price:not(.protected)').html(friscoHelpers.parsePrice(cartData.human_price_gross, {currency: true}));
			checkoutUpdateTotalValue();
		} else {
// 			var cartById = friscoStorage.getShallow('cartById');
			
			$.each(cartData.entries, function(i, elem) {
				$(".productId[product_id="+i+"]")
				.toggleClass('active', !!elem.amount)
				.find(".amountCart span.amount").html(elem.amount);
			});
// 			$(".productId[product_id]").each(function() {
// 				var id = +$(this).attr('product_id');
// 				var amount = cartData.entries[id] && cartData.entries[id].amount;
// 				$(this).toggleClass('active', amount > 0);
// 				if (amount) {
// 					$(this).find(".amountCart span.amount").html(amount);
// 				}
// 			});
			
			bindDeliveryMinimalPrice();
			
			$('.subtotal p.price:not(.protected)').html(friscoHelpers.parsePrice(cartData.human_price_gross, {currency: true}));
// 			if (state == 'orderCart') {
// 				checkoutUpdateTotalValue();
// 			} 
		}
	};

	var loadOwoceMorza = function(prevState, subState, parameters) {
		if (catalog == null) {
			catalog = new Catalog(api, renderCartContent);
		}
		
		parameters.c = [637, 3890, 1412];
		parameters.cn = "Owoce Morza";
		
		catalog.enable();
		catalog.setParameters(parameters);
		
		var queryString = parameters.q;
		
		Sidebar.hide(); 
	};

	var loadSearchResults = function () {
		// generally handled in fablo_config.js - here only set category details
		// Only thing that is done here explicitely is showing #fablo_content - because of scrolling when clicking back/forward:
		// content should be fully shown and rendered when scroll is restored in core.js (after state loading),
		// and fabloFromUrl (fablo_config.js) is bound after loadCurrentState (core.js) has executed.
		// That's why #fablo_content need to be shown here.
		$('#fablo_content').show(); 
		params = core.getCurrentParameters();
		if (params.c)
			frisco.loadCategory(params.c);
		else
			$("#sort-attrs .sort-list li:eq(3) a").text(__$('ceny za kg'));
	};

	/*
	 * core function, loading external js templates, called on startup
	 */
	var loadTemplates = function() {
		$.ajax({url : '/jstemplates/' + CONFIG.REVISION,
			contentType : 'json',
			success : function(data) {

			$.each(data, function(index) {
				templates[index] =  $.jqotec(this);
			});
		}, async: false});
	};

	var renderSliderCartContent = function(params) {
		if (!params || params.data == undefined && params.updateData == undefined) {
			DBG('SLIDER_CART', 'No params.data, shallow getting from storage && performing full redraw...');
			params = {}; params.data = friscoStorage.getShallow('cartData');
		}
		
		var _update = function(params) {
// 			if (params.cartDiff == undefined) params.cartDiff = friscoStorage.getShallow('cartDiff');
// 			if (params.cartById == undefined) {
// 				params.cartById = {}; 
// 				for (var i in updateData.entries) {
// 					cartByProductId[updateData.entries[i].product_id] = updateData.entries[i];
// 				}
// 			}
			
			$.each(params.updateData.entries, function(i, elem) { 
				if (params.cartDiff[elem.product_id]) {
					if (params.cartDiff[elem.product_id].old == 0) { // add to list - maybe this would be easier to do with full repaint?
						var item = $.jqote(templates.cart_shelf, { product : elem.product, cart_entry: elem });
						if ($("#cartSidebarList li").length > 0)
							$('.cartDetails.sidebar li[product_id]:first-child').parent().prepend($(item).addClass("highlight"));
						else {
							$('.cartDetails.sidebar > ul.list div.mCSB_container').append($(item).addClass("highlight"));
						}
						//.jqotepre(templates.cart_shelf, { product : elem.product, cart_entry: elem });
// 					} else if (params.cartDiff[elem.product_id].new == 0) { // delete it
// 						$('.cartDetails.sidebar li[product_id='+elem.product_id+']').slideUp(function() {
// 							$(this).remove();
// 						});
					} else { // just mod it
						$('.cartDetails.sidebar li[product_id='+elem.product_id+'] span.amountCart').html(params.cartDiff[elem.product_id]['new']);
						$('.cartDetails.sidebar li[product_id='+elem.product_id+'] p.price').html(friscoHelpers.parsePrice(elem.human_price_gross));
					}
				}
			});
			
			// delete removed products
			$.each(params.cartDiff, function(i, elem) {
				if (elem['new'] == 0) { // delete it
					var li = $('.cartDetails.sidebar li[product_id='+i+']');
					li.addClass("removing");
					setTimeout(function() {
						li.remove();
					}, 150);
				}
			});
			
// 			$('#sidebar .price:not(.protected)').html(friscoHelpers.parsePrice(params.updateData.human_price_gross));
			$('.cartDetails .subtotal .price:not(.protected)').html(params.updateData.human_price_gross);
		};
		
		var _render = function(params) {
			var content = $.jqote(templates.cart_sidebar, {cart: params.data});
			Sidebar.render('cart', content);
			
			var sortedEntries = _.sortBy(params.data.entries, function(e) { return -1*e.created_at; });
			$.each(sortedEntries, function(index) {
				$('.cartDetails.sidebar > ul.list').jqoteapp(templates.cart_shelf, {cart_entry : this});
			});
			
			if (params.data.gift_id && params.data.giftData) {
				var gift = params.data.giftData;
				gift.amount = 1; gift.created_at = 1; gift.gift = true; gift.product = params.data.giftData;
				$('.cartDetails.sidebar > ul.list').jqoteapp(templates.cart_shelf, {cart_entry: gift,  viewOnly: true});
			}
			
			$("#cartSidebarList *[pid]").live("click", function(e) {
				e.preventDefault();
				if (e.shiftKey)
					loadProductIntoSlider($(this).attr('pid'));
				else
					core.setState('product', null, {pid : $(this).attr('pid')});
			});
			
			
			$('.cartDetails.sidebar > ul.list').mCustomScrollbar({
				verticalScroll: true,
				horizontalScroll: false,
				contentTouchScroll: true,
				mouseWheelPixels: 102,
				scrollInertia: 30,
				scrollButtons: {
					enable: false
				},
				advanced: {
					normalizeMouseWheelDelta: true,
					updateOnContentResize: true
				}
			});
// 			$('.cartDetails.sidebar > ul.list').lionbars();
			
// 			$('#sidebar .price:not(.protected)').html(friscoHelpers.parsePrice(params.data.human_price_gross));
			$('.cartDetails .subtotal .price:not(.protected)').html(params.data.human_price_gross);
		};
		
		if (params.updateData) {
			var curContent = Sidebar.getRenderedContentId();
			if (params.cartDiff == undefined)
				params.cartDiff = friscoStorage.getShallow('cartDiff');
			
			// Cart sliding disabled
			_update(params);
			/*if ( !Sidebar.isVisible() && $(window).width() >= 1440 ) {
				
				// determine whether to flash the cart
				var added = [];
				$.each(params.cartDiff, function(i, elem) { 
					if (elem['new'] > 0) added.push(i);
				}); 
				
				if (added.length > 0) {
					params.data = friscoStorage.getShallow('cartData');
					_render(params);
					Sidebar.show();
					
					var timeout = setTimeout(function(){
						Sidebar.hide();
						$("#page_sidebar .cartDetails").unbind("mouseenter");
					}, 2000);
					$("#page_sidebar .cartDetails").bind("mouseenter", function() { clearTimeout(timeout); });
					
					
					for (var i=0; i<added.length; i++)
						$("#page_sidebar .cartDetails li[product_id=" + added[i] + "]").addClass("highlight");
				}
			} else {
				_update(params);
			}*/
		} else if (params.data) {
			_render(params);
		}
		
		return true;
	};

// 	var showCartSlider = function(cart) {
// 		cartSliderStatus =  CART_SLIDER_STATUS_OPENED;
// 		renderSliderCartContent({ data : cart });
// 	};

// 	var hideCartSlider = function() {
// 		cartSliderStatus =  CART_SLIDER_STATUS_CLOSED;
// 	};

	var loadMenuPromotions = function() {
		cms.menu_ads(function(ads){
			var display_product = function(place, product) {
				$('#navigation .level-1 > li[data-slug="' + place + '"] .category-promotion')
					.find("img").attr("src", helpers.img_url(product.image_id, 175, 175)).end()
					.find(".image-info").html('<h2>'+ product.full_name +'</h2><p class="small">'+ product.human_grammage_gross +'</p>').end()
					.find("a").attr("href", helpers.url('product', { pid : product.product_id, n : product.full_name.toLowerCase() })).end()
					.addClass("enabled");
			};
			
			var display_promos = function(available) {
				var i;
				$.each(ads, function(place, products){
					for(i=0; i<2; i++) {
						if (available[products[i]]) {
							display_product(place, available[products[i]]);
							break;
						}
					}
					if (i == 2 && products.length > 2) {
						// No proper product in first 2 items. Load rest from api and try them.
						api.getProducts(products.slice(2), function(products){
							$.each(products, function(i, product){
								if (product.status == FRISCO.PRODUCT_STATUS_AVAILABLE) {
									display_product(place, product);
									return false; // break
								}
							});
						}, loggedUserId, null, null, true);
					}
				});
			};
			
			// Load two products for every category - that will be probably sufficient.
			var to_load = [];
			$.each(ads, function(place, products){
				to_load = to_load.concat(products.slice(0, 2));
			});
			api.getProducts(to_load, function(products){
				var ready = {};
				$.each(products, function(i, product){
					if (product.status == FRISCO.PRODUCT_STATUS_AVAILABLE)
						ready[product.product_id] = product;
				});
				display_promos(ready);
			}, loggedUserId);
		});
		cms.menu_shops(function(shops){
			if (shops.length) {
				var container = $("#menu-shops");
				_.each(shops, function(shop){
					var link = $("<a>").attr("href", shop.url).append($("<img>").attr("src", shop.img));
					_.each(shop.categories, function(cat) {
						link.addClass("cat-"+cat);
						$("#navigation p[rel_c='0:"+cat+"']").parent().addClass("with-shops");
					});
					container.append(link);
				});
			}
			
		});
	};
    
    var slugs_map = {'fresh': 'swieze', 'bakery': 'piekarnia', 'frozen': 'mrozonki', 'food-cupboard': 'spozywcze', 'drinks': 'napoje', 'wine-&-spirits': 'alkohol', 'health-&-beauty': 'zdrowie-i-uroda', 'toilet': 'toaletowe', 'home': 'domowe', 'baby': 'dziecko', 'pet-care': 'zwierzeta', 'international-specialties': 'kuchnie-swiata'};

	var _categoryNavigation = function(subtreeRoot, category, breadcrumbs) {
		if (breadcrumbs == undefined) { breadcrumbs = []; }
		var subcategories = category.children;

		breadcrumbs.push(category.name);

		var cat_li = $('<li>'),
			href   = helpers.url('searchResults', {c: category.category_id, cat: helpers.clearCategory(breadcrumbs)}, null, true),
			cat_a  = $('<a rel_c="'+(breadcrumbs.length+1)+":"+category.category_id+'" href="' + href + '" title="' + __$(category.name) + '">' + __$(category.name).replace(/ i /, " i&nbsp;") + '</a>'),
			div    = $('<div class="level-' + (breadcrumbs.length + 1) + '">'),
			subs   = $('<ul>'),
			subs2  = $('<ul>'),
			column_size = 10;

		if (breadcrumbs.length == 1) {
			var slug = helpers.clearCategory(category.name);
			slug = slugs_map[slug] || slug; // English names should render the same pages as polish.
			cat_li.append('<p rel_c="0:'+category.category_id+'" title="' + __$(category.name) + '"><a href="' + helpers.url(slug, {}, null, true) + '" >' + __$(category.name).replace(/ i /, " i&nbsp;") + '</a></p>');
			cat_li.attr("data-slug", helpers.clearCategory(category.name));
		} else {
			cat_li.append(cat_a);
		}
		
		cat_li.data('category_id', category.category_id);
		category.subcategory_count = friscoHelpers.objectSize(category.children);  // it is not always equal

		if(category.subcategory_count > 0 && breadcrumbs.length < 3) {
			div.append(subs);
			cat_li.append(div);
			cat_li.addClass('has-submenu');
			if(breadcrumbs.length == 2) {
				if(category.subcategory_count <= column_size) {
					cat_li.addClass('submenu-one-col');
				} else {
					cat_li.addClass('submenu-two-cols');
					subs.attr('data-size', Math.ceil(category.subcategory_count / 2));
					div.append(subs2);
				}
			} else {
				div.append('<div class="category-promotion"><a href="#"><h2>Polecamy</h2><p>dobre produkty</p>'+
						'<img src="" width="175" height="175" alt=""><div class="image-info"></div>'+
					'</a></div>');
			}
		}
		if (subcategories) {
			if (category.category_id == 3386) {
				delete subcategories[4182]; // remove link to PQS via category
			}
			$.each(subcategories, function(i, subcategoryObj) {
				_categoryNavigation(cat_li, subcategoryObj, breadcrumbs);
			});
		}
		
		if (category.category_id == 3386) { // append link to PQS LP instead of category link
			cat_li.find("div.level-3>ul").append('<li><a href="/stn,pqsLP" title="'+__('Wieprzowina PQS')+'">'+__('Wieprzowina PQS')+'</a></li>'); 
		}
		if (category.category_id == 406) { // pampers shop link
			cat_li.find("div.level-2>ul").append('<li class=""><a href="/stn,pampersLandingPage?miejsce=serwis-hp&kampania=pampers" title="Sklep Pampers">'+__('Sklep PAMPERS')+'</a></li>'); 
		}
		
		// full category view links
		var full_cat_li = $('<li class="greyout">');
		full_cat_li.append(cat_a.clone().html( __("zobacz całą kategorię")));
		cat_li.find("div.level-2>ul").append(full_cat_li); 
		var promo_href = helpers.url('promocje', {cat: helpers.clearCategory(category.name)}, null, true);
		var new_href = helpers.url('nowosci', {cat: helpers.clearCategory(category.name)}, null, true);
		cat_li.find("div.level-2>ul").append('<li class="greyout"><a href="' + promo_href + '" title="' + __('zobacz promocje') + '">' + __('zobacz promocje') + '</a></li>'); 
		cat_li.find("div.level-2>ul").append('<li class="greyout"><a href="' + new_href + '" title="' + __('zobacz nowości') + '">' + __('zobacz nowości') + '</a></li>'); 
		
		var el = subtreeRoot.find('> div >ul:eq(0)');
		if (breadcrumbs.length == 1) { el = subtreeRoot; }
		var max_column_size = el.attr('data-size');
		if (breadcrumbs.length == 3 && el.children().length >= max_column_size) {
			el = subtreeRoot.find('> div >ul:eq(1)');
		}
		breadcrumbs.pop();
		el.append(cat_li);
		
		if (category.category_id == 2608) { // Kubuś link
			el.append('<li class=""><a href="/stn,kubus?miejsce=serwis&kampania=kubus" title="SKLEP KUBUŚ">'+__('SKLEP KUBUŚ')+'</a></li>'); 
		}
		
		// temporary hiding of categories that are not available without friscovan
		if ($.inArray(category.category_id, [2403,3,696,558,7,2597,2599,2600,2601,2602,2898,2407,2410,2412,152,165]) > -1) {
			cat_li.addClass('category-van-only');
		}
	};

	var __loadNavigationSubtree = function(treeNode){
		var categoryUserId = 0;
		if (loggedUserId) {
			// We only want separete categories caches for users with savingplan = 14 (nutricia), others should have common cache for categories tree
			var profile = friscoStorage.get('userProfile');			
			if ( (profile)&&(profile.savingplan_type == 14) ) {
			    categoryUserId = loggedUserId;
			}			
		}		
		api.getCategoriesTree([0], 3, function(categories_by_parent) {
			treeNode.first().empty();
			var subtreeRoot = treeNode.first();
			$.each(categories_by_parent, function(parent_id, subcategories){
				$.each(subcategories, function(_, category){
					if (category.name && (CONFIG.CATEGORY_WHITELIST_FILTER[parent_id] == undefined || (CONFIG.CATEGORY_WHITELIST_FILTER[parent_id] && -1 !== CONFIG.CATEGORY_WHITELIST_FILTER[parent_id].indexOf(category.category_id)))) {
						_categoryNavigation(subtreeRoot, category);
					}
				});
			});
			
			// add links to feature pages
			var li     = $('<li>'),
				cat_p  = $('<p rel="fp"><a href="/stn,inspiracje-kulinarne">' + __$("Inspiracje kulinarne") + '</a></p>'),
				div    = $('<div class="level-2 poradniki">'),
				subs   = $('<ul>');
			li.append(cat_p);
			var appendContent = function(el, content) {
				$.each(content, function(i,c) { el.append('<li><a href="' + c['dest-url'] + '" title="' + c.link_name + '">' + c.link_name + '</a></li>'); });
			};
			cms.menu_ik(function(menus){
				subs.append('<li class="col-title">Inspiracje Kulinarne</li>');
				appendContent(subs, menus.menu_inspiracje);
				div.append(subs);
				subs = $('<ul class="second-col-menu">');
				subs.append('<li class="col-title">Sezonowe</li>');
				appendContent(subs, menus.menu_sezonowe);
				div.append(subs);
				div.append('<p class="show-all"><a href="/stn,inspiracje-kulinarne">Zobacz wszystkie</a></p>')
			});
			li.append(div);

			li.addClass('has-submenu');
			subtreeRoot.append(li);
			
			frisco.friscoVanAvailable(function(available) {
				$("#navigation .category-van-only").toggle(available);
			});
			
			loadMenuPromotions();
		}, categoryUserId);
	};

    var bindSettingsTabs = function() {
        $("div.settings > div.head li a").live("click", function() {
            $(this).parent("").addClass("active"); $(this).parent("").siblings().removeClass("active");
				$("div.settings > div.content").children().hide();
				$("div.settings > div.content ." + $(this).attr("class")).show();
        });
    };
    var bindRegisterTabs = function() {
        $("#registerContent ul.tabs a").live("click", function() {
            $(this).parent("").addClass("active"); $(this).parent("").siblings().removeClass("active");
            if ($(this).hasClass("noAddress")) {
            	$("input[name=register_full_address]").val("false");
            	$("ul.tabsContent li").hide();
            	$("ul.tabsContent li.noAddress").show();
            } else {
                $("input[name=register_full_address]").val("true");
                $("ul.tabsContent li").show();
                $("ul.tabsContent li.noAddress").hide();
            }
        });
    };

    var _validatePhoneLength = function(el) {
		// only for +48 prefixes 
		if ($('#regPrefixes').val() == 48)
			if ( $(el).val().length == 9 )
				return true;
			else 
				return false;
		else 
			return false;
    };

    var bindRegisterValidations = function(fast, callback, onSubmit) {
        var requiredIfInvoice = { depends: function() { return $("#invoice-radio input:checked").val() == 'yes'; }};

        $("#registerContent").validate({
            rules : {
                email : {
                    required : true,
                    email    : true,
					delayed  : {
                        delay : 500,
                        callback : function(value, resultHandlers) {
                            apiUsers.isEmailTaken(value, resultHandlers.invalid, resultHandlers.valid);
                        }
                    }
                },
                password : {
                    required  : true,
                    minlength : 8,
                    regexp    : "^[^ ]*$"
                },
                repeatPassword : {
                    required  : true,
                    minlength : 8,
                    equalTo : "#register_password"
                },
                postCode_0 : {
                    required : true && !fast,
                    minlength : 2,
                    maxlength : 2,
                    digits : true
                },
                postCode_1 : {
                    required : true && !fast,
                    minlength : 3,
                    maxlength : 3,
                    digits : true
                },
                name : {
                    required : true
                },
                surname : {
                    required : true
                },
                sex : {
                    required : true && !fast
                },
                telephoneNumber : {
                    required : true,
                    minlength : 9,
                    maxlength : 12,
                    digits: true
                },
                street: {
                    required : {
                        depends : function(element) {
                            return $("input[name=register_full_address]").val() === "true";
                        }
                    }
                },
                street_number: {
                    required : {
                        depends : function(element) {
                            return $("input[name=register_full_address]").val() === "true";
                        }
                    }
                },
                city: {
                    required : {
                        depends : function(element) {
                            return $("input[name=register_full_address]").val() === "true";
                        }
                    }
                },
                terms_subscription: {
                    required : {
                    }
                },
                invoice_company_name: { required: requiredIfInvoice },
                invoice_street: { required: requiredIfInvoice },
                invoice_number: { required: requiredIfInvoice },
                invoice_postcode1: { required: requiredIfInvoice },
                invoice_postcode2: { required: requiredIfInvoice },
                invoice_city: { required: requiredIfInvoice },
                invoice_nip: { required: requiredIfInvoice }
            },
            messages : {
                email : {
                    required : __("Adres e-mail jest wymagany"),
                    email    : __("Proszę podać prawidłowy adres e-mail"),
                    delayed  : function(reason) {
						if (reason) return __(reason);
						return __("Podany e-mail jest już zarejestrowany.") + ' <a href="#" onclick="frisco.loginPopup()">' + __("Zaloguj się") + ">> </a>";
					}
                },
                password : {
                    required : __("Hasło jest wymagane"),
                    minlength: __("Hasło musi posiadać co najmniej 8 znaków"),
                    regexp   : __("Hasło nie może zawierać spacji")
                },
                repeatPassword : {
                    required : __("Hasło jest wymagane"),
                    minlength: __("Hasło musi posiadać co najmniej 8 znaków"),
                    equalTo : __("Podane hasła nie pasują do siebie")
                },
                postCode_0 : {
                    required  : __("Podanie kodu pocztowego jest wymagane"),
                    minlength : __("Pierwsze pole kodu musi mieć 2 cyfry"),
                    maxlength : __("Pierwsze pole kodu musi mieć 2 cyfry"),
                    digits    : __("W kodzie pocztowym dozwolone są tylko cyfry")
                },
                postCode_1 : {
                    required  : __("Podanie kodu pocztowego jest wymagane"),
                    minlength : __("Drugie pole kodu musi mieć 3 cyfr"),
                    maxlength : __("Drugie pole kodu musi mieć 3 cyfr"),
                    digits    : __("W kodzie pocztowym dozwolone są tylko cyfry")
                },
                name : {
                    required  : __("Podanie imienia jest wymagane")
                },
                surname : {
                    required  : __("Podanie nazwiska jest wymagane")
                },
                sex : {
                    required  : __("Wybranie płci jest wymagane")
                },
                telephoneNumber : {
                    required  : __("Podaj numer kontaktowy"),
                    minlength : __("Numer musi składać się z 9 cyfr dla polskich numerów"),
                    maxlength : __("Numer musi składać się z 9 cyfr dla polskich numerów"),
                    digits    : __("Numer musi składać sie tylko z cyfr")
                },

                street : {
                    required : __("Ulica jest wymagana")
                },
                street_number : {
                    required : __("Numer domu jest wymagany")
                },
                city : {
                    required : __("Miasto jest wymagane")
                },
                terms_subscription: {
                    required : __("Zaakceptuj regulamin")
                },
                invoice_company_name: { required: __("Nazwa firmy jest wymagana") },
                invoice_street: { required: __("Ulica jest wymagana") },
                invoice_number: { required: __("Numer domu jest wymagany") },
                invoice_postcode1: { required: __("Podanie kodu pocztowego jest wymagane") },
                invoice_postcode2: { required: __("Podanie kodu pocztowego jest wymagane") },
                invoice_city: { required: __("Miasto jest wymagane") },
                invoice_nip: { required: __("NIP jest wymagany") }
            },
            groups : {
                postCode : "postCode_0 postCode_1",
                invoice_postcode: "invoice_postcode1 invoice_postcode2"
            },
            errorPlacement: function(error, element) {
                if (element.attr("name") == "street_number")
                    error.insertAfter($("input[name=apartment_number]", $(element).parent()));
                else if (element.attr("name") == "postCode_0" || element.attr("name") == "postCode_1")
                    error.insertAfter($("input[name=postCode_1]", $(element).parent()));
                else
                    error.appendTo(element.closest("li, div"));
            },
            errorElement : "p",
			showErrors: function(errorMap, errorList) {

                if(fast) { // use different style of tooltips in login_or_checkout popup
                    this.defaultShowErrors();
                    $('p.error').each(function() {
                        if($(this).parents('.error-message').size() == 0) {
                            $(this).wrap('<span class="error-message"></span>');
                            $(this).parent(".error-message").prepend('<a href="#"><img src="/img/close-small-white.png" width="8" height="9" alt=""></a>');
                        }
                    });
                    return;
                }

				var errorListSize = errorList.length;
				this.defaultShowErrors();

				if(errorListSize > 0) {
					$('p.error').each(function() {
						if($(this).closest('div.tooltip').size() == 0) {
							$(this).wrap('<div class="tooltip"></div>');
							$(this).parent(".tooltip").prepend('<span class="icon"></span>');
							$(this).parent(".tooltip").append('<span class="arrow"></span>');
							$(this).parent(".tooltip").css('width', $(this).width() + 10 );
						}
					});
				}
			},
            highlight : function(element, errorClass) {
                $(element).addClass(errorClass);
                $(element).parent().addClass(errorClass);
            },
            unhighlight : function(element, errorClass) {
                $(element).removeClass(errorClass);
                $(element).parent().removeClass(errorClass);
				$(element).closest("li, div").children(".tooltip, .error-message").remove();
            },
            submitHandler : function(form) {
                Rum.rumEvent(Rum.EMAIL_DROP_EVENT, form.email.value+"|register-form"+($("#box-login").hasClass("without-password")?"-onetime":""), loggedUserId);
                if(onSubmit) onSubmit();
                _registerUser(callback);
            }
        });
    };

    var _collectRegistrationData = function() {
    	var userData = {};

        var data = $("#registerContent").serializeArray();
        for(var i in data) {
            var isInvoiceData = data[i].name.match(/^invoice(.*)/);
            if(!isInvoiceData) {
               userData[data[i].name] = data[i].value;
            }
        }
        userData['invoiceData'] = _collectInvoiceData();
    	return userData;
    };

    var _collectInvoiceData = function() {
        if($("#invoice-radio input:checked").val() == 'yes') {
            var form = $('#invoice-fields');
            var invoiceData = {}
            invoiceData['company_name'] = form.find('input[name=invoice_company_name]').val();
            invoiceData['invoice_address'] = {};
            invoiceData['invoice_address']['city'] = form.find('input[name=invoice_city]').val();
            invoiceData['invoice_address']['nip'] = form.find('input[name=invoice_nip]').val();
            invoiceData['invoice_address']['street'] = form.find('input[name=invoice_street]').val();
            invoiceData['invoice_address']['number'] = form.find('input[name=invoice_number]').val();
            invoiceData['invoice_address']['apartment_number'] = form.find('input[name=invoice_apartment_number]').val();
            invoiceData['invoice_address']['postcode'] = form.find('input[name=invoice_postcode1]').val() + '-' + form.find('input[name=invoice_postcode2]').val();
            return invoiceData;
        }
    };

    var _collectRegistrationAddressData = function() {
        if ($("input[name=register_full_address]").val() === "true") {
            var addressData = {};
        	addressData["postcode"] = $("#registerContent #register_postCode_0").val() + '-' + $("#registerContent #register_postCode_1").val();
            addressData["address_name"] = '';
            addressData["is_private"] = 1;
            addressData["country_code"] = 48;
            addressData["visible_name"] = 'Główny';
            addressData["street"] = $("#registerContent #street").val();
            addressData["street_no"] = $("#registerContent #street_number").val();
            addressData["flat_no"] = $("#registerContent #apartment_number").val();
            addressData["city"] = $("#registerContent #city").val();
            addressData["nip"] = '';
            addressData["has_lift"] = '';
            addressData["stairway_no"] = '';
            addressData["latitude"] = '';
            addressData["longitude"] = '';
            addressData["description"] = '';
            return addressData;
        }
        return null;
    };

    var _bindPostCodeCompleter = function() {
        bindAddressCompleter('registrationCompleter', $('#registerContent #street'),
                             [$('#registerContent #register_postCode_0'), $('#registerContent #register_postCode_1')],
                             $('#registerContent #city'), $('#registerContent #street_number'));
    };

	var _registerUser  = function(callback) {
		// only one request at once.
		if (! friscoMutex.reserve('__registerUser'))
			return null;

		var userdata = _collectRegistrationData();

		DBG('REGISTRATION', 'Registering user for data', userdata);
		//apiUsers.addUser(userdata, address_data, function(response) {

		if (tradedoubler.isTradedoublerActive()) 
			userdata["source"] = "tradedoubler";
		
		api.createUser(userdata, function(response) {
			friscoMutex.release('__registerUser');
			if (callback) {
				callback(response);
				return;
			}
			if (response.user_id) {
				/* why it is done via window.location ? */
				if (response.registration_source && response.src_ts) {
					core.setState("register", null, { email: userdata.email, info_reg : "ok", "id" : response.user_id, src : response.registration_source, src_ts : response.src_ts });
					core.loadCurrentState(true);
				}
				// window.location = window.location.protocol+"//"+window.location.host+"/info_reg,ok"+"/stn,register/id," + response.user_id + "/src," + response.registration_source+"/src_ts,"+response.src_ts;
				else {
					core.setState("register", null,  { email: userdata.email, info_reg : "ok", "id" : response.user_id });
					core.loadCurrentState(true);
				}
				// window.location = window.location.protocol+"//"+window.location.host+"/info_reg,ok"+"/stn,register/id," + response.user_id;
			} else {
				Popup.loadMessage({ messageId: 501,  size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING });
			}
		}, function(response) {
			friscoMutex.release('__registerUser');
			if(callback) {
				callback(response);
				return;
			}
			Popup.loadMessage({ messageId: 501,  size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING });
		});
		return false;
	};

	var setNearestWindowLabel = function(data) {
		if (data == undefined || !data) {
			DBG('NEAREST_DELIVERY', "No nearest delivery date");
			$('.deliveryTime .nearestDate').parent().hide();
			return;
		}
		var windowObj;
		if (data["eventObj"] == undefined) {
			windowObj = data;
		} else {
			windowObj = data.eventData;
		}

		if (windowObj == undefined || !windowObj) {
			DBG('NEAREST_DELIVERY', "No nearest delivery date");
			$('.deliveryTime .nearestDate').parent().hide();
			return;
		}

		DBG('NEAREST_DELIVERY', "Setting nearest delivery date", windowObj);
		var date = new Date();
// 		var daysDifference = Math.floor((windowObj.start_at - date.getTime() / 1000) / (3600 * 24));
// 		var label = friscoHelpers.getRelativeDaysTerm(daysDifference) +  ', godz. ' + windowObj.windowIndex.replace(/:00/g, '<span>00</span>');
		var label = friscoHelpers.timeWindowToDayPart(windowObj.start_at) +  ', ' + __("godz.") + ' ' + windowObj.windowIndex.replace(/:00/g, '<span>00</span>');
			
		$('.deliveryTime .nearestDate').html(label);
		$('.deliveryTime .nearestDate').parent().show();
// 		$('.deliveryTime span.nearestDate').html(label); // set the same in cart full view
	};

	var calculateWindowParams = function(window) {
		if (!window) { return null; }

		var startDate = new Date(window.start_at * 1000);
		startDate = friscoHelpers.adjustDateToGMT(startDate);

		window.dayIndex  = friscoHelpers.timestamp2day(startDate);

		var endDate = friscoHelpers.adjustDateToGMT(new Date(window.end_at * 1000));

		window.windowIndex = friscoHelpers.numCplTo2(startDate.getHours().toString()) + ":"
		+ friscoHelpers.numCplTo2(startDate.getMinutes().toString()) + " - "
		+ friscoHelpers.numCplTo2(endDate.getHours().toString()) + ":"
		+ friscoHelpers.numCplTo2(endDate.getMinutes().toString());

		return window;
	};

	var nearestWindowGuard = function() {
		var checkImmediateWindow = function(currentNearestWindow) {
			var lastNearestWindow = friscoStorage.getShallow('nearestWindow')
			if (!lastNearestWindow || lastNearestWindow.window_id != currentNearestWindow.window_id) {
				var newNearestWindow = calculateWindowParams(currentNearestWindow);
				friscoStorage.setShallow('nearestWindow', newNearestWindow);
				friscoEvents.fire('nearestWindowGuard', friscoEvents.FEV_NEAREST_DELIVERY_DATE_CHANGED, currentNearestWindow);
			}
		};
		apiReservations.getImmediateAvailable(0, checkImmediateWindow);
	};

	var deliveryPricesGuard = function(eventObj) {
		if (typeof eventObj["eventData"] !== 'undefined') {
			bindDeliveryMinimalPrice();
		}
	};

	var bindDeliveryMinimalPrice = function() {
		var prices = friscoStorage.getShallow('deliveryPrices');
		if (prices && typeof prices == 'object') {
			//var label = friscoHelpers.parsePriceWithNoCents(prices.min);
			var label = prices.min;
			
			$('.deliveryCost .price:not(.protected)').html(label);
			friscoStorage.setShallow('orderDeliveryPrice', parseFloat(prices.min)*100);
			
			var expensive_zone = (frisco.currentPostcode && !frisco.friscoVanAvailable());
			var expensive_zone_price = 150;
			
			var userProfile = friscoStorage.get('userProfile');
			if (userProfile) {
				var priceFree = 0;
				if (expensive_zone)
					priceFree = expensive_zone_price;
				else if (userProfile.trial_id && !userProfile.trial_status)
					priceFree = 100;
				else if (userProfile && userProfile.savingplan_type && userProfile.savingplan_type == 11) 
					priceFree = 150;
				else
					priceFree = 150;
			
				$('.deliveryCost .price_free:not(.protected)').html(priceFree);
// 				$('#priceFreeUpperCart').html(priceFree);
			}
			else {
				var priceFree = expensive_zone ? expensive_zone_price : 100;
				$('.deliveryCost .price_free').html(priceFree);
			}

// 			var cart = friscoStorage.get('cartData');
// 			$('.checkoutCheckbox .totalvalue .price:not(.protected)').html( friscoHelpers.priceFormat ( cart.price_gross + (parseFloat(prices.min)*100)));
			checkoutUpdateTotalValue();
		}
	};
	friscoEvents.hook('deliveryPricesGuard', friscoEvents.FEV_DELIVERY_PRICES_CHANGED, deliveryPricesGuard.bind(this));
	
	var bindRefreshingRoutines = function() {
		var onFocus = function() {
			DBG('REFRESHING_ROUTINES', 'Site got focus again');
			
// 			friscoEvents.hook('focus', friscoEvents.FEV_CART_DATA_ARRIVED, cartRefresher, {type: friscoEvents.FEV_TYPE_ONETIME});
			
			if (core.uptimeGuard()) {
			// light session reload below
			// get session status -- bump, should drop on 401 with authorized user session?
				statusRequest();
				
// 				var oldCart = friscoStorage.getShallow('cartData');
				var params = {}; 
				params[friscoStorage.PARAM_EVENT_SENDER] = 'refreshingGuard';
				params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_ASYNC;
				// fire nothing as cbk, FEV_CART_DATA_CHANGED will do it better :)
// 				params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = function(newCart) {
// 					if (oldCart.version != newCart.version)
// 						renderCartContent();
// 				};
				
				friscoStorage.getFresh('cartData', params);
				
				if (loggedUserId) {
					nearestWindowGuard();
					//friscoStorage.getFresh('daysList', params);
					// bind here refreshing days
//					friscoStorage.getFresh('windowsList', params);
				}
			} else {
			// try one more time in X minutes ?
			}
		};
		
		var onBlur = function() {
		};
		
		$(window).bind("focus", onFocus);
// 		$(window).bind("blur", onBlur);
		
		// cart refreshing
		var cartRefresher = function(event) {
			var cartData = null, oldCartData = null;
			if (event.eventData) {
				cartData = event.eventData.entryCart ? event.eventData.entryCart : event.eventData;
				oldCartData = event.eventData.oldCart ? event.eventData.oldCart : null;
			}
			
			var state = core.getCurrentState();
			if (state == 'cart') { 
				renderCartContent(cartData); 
// 				updateCartContent(cartData);
			} else if (/*state == 'searchResults' || */ state == 'defaultState' || state == undefined) {
				renderCartContent(cartData);
			} else if (state == 'showList') {
				$('ul.head > li.subtotal > span.price').html( friscoHelpers.parsePrice(cartData.human_price_gross) ); // refresh the price in header [shopping lists]
				renderCartContent();
			} else {
				// basically, this should be handled elsewhere, but for now just always update cart ttl in sidebar
				$('.subtotal p.price').html(friscoHelpers.parsePrice(cartData.human_price_gross));
			}
			
			if (Sidebar.isVisible() && Sidebar.getRenderedContentIdIn1stSlot() == 'cart') {
				renderSliderCartContent({ data : cartData});
			}
		};
		
		var refreshingTimeout = null;
		var cartInvalidator = function() {
			var refresherFunction = function() {
				var params = {};
				params[friscoStorage.PARAM_EVENT_SENDER] = 'refreshingGuard';
				params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_ASYNC;
				friscoStorage.getFresh('cartData', params);
			};
			
			if (refreshingTimeout) {
				clearTimeout(refreshingTimeout);
				refreshingTimeout = null;
			}
			
			refreshingTimeout = setTimeout(refresherFunction, CLICKING_DELAY);
		};
		
		var cartUpdater = function(event) {
			updateCartContent(event.eventData);
		};
		
		friscoEvents.hook('cart', friscoEvents.FEV_CART_PRODUCT_AMOUNT_CHANGED, cartUpdater /* productReferesher */);
		friscoEvents.hook('cart', friscoEvents.FEV_CART_PRODUCT_DELETED, cartUpdater /*productDeleter*/);
		friscoEvents.hook('cart', friscoEvents.FEV_CART_PRODUCT_ADDED, cartUpdater /*productAdder*/);
		friscoEvents.hook('cart', friscoEvents.FEV_CART_DATA_CHANGED, cartUpdater/*refresher*/);
		friscoEvents.hook('cart', friscoEvents.FEV_CART_INVALIDATED, cartInvalidator);
		
		
		// windows refreshing
		var windowRefresher = function(event) {
			if(event.eventObj.sender != 'refreshingGuard') {
				DBG('REFRESHING_ROUTINES', 'Event data not from refreshing requests, aborting');
				return;
			}

			if (Sidebar.isVisible() && (
				Sidebar.getRenderedContentIdIn1stSlot() == 'calendar' ||
				Sidebar.getRenderedContentIdIn2ndSlot() == 'calendar'
			)) {
				//renderDatePicker(true);
				// Popup.loadMessage({ messageId: Popup.MESSAGES.WINDOW_LIST_UPDATED,  size: Popup.SIZE.FLASH, type: Popup.TYPE.MESSAGE, timeout: Popup.TIMEOUT.NORMAL });
			}
		};

    	friscoEvents.hook('refreshingGuard', friscoEvents.FEV_WINDOWS_DATA_CHANGED, windowRefresher);
    };

	var bindLangSwitchers = function() {
		// bind active
		$('.userPanel a.langSwitcher').removeClass('active');
		$.each($('.userPanel a.langSwitcher'), function(index, object) {
			var switcherLangAttribute = $(object).attr("lang");
			if(core.getCurrentLang() == switcherLangAttribute) {
				$(object).addClass('active');
			}
		});

		// bind behaviour
		$('.userPanel a.langSwitcher').click(function(eventObj) {
			$(this).addClass("active"); $(this).siblings().removeClass("active");
				var switcherLangAttribute = $(eventObj.currentTarget).attr("lang");
			if(core.getCurrentLang() == switcherLangAttribute) {
				return false;
			}
			
			// save current preferred lang in quelo profile
			if (loggedUserId) {
				pub.showStateLoadingPanel();
				apiUsers.setUserLang(loggedUserId, switcherLangAttribute, function(data) {
						pub.hideStateLoadingPanel();
					if (data.success) {
						core.setLang(switcherLangAttribute);
					} else {
						Popup.loadMessage({ messageId: Popup.MESSAGES.CHANGE_LANG_ERROR,  size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR, timeout: Popup.TIMEOUT.NORMAL });
					}
				});
				
			} else {
				core.setLang(switcherLangAttribute);
			}
		});
	};

	var bindUserCard = function(userData) {
		if (undefined === userData) {
			var params = {}; params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = bindUserCard;
			friscoStorage.get('userData', params);
			return;
		}

		if (userData) {
			if (userData.name && userData.surname) {
				$('.userCard .userTag').html(userData.name + ' ' + userData.surname);
			} else {
				$('.userCard .userTag').html(userData.email);
			}
			$('.userCard .emailTag').html(userData.email);
		}
	};

	var bindAuthorizationGuard = function() {
		var guardCallback = function() {
			// got unauthorized action with active user session client-side, go for force reload
			if (loggedUserId) {
// 				Popup.loadMessage({ messageId: Popup.MESSAGES.WINDOW_LIST_UPDATED,  size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING, timeout: Popup.TIMEOUT.SHORT });
				window.location = '/info_loggedOut,1';
			}
		};
		friscoEvents.hook('frisco', friscoEvents.FEV_UNAUTHORIZED_ACTION_MADE, guardCallback.bind(this));
	};

	var loadPasswordReset = function(prevState, subState, parameters) {
		if (parameters.activate) {
			apiUsers.resetPassword(parameters.activate, function(data) {
				if (data) {
// 					Popup.loadMessage({ messageId: Popup.MESSAGES.PASSWORD_RESET_MAIL_SENT,  size: Popup.SIZE.FLASH, type: Popup.TYPE.MESSAGE, timeout: Popup.TIMEOUT.NORMAL });
					/* Landing page here */
					$('#page_content').jqotesub(templates.after_password_reset_landing, {});
				} else {
					//temporary disabled, it shows after user was logged in with new restted pasword
// 					Popup.loadMessage({ messageId: Popup.MESSAGES.PASSWORD_RESET_ERROR,  size: Popup.SIZE.FLASH, type: Popup.TYPE.ERROR, timeout: Popup.TIMEOUT.NORMAL });
					setTimeout(function() { window.location = '/'; }, 1000);
				}
			});
			
		}
	};

    var statusRequest = function() {
        var statusCbk = function(data) {
            if(!data) {
                clearInterval(STATUS_TIMER_HANDLER);
                STATUS_TIMER_HANDLER = null;
                STATUS_REQUEST_FLAG = null;
                return;
            }
            STATUS_REQUEST_FLAG = 1;
        }
        friscoClient.getStatus(statusCbk.bind(this));
    };

    var bindStatusRequest = function() {
        if(STATUS_TIMER_HANDLER) {
            clearInterval(STATUS_TIMER_HANDLER);
            STATUS_TIMER_HANDLER = null;
        }
        STATUS_TIMER_HANDLER = setInterval(statusRequest.bind(this), STATUS_TIMER_CYCLE);
    };

    var statusRequestGuard = function() {
        if(!STATUS_TIMER_HANDLER || !STATUS_REQUEST_FLAG) {
            console.log('statusRequestGuard', 'ERROR: No status request routine found');
            bindStatusRequest();
        } else {
            console.log('statusRequestGuard', 'Status request present');
        }
    };

    var bindStatusRequestGuard = function() {
        setInterval(statusRequestGuard.bind(this), STATUS_TIMER_GUARD_CYCLE);
    };

    var bindOnlineCheck = function() {
        if(ONLINE_CHECK_TIMER_HANDLER) {
            clearInterval(ONLINE_CHECK_TIMER_HANDLER);
            ONLINE_CHECK_TIMER_HANDLER = null;
        }
        ONLINE_CHECK_TIMER_HANDLER = setInterval(core.onlineCheck.bind(this), ONLINE_CHECK_TIMER_CYCLE);
    };

	var leaveOrderEditionMode = function(params) {
		DBG('ORDER_EDITION', 'Leaving of edition mode requested');
		
		var cbk = function(cartData) {
			Loader.hide();
			if (cartData.order_id > 0) {
				Popup.loadMessage({ messageId: Popup.MESSAGES.LEAVE_ORDER_EDITION_ERROR, timeout: Popup.TIMEOUT.NORMAL });
			} else {
				var container = $("#browsingMode");
				container.html('');
				friscoStorage.set('cartData', cartData);
				if (params && params.noRedirect == false) {
					core.setState('settings', 'history', {});
					Popup.loadMessage({ messageId: Popup.MESSAGES.ORDER_EDITION_CANCELLED, timeout: Popup.TIMEOUT.NORMAL });
				}
				$("#sidebar .cart").removeClass("editOrder");

				// remove any active reservation that could prolong
				var deliveryDate  = friscoStorage.getShallow('deliveryDate');
				if (deliveryDate && deliveryDate.reservation_id)  {
					var result = apiReservations.deleteReservation(session.user_id, deliveryDate.reservation_id, function(data) {});
					friscoStorage.set('deliveryDate', null);
				}
				
				$("#deliveryTime").show();
			}
		};
		
		if (params && params.silent == true) {
			api.getOrderCart(loggedUserId, 0, 0, cbk);
		} else {
			Loader.load(Loader.TYPE.COVER, "div#page_content", "odrzucam zmiany, zaczekaj chwilę...");
			api.getOrderCart(loggedUserId, 0, 0, cbk);
		}
	};
	
	var orderEditionCheck = function() {
		var container = $("#browsingMode");
		var cartData = friscoStorage.getShallow("cartData");
		if (!cartData || !cartData.order_id) {
			DBG('ORDER_EDITION', 'Not editing an order');
			return;
		}
		
		var order = friscoStorage.getShallow('workingOrder');
		if (undefined === order) {
			order = api.getOrder(loggedUserId, cartData.order_id, cartData.order_year, null, true, ['items', 'products']);
			friscoStorage.setShallow('workingOrder', order);
		}
		if (!order) {
			DBG('ORDER_EDITION', 'Not editing an order');
			return;
		}
		
		DBG('ORDER_EDITION', 'Present');
		if (container.find('.leaveMode').length) {
			// already registered UI
			DBG('ORDER_EDITION', 'UI registered, leaving');
			return;
		}
		
		$("#header .deliveryTime").hide();
		if (friscoHelpers.isOrderEditable(order)) {
			$("#sidebar .cart").addClass("editOrder");
// 			$("#homeTermOfReservation").hide(); // .attr({'style' : null});
			$("a[id*=homeEditOrder_]").hide();
			$("body").addClass("editOrder");
		} else {
			$("#sidebar .cart").addClass("viewOrder");
// 			$("#homeTermOfReservation").show(); 
			$("a[id*=homeEditOrder_]").show();
			$("body").removeClass("editOrder");
		}
		
		DBG('ORDER_EDITION', 'Registering UI');
		var element = document.createElement('a');
		
		element.className = 'cancel leaveMode';
		if (friscoHelpers.isOrderEditable(order)) {
			element.innerHTML = __("Odrzuć");
		} else {
			element.innerHTML = __("Opuść");
		}
		element.href = "#";
		
		$(element).click(function() { leaveOrderEditionMode(); });
		container.append(element);
	};

	var bindOrderEditionModeGuard = function() {
		friscoEvents.hook('bindOrderEditionModeGuard', friscoEvents.FEV_CART_DATA_CHANGED, orderEditionCheck);
	};
	
	var behaveDueToCart = function(cartData, updateData, addressCount) {
		var orderPlaceButtons = null;
		if (core.getCurrentState() == 'checkout')
			orderPlaceButtons = '.buttons a.checkout';
		else 
			orderPlaceButtons = '.buttons a.save';
		
		var lockOrderPlacement = function(lockParams) {
// 			$('div.minimumOrder').show();
// 			$('div.minimumOrder').html( "<a href=\"#\">" +  __("Dostawa niekompletna") + "</a>" );
			$(orderPlaceButtons)
			.addClass("disabled")
			.unbind()
			.click(function() {
				if (userProfile.savingplan_type == 14) {
					if (lockParams && lockParams.noPouTs)
						Popup.loadMessage({ messageId: Popup.MESSAGES.CHECKOUT_NO_RSV, timeout: Popup.TIMEOUT.NORMAL });
				}
				
				if (lockParams && lockParams.unallowedProducts) {
					$("div.unallowedProducts")
					.addClass("flash")
					.one("webkitAnimationEnd animationend MSAnimationEnd", function(e) { 
						$(this).removeClass("flash");
					});
				}
				
				if (_gaq && _gaq.push) 
					_gaq.push(['_trackEvent','Checkout','Dostawa-niekompletna-zobacz']);
				
				return false;
			});
			
			_checkoutHideShowReservation();
			
// 			$('.checkboxContent .buttons .checkout').hide();
// 			$('.checkboxContent .buttons .returnToShop').show();
		};
		
		var unlockOrderPlacement = function() {
// 			$('div.minimumOrder').hide();
			if (core.getCurrentState() == 'checkout')
				$(orderPlaceButtons)
				.removeClass("disabled")
				.unbind()
				.bind('click', storeCheckout); // expects event as a param
			else  // order edit
				$(orderPlaceButtons)
				.removeClass("disabled")
				.unbind()
				.bind('click', saveCheckout); // expects event as a param
			
			$('.checkboxContent .unallowedProducts').hide();
// 			$('.checkboxContent .buttons .checkout').show();
// 			$('.checkboxContent .buttons .returnToShop').hide();
		};
		
		var userProfile = friscoStorage.getShallow('userProfile');
		if (userProfile.savingplan_type == 14) {
			var pouIsSet = friscoStorage.getShallow('pouId');
 			if (pouIsSet) {
				$('.checkboxContent .unallowedProducts').hide();
				if (friscoStorage.getShallow('pouTs') != undefined)
					unlockOrderPlacement();
				else {
					lockOrderPlacement({noPouTs : true});
				}
				return;
			}
		}
		var method = getDeliveryMethodForCart();
		var deliveryAddresses = friscoStorage.getShallow('deliveryAddresses');
		
		// Checkout popup
		if (method && method.delivery_method && method.delivery_method.delivery_method_id > 1
				&& core.getCurrentState() == "checkout") {
			if ($("#colorbox").hasClass("checkoutPopupWrapper"))
				return;
			
			cms.checkout_popup(function(popup){
				if (!popup)
					return;
				var dumbContainer = document.createElement('div');
				$(dumbContainer).jqotesub(frisco.getTemplate('checkout_info'), popup);

				$.colorbox({
					html : $(dumbContainer), 
					onOpen: function(){
						$("#cboxOverlay").addClass("tdLandingPage");
						$("#colorbox").addClass("tdLandingPage checkoutPopupWrapper");
						$("html").addClass("scrollable");
					},
					overlayClose: false,
					opacity: 1, 
					onClosed: function() {
						$("#cboxOverlayFirstLayer").remove();
						$("#cboxOverlay").removeClass("tdLandingPage");
						$("#colorbox").removeClass("tdLandingPage checkoutPopupWrapper");
					}
				});
				$("#colorbox .checkoutPopup p.button input").click(function(){
					$.colorbox.close();
				});
			});
		}
		
		if (method && method.delivery_method) {
			var trans = friscoHelpers.translateDeliveryMethod(method.delivery_method);
			$('.checkboxContent .deliveryMethod > p.field').html(trans);
		} else {
			$('.checkboxContent .deliveryMethod > p.field').html(__("Brak informacji"));
		}
		
		// Display cart Content
		var table = $('.checkboxContent #orderContent tbody').empty();
		if (table.length) {
			_.each(cartData.entries, function(entry) {
				table.append('<tr pid="'+ entry.product.product_id +'"><td><img src=\"' + helpers.img_url(entry.product.image_id, 42, 42) + '\" /><p>'+ entry.product.full_name + ' <em>' + entry.product.human_grammage_gross + '</em></p></td><td>'+ entry.product.human_price_gross + '</td><td>'+ entry.amount +'</td><td>'+ entry.product.vat_rate +'%</td><td>'+ entry.human_price_gross +'</td></tr>');
			});
			var curDeliveryCost  = parseInt( friscoStorage.getShallow('orderDeliveryPrice') ) || 0;
			var realPaymentValue = curDeliveryCost + cartData.price_gross;
			table.append('<tr><td colspan="4">Suma ogółem</td><td class="summaryCart">'+ cartData.human_price_gross +'</td></tr>');
			table.append('<tr><td colspan="4">Koszt dostawy</td><td class="summaryDelivery">'+ friscoHelpers.priceFormat(curDeliveryCost) +'</td></tr>');
			table.append('<tr><td colspan="4">Do zapłaty</td><td><strong class="summaryTotal">'+ friscoHelpers.priceFormat(realPaymentValue) +'</strong></td></tr>');
		}
		
// 		if (addressCount != undefined && addressCount === 0)
// 			lockOrderPlacement({ noAddresses : true });
		
		console.log('[DBG][behaveDueToCart] method.unallowed_products: ', method && method.unallowed_products);
		if (method && method.unallowed_products && method.unallowed_products.length > 0) {
			// block delivery choosing
			if ($.inArray('delivery_date', method.unallowed_reasons) > -1) {
				$('.checkboxContent .unallowedProducts h4').html(__("W wybranym terminie dostawy wymienione produkty są niedostępne ze wzlędów logistycznych"));
			} else {
				$('.checkboxContent .unallowedProducts h4').html(__("Ponieważ zamówienie będzie zrealizowane firmą kurierską nie możemy wysłać poniższych produktów:"));
			}
			
// 			if (deliveryAddresses && deliveryAddresses.length > 0)
			$('.checkboxContent .unallowedProducts').show();
			lockOrderPlacement({unallowedProducts : true});
			
			if (cartData == null && updateData) {
				// add a product to undeliverables if needed
				for (var i in method.unallowed_products) {
					if (method.unallowed_products[i].product_id == updateData.productId) {
						if ( $('.checkboxContent .unallowedProducts ul li[pid='+updateData.productId+']').length == 0 ) {
							var elem = '<li pid="'+ method.unallowed_products[i].product_id +'" style="display:none;"><div class="removeProduct"></div><p><img src=\"' + helpers.img_url(method.unallowed_products[i].image_id, 42, 42) + '\" />'+ method.unallowed_products[i].full_name + ' <em>' + method.unallowed_products[i].human_grammage_gross + '</em></p></li>';
							$(elem).appendTo('.checkboxContent .unallowedProducts ul').slideDown();
						}
					}
				}
				return;
			}
		
			$('.checkboxContent .unallowedProducts ul').html('');	
			for (var i in method.unallowed_products) {
				$('.checkboxContent .unallowedProducts ul').append('<li pid="'+ method.unallowed_products[i].product_id +'"><div class="removeProduct"></div><p><img src=\"' + helpers.img_url(method.unallowed_products[i].image_id, 42, 42) + '\" />'+ method.unallowed_products[i].full_name + ' <em>' + method.unallowed_products[i].human_grammage_gross + '</em></p></li>');
			}
			
			// remove single unallowed product from cart
			$("div.unallowedProducts").on("click", "div.removeProduct", function(e) {
				var elem = $(this).closest("li");
				var productId = elem.attr('pid');
				
				friscoTimer.stop('cartAddTimer_' + productId);
				friscoTimer.stop('cartRemoveTimer_' + productId);
				
				api.removeProductFromCart(productId, function(entryAmount, entryCart) {
					friscoStorage.set('cartData', entryCart);
					friscoSession.set('cart_version', entryCart.version);
// 					friscoEvents.fire('cart', friscoEvents.FEV_CART_PRODUCT_DELETED, { productElem: null, productId: productId, entryCart: entryCart });
					
					if (_gaq && _gaq.push) {
						_gaq.push(['_trackEvent','Checkout','Koszyk','Usun']);
					}
					
					elem.slideUp({
						complete: function() {
							var count = elem.siblings().length;
							elem.remove();
							if (count == 0)
								unlockOrderPlacement();
						}
					});
					table.find("tr[pid="+productId+"]").remove();
				});
			});
			
			// remove all unallowed products from cart at once
			$("div.unallowedProducts").on("click", "div.removeAll", function(e) {
				var productsList = {};
				$.each(method.unallowed_products, function(index, productItem) {
					productsList[productItem.product_id] = 0;
				});
				
				api.updateProductsInCart(productsList, null, function(entryCart) {
					friscoStorage.set('cartData', entryCart);
					friscoSession.set('cart_version', entryCart.version);
// 					friscoEvents.fire('cart', friscoEvents.FEV_CART_INVALIDATED, {});
					
					if (_gaq && _gaq.push) {
						_gaq.push(['_trackEvent','Checkout','Koszyk','Usun']);
					}
					
					unlockOrderPlacement();
					_.each(productsList, function(v, k) {
						table.find("tr[pid="+k+"]").remove();
					});
				});
			});
			
			return;
		} else {
			unlockOrderPlacement();
		}
		
		var state = core.getCurrentState();
		if (state == "checkout" || state == "order") {
			if (state == "order" && cartData && cartData.order_id == null) // we're called from leaveOrderEditionMode
				return;
			
			// check for minimal order price and show information if it is not fullfilled
			var curMinimalOrderValue = friscoStorage.get("minimalOrderValue");
			var curDeliveryType = friscoStorage.get("deliveryMethod");
			if (cartData && cartData.price_gross < curMinimalOrderValue && curDeliveryType.delivery_method.delivery_method_id == 1) {
				Popup.load({ content: __('Minimalna wartość zamówienia to')+' '+(friscoHelpers.priceFormat(curMinimalOrderValue))+' '+__('zł, dodaj więcej produktów do koszyka by móc złożyć zamówienie'), size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING, timeout: Popup.TIMEOUT.NORMAL });
				$('div.minimumOrder').show();
				$('div.minimumOrder').html(  __("Minimalne zamówienie od 50 zł") );
				$(orderPlaceButtons).hide();
				$('.checkboxContent .buttons .returnToShop').show();
			} else {
				$('div.minimumOrder').hide();
				$(orderPlaceButtons).show();
				$('.checkboxContent .buttons .returnToShop').hide();
			}
		}
	};

	var bindCartPriceGuard = function() {
// 		friscoEvents.hook('bindOrderEditionModeGuard', friscoEvents.FEV_CART_DATA_CHANGED, function(eventObj) {
// 			behaveDueToCart(eventObj.eventData); 
// 		}, {type: friscoEvents.FEV_TYPE_VOLATILE});
	};

	var userCardDeliveryDateChanger = function(delivery_date) {
		console.log('userCardDeliveryDateChanger', delivery_date);
		
		var state = core.getCurrentState();
		if (state != "cart" && state != "searchResults" && state != "product" && !isClaimBonusLP(state)) {
			$("div#header div.deliveryTime").hide();
			console.log('userCardDeliveryDateChanger: not cart/search/product/LP, exiting');
			return;
		} else {
		
		var deliveryTypes = friscoStorage.getShallow('deliveryMethod');
// 		var profile = friscoStorage.getShallow("userProfile");
// 		api.getDeliveryMethodForUserAddressedCart(loggedUserId, profile.delivery_address_no, null, function(deliveryTypes) {
			if (!deliveryTypes || deliveryTypes.delivery_method.delivery_method_id == FRISCO.DELIVERY_TYPE_COURIER) {
				$("div#header div.deliveryTime").hide();
				console.log('userCardDeliveryDateChanger: delivery by courier, exiting');
				return;
			}
// 		});
		}
		
		if (delivery_date && typeof delivery_date == 'object') {
			var reservedTime = friscoHelpers.formatTimeWindow(delivery_date.window_id);
			$("#reservedDeliveryTime .reservedTime").html(reservedTime);
			$("#deliveryTime").hide();
			$("#reservedDeliveryTime").show();
			$("#header #sidebar .hintHolder").hide();
			
			if (delivery_date.valid_until) {
				$("#reservedDeliveryTime .validUntil").html(__("rezerwacja ważna do") + " " + friscoHelpers.timestamp2shortDate(delivery_date.valid_until));
			}
		} else {
			$("#deliveryTime").show();
			$("#reservedDeliveryTime").hide();
			$("#header #sidebar .hintHolder").show();
			$("#reservedDeliveryTime .validUntil").html("");
		}
	};

    var bindUserCardDeliveryDateGuard = function() {
        friscoEvents.hook('bindUserCardDeliveryDateGuard', friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, function(eventObj) { userCardDeliveryDateChanger(eventObj.eventData); });
		friscoEvents.hook('bindUserCardDeliveryDateGuard', friscoEvents.FEV_STATE_CHANGED, function() {
			var currentDeliveryDate = friscoStorage.getShallow('deliveryDate');
			userCardDeliveryDateChanger(currentDeliveryDate);
		});
    };

    var loadError404 = function() {
		var cbk = function() { window.location.href = "/errors/404"; }
		if (_gaq && _gaq.push) {
			_gaq.push(['_set', 'page', '/404.html?page=' + document.location.pathname + document.location.search + '&from=' + document.referrer]);
			_gaq.push(['_trackPageview']);
			_gaq.push(cbk);
		}
		else
			cbk();
		//$('#page_content').jqotesub(frisco.getTemplate('error404'));
    };
    var featuredProducts = function() {
        $('#page_content').jqotesub(frisco.getTemplate('catalog_shelf'), {disablesort: true});

        if(CONFIG.FEATURED_PRODUCTS.length) { 
            api.getProducts(CONFIG.FEATURED_PRODUCTS, function(products) {
                $('ul#products').html("");
                frisco.renderProducts($('ul#products'), products, true);
            }, loggedUserId);
        } else {
            $('ul#products').parent().hide();
        };
    };
	
	var oldPromopaperLandingPage = function(prevState, subState, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('catalog_shelf'), {disablesort: true, show_line_below_image: true});
		$("#contentHeader > div > div.title > h3").html( __("Produkty z gazetki"));
		var cbk = function(data) {
			if (data)
				SlotManager.clearSlots();
			if (data.promopaper) {
				CONFIG.PROMOPAPER_PRODUCTS = data.promopaper;
			}
			if (CONFIG.PROMOPAPER_PRODUCTS.length) {
				SlotManager.registerSlot("ul#products", CONFIG.PROMOPAPER_PRODUCTS);
			}
			SlotManager.enableLoadSlots();
		};
		var p = {}; p[friscoStorage.PARAM_FOLLOWER_CALLBACK] = cbk;
		friscoStorage.get("promoproducts", p);
	};
    
	var promopaperLandingPage = function(prevState, subState, parameters) {
		parameters.prefilter = "promosection=promopaper";
		parameters.title = "Produkty <span>z gazetki</span>";
		parameters.cls = "promopaper";
		parameters.brandMinProds = 2;
		parameters.moreSorting = true;
		Loader.load(Loader.TYPE.COVER, "#page_content", "Zaczekaj chwilę...");
		cms.promopaper(function(data){
			parameters.headerImg = data.header && data.header.img;
			parameters.special = data;
			loadGenericFilterablePromotionPage(prevState, subState, parameters);
		});
	};
	
	var loadPromotionsPage = function(prevState, subState, parameters) {
		parameters.prefilter = "has_promotion=1";
		parameters.title = "Produkty <span>promocyjne</span>";
		parameters.cls = "promotions";
		parameters.brandMinProds = 4;
		parameters.initialSort = "brand_name";
		loadGenericFilterablePromotionPage(prevState, subState, parameters);
	};
	
	var loadNewestPage = function(prevState, subState, parameters) {
		parameters.prefilter = "is_new=1";
		parameters.title = "<span>Nowości</span>";
		parameters.cls = "newest";
		parameters.brandMinProds = 2;
		parameters.initialSort = "brand_name";
		loadGenericFilterablePromotionPage(prevState, subState, parameters);
	};
	
	var loadGenericFilterablePromotionPage = function(prevState, subState, parameters) {
		var tId = $.cookie('fablo-tid');
		$('#page_content').empty();
		Loader.load(Loader.TYPE.COVER, "#page_content", "Zaczekaj chwilę...");
		
		var premiumProductIDs = _.map((location.search.match(/(?:^|&|\?)id=([0-9,]+)/) || [null,''])[1].split(','), function(x) { return parseInt(x); });
		var doublebokProductIDs = _.map((location.search.match(/(?:^|&|\?)pid=([0-9,]+)/) || [null,''])[1].split(','), function(x) { return parseInt(x); });
		if (premiumProductIDs || doublebokProductIDs) {
			// Can override settings from cms in case of promopaper
			parameters.special = {premium: premiumProductIDs, firstProduct: premiumProductIDs[0] || doublebokProductIDs[0], doubleboks: doublebokProductIDs};
			parameters.scroll = true;
		}
		
		var filterBrands = function(map, rawData, enforceLimit) {
			return _.map(_.filter(rawData, function(x){ return (!enforceLimit || x[1] >= parameters.brandMinProds) && !!map[x[0]];}), function(x){ return x[0]});
		};
		
		var interval, stepProduct=0, objList, pos;
		
		var startAnimation = function() {
			if (!objList) return;
			interval = setInterval(function(){
				if (stepProduct<0) stepProduct++;
				else if (stepProduct>0) stepProduct--;
				pos -= stepProduct;
				var halfWidth = objList.width()/2; // this shouldn't be computed before setInterval, because some images might not be loaded yet
				if (pos > 0) { pos -= halfWidth; }
				else if (pos < -halfWidth) { pos += halfWidth; }
				else if (stepProduct==0) {
					try { clearInterval(interval); } catch (e) { }
				}
				objList.css({marginLeft: pos+'px'});
			}, 30);
		};
		
		var renderBrands = function(map, brands){
			var _render = function(bs) {
				var out = '';
				_.each(bs, function(b){
					out += '<li><a href="#" data-slug="' + b + '"><img src="' + map[b] + '" alt="' + b + '"></a></li>';
				});
				return out;
			}
			
			var container = $("#brand-filter > .logos").empty();
			var perRow = Math.floor(container.width() / 90);
			
			if (brands.length <= 3*perRow) {
				container.append(_render(brands));
				$("#rotator-partners").hide();
			} else {
				var out1 = _render(brands.slice(0, 2*perRow));
				var out2 = _render(brands.slice(2*perRow));
				container.append(out1);
				objList = $("#rotator-partners .list-box .logos").empty().append(out2 + out2);
				$("#rotator-partners").show();
				pos = objList.css('marginLeft') || 0;
				pos = Number(pos.replace('px', ''));
			}
		};
		
		apiFablo.getPromoProducts(parameters.prefilter, loggedUserId, tId, 0, 0, null, null, null, function(results) {
			var categories = _.map(_.filter(results.categories, function(x){ return x[0].indexOf(">>") == -1;}), function(x){ return x[0]});
			
			cms.brands(function(allBrands){
				brandsMap = {}
				_.each(allBrands, function(x){ brandsMap[x.container] = x.image; });
				Loader.hide();
				$('#page_content').jqoteapp(frisco.getTemplate('promotions'), {title: parameters.title, cls: parameters.cls, categories: categories, headerImg: parameters.headerImg, moreSorting: parameters.moreSorting});
				
				var cat = categories[0], brand = null, sort = parameters.initialSort, tcat;
				if (parameters.cat && (tcat = _.find(categories, function(c) { return helpers.clearCategory(c) == parameters.cat; })))
					cat = tcat;
				$("#promoProducts #category-filter li").eq(_.indexOf(categories, cat)).addClass("active");
				var scrolled = false;
				var cbk = function() {
					var getter = function(page, limit, renderer) {
						apiFablo.getPromoProducts(parameters.prefilter, loggedUserId, tId, (page-1)*limit, limit, cat, brand && "brand_name=" + brand, sort, function(data) {
							if (cat && page == 1) {
								var brands = filterBrands(brandsMap, data.attributes.brand_name.values, cat == categories[0]);
								renderBrands(brandsMap, brands);
								if (parameters.scroll && !scrolled) {
									$(window).scrollTop($("#productsPromoted").offset().top - 50);
									scrolled = true;
								}
							}
							var products = _.map(data.results, FabloConfig.productTranslator);
							var render = function() {
								renderer(products);
								if (parameters.special) {
									var ids = _.pluck(products, 'product_id');
									_.each(_.intersection(ids, parameters.special.premium), function(id){
										var photo = $("#productsPromoted .productId[product_id="+id+"]").addClass('special-product').find(".image img");
										photo.attr('src', photo.attr('src').replace(/,140\//g, ',300/'));
										if(parameters.special.firstProduct == id) {
											$("#productsPromoted .productId[product_id="+id+"]").css('float', 'left');
										}
									});
									_.each(_.intersection(ids, parameters.special.doubleboks), function(id){
										$("#productsPromoted .productId[product_id="+id+"]").addClass('big-product');
									});
									updateBoxWidth();
								}
							};
							if(parameters.special && parameters.special.firstProduct) {
								products = _.reject(products, function(p) { return p.product_id == parameters.special.firstProduct; });
							}
							if(parameters.special && parameters.special.firstProduct && page == 1) {
								api.getProduct(parameters.special.firstProduct, function(p) {
									products.unshift(p);
									render();
								});
							} else {
								render();
							}
						});
					};
					
					$("#productsPromoted").empty();
					SlotManager.clearSlots();
					SlotManager.registerSlot("#productsPromoted", null, 0, {asyncGetter: getter});
					SlotManager.enableLoadSlots();
				};
				cbk();
				
				$("#promoProducts #category-filter a").click(function(e){
					e.preventDefault();
					$("#promoProducts .active").removeClass("active");
					$(this).parent().addClass("active");
					cat = $(this).data("slug"); brand = null;
					cbk();
				});
				$("#promoProducts #brand-filter").on("click", ".logos a", function(e){
					e.preventDefault();
					$("#promoProducts .active").removeClass("active");
					$(this).parent().addClass("active");
					brand = $(this).data("slug"); cat = null;
					cbk();
				});
				$("#promoProducts #inputSort").change(function(){
					$(this).prev(".select-label").text($(this).find("option:selected").text());
					sort = $(this).val();
					cbk();
				});
				$('.partners-slider ul.nav-arrows li.next a').click(function(ev){
					stepProduct = 40;
					startAnimation();
					ev.preventDefault();
				});
				$('.partners-slider ul.nav-arrows li.prev a').click(function(ev){
					stepProduct = -40;
					startAnimation();
					ev.preventDefault();
				});
				
				if (parameters.special) {
					var updateBoxWidth = function() {
						var single = $("#productsPromoted .productId:not(.big-product):not(.special-product)").eq(0);
						if (!single) return;
						var margin = single.outerWidth(true) - single.width();
						var single = single.outerWidth(true);
						var total = $("#productsPromoted").width();
						var count = Math.floor(total / single);
						var offset = Math.floor((total - count * single) / (count - 1));
						$("#productsPromoted .productId.big-product").css({width: 2*single - margin + offset});
						$("#productsPromoted .productId.special-product").css({width: 2*single - margin + offset, marginLeft: offset});
					}
					
					$(window).bind("resize.promopaper", _.throttle(updateBoxWidth, 200));
				}
				
				friscoEvents.hook('partners-slider', friscoEvents.FEV_ON_STATE_ENTER, function(){
					clearInterval(interval);
					$(window).unbind("resize.promopaper");
				}, {type: friscoEvents.FEV_TYPE_ONETIME});
			});
		});
	};
	
	var orderCancelInfo = function() {
		$('#page_content').jqotesub(frisco.getTemplate('order_cancel_info'), {});
	};
	
	var loadTestimonials = function(prevState, prevSubstate, parameters) {
		$('#page_content').jqotesub(frisco.getTemplate('testimonials'));
        document.title = "Opinie klientów o Frisco.pl";
        if ($(window).scrollTop() > 180)
            $(window).scrollTop(180);
// 		$(document).ready(function () {
// 			$(document).scroll(function(){ updatePos(); })
// 			updatePos();
// 			$(window).resize(function(){ updateHeight(); })
// 			updateHeight()
// 		});
		
		var _updateHeight = function() {
			var height=Math.min($(document).height(), $(window).height());
			
			$('.bg').css({height: height+'px'});
			$('#page1 .bg').css({height: (height+80)+'px'});
			height=Math.round(5*height/6);
			$('.left-text, .right-text').css({height: height+'px'});
			$('.all').css({height: (8*height)-230+'px'});
			
			$('#page1').css({height: (height+80)+'px'});
			
			$('.description').css({paddingTop: '0px'});
			$('#page1 .description').css({paddingTop: '100px'});
			
			for(a=1;a<9;a++)
			{
				$('#page'+a+' .container').css({top: -(a*67)+'px'});
			}
		};
		
		var _updatePos = function() {
			var pos=Math.max($('body').scrollTop(), $(window).scrollTop());
			var height=Math.min($(document).height(), $(window).height());
			
			$('#page1 .bg').css({marginTop: -(Math.round((pos-200+20)/3))-(70)+'px'});
			for(a=1;a<8;a++)
			{
				offset=$('#page'+a).offset().top;
				$('#page'+(a+1)+' .bg').css({marginTop: -(Math.round((pos-offset+20)/3))-(110*a)+'px'});
			}	
		};
		
		/*
		// bind mechanics
		friscoEvents.hook('testimonials_parallax', friscoEvents.FEV_PARALLAX_SCROLL, _updateScroll, {type: friscoEvents.FEV_TYPE_VOLATILE}); // volatile, {'feature':true}
		
		if ($('div#feature-lp').length) {
			$(window).scroll(function() {
				friscoEvents.fire('parallax', friscoEvents.FEV_PARALLAX_SCROLL, {}); // _updateScroll();
			});
			_updateScroll();
			
		}
		*/
	};
	
	var loadProduct = function(prevState, prevSubstate, parameters) {
		if (catalog) { catalog.disable(); }
		
		if (parameters.pid) {
			if (location.search.indexOf("utm_medium=criteo") >= 0) {
				var ids = $.cookie("criteo_prods");
				if (ids.split(",").length >= 6) {
					ids = parameters.pid + "," + ids;
					core.setState("criteoLandingPage", "", {ids: ids});
					return;
				}
			}
			
			api.getProduct(parameters.pid, function(prod) {
				var cart = friscoStorage.getShallow("cartData");
				
				if (!prod) {
					Popup.load({ messageId: Popup.MESSAGES.NO_PRODUCT, timeout: Popup.TIMEOUT.NORMAL });
					core.setState('defaultState');
					return;
				}
				
				var mangleBIHProducts = {
					48 : {'description': "Sos spaghetti Łowicz to bogactwo warzyw oraz przypraw aromatyczno-smakowych i ziół. Sosy marki Łowicz to produkty gotowe, które wystarczy tylko podgrzać.", 'product_name' : 'Sos spaghetti Łowicz. Pasteryzowany.', 'nutrient_elements' : "pomidory (153 g pomidorów zużyto na 100 g produktu), woda, cebula 10%, syrop glukozowo-fruktozowy, cukier, przecier jabłkowy, olej rzepakowy, skrobia kukurydziana modyfikowana, sól, substancja zagęszczająca - guma guar, regulator kwasowości - kwas cytrynowy, białko sojowe (<span style='font-weight: bold;'>soja</span>), przyprawy i zioła (m.in. oregano suszone 0,15%)<br/><br/>Może zawierać śladowe ilości <span style='font-weight: bold;'>selera</span>, pochodzące z linii produkcyjnej." },
					1091 : {'description' : "Ketchup Pudliszki należy do grona jednego z najpopularniejszych produktów tego rodzaju w naszym kraju. Niezbędny dodatek do pizzy, zapiekanek, tostów, sandwichy, sosów, hot-dogów a także wielu innych potraw.", 'product_name': "Ketchup pikantny" },
					12358 : {'description' : "Uncle Ben’s Sos Tajski Curry z małymi kolbami kukurydzy: pełen właściwych składników i bez sztucznych barwników  i konserwantów. Odpowiednie dla wegetarian. ", 'product_name': "Łagodny sos kokosowy z warzywami" },
				};
				
				if ($.inArray(parameters.pid, Object.keys(mangleBIHProducts)) >= 0) { 
					if ( !!mangleBIHProducts[parameters.pid].description ) 
						prod.description = mangleBIHProducts[parameters.pid].description;
					if ( !!mangleBIHProducts[parameters.pid].nutrient_elements ) 
						prod.nutrient_elements = mangleBIHProducts[parameters.pid].nutrient_elements;
					if ( !!mangleBIHProducts[parameters.pid].product_name ) 
						prod.product_name = mangleBIHProducts[parameters.pid].product_name;
				}

				var productBanners = {
// 					15455 : "/img/home-banners/kopiko.jpg",
//					42997 : "/img/home-banners/fairy.jpg",
// 					35251 : "/img/home-banners/dobrowianka.jpg",
				};
				
				var richContents = [
					{url: "pampers-pl", shop: 10, ids: [8236, 9496, 9497, 9498, 9499, 9500, 9501, 9616, 9617, 9618, 9619, 9620, 9930, 9933, 9934, 9942, 9947, 9948, 9953, 9955, 9957, 12606, 12607, 12608, 12610, 16026, 16027, 17921, 19181, 19191, 19201, 19211, 19221, 40712, 41450, 41451, 41455, 46853, 80621, 80623, 80625, 80627, 80629, 80631, 84607, 84615, 84617, 84619, 84621, 84623, 88129, 88131, 88123, 88133, 88127, 89137, 89133, 89135, 88125, 82287, 41454, 82277, 82279, 82281, 82283, 82285, 84625, 16521]},
					{url: "newpl-oralb", shop: 13, ids: [88547, 88549, 88551, 88553, 88555, 88557, 88559, 88561, 88745], css: "https://newpl-oralb.eshop-content.com/css/external-card01.css"},
				], richObj = null;
				
				var template = 'product_content';
				var danonkiOther = null;
				if (parameters.pid == 84529) template = 'product_content_kielbasa';
				else if (parameters.pid == 83581) template = 'product_content_scholl';
				else if (parameters.pid == 87123) template = 'product_content_oliwa';
				else if (parameters.pid == 88747) template = 'product_content_rogal';
				else if (parameters.pid == 86995 || parameters.pid == 86997) {
					template = 'product_content_danonki';
					danonkiOther = parameters.pid == 86995 ? 86997 : 86995;
				} else {
					richObj = _.find(richContents, function(r){ return _.contains(r.ids, +parameters.pid); });
					if (richObj) {
						$.getJSON("https://" + richObj.url + ".eshop-content.com/server?callback=?&product_id=" + parameters.pid + '&shop_id=' + richObj.shop, function(data) {
							try{
								var content = $('<div id="rich-content" style="z-index:0;position:relative;">' + data.html + '</div>');
								$(content).remove('script');
								$('#contentSection').after(content);
								$('#contentSection').after('<ul id="rich-content-page-tabs"><li>Powiązane produkty</li><li class="active">Cechy produktu</li></ul>');
								$('#suggestions').hide();
								$('#rich-content-page-tabs li').click(function(){
									var rich_tab = !$(this).is(':first-child');
									$('#rich-content').toggle(rich_tab);
									$('#suggestions').toggle(!rich_tab);
									$('#rich-content-page-tabs li').removeClass('active');
									$(this).addClass('active');
								});
							} catch (e) {}
						});
					}
				}
				
				// OCTOBERcontest
				if ( $.inArray(prod.product_id, october_promo_products) >= 0  || prod.is_multipack && $.inArray(prod.singlepack_id, october_promo_products) >= 0 )
					prod.octoberContest = true;
				 
				prod.cartAmount = cart.entries[prod.product_id] && cart.entries[prod.product_id].amount;
				$('#page_content').jqotesub(frisco.getTemplate(template), { product : prod, productBanner : productBanners[parameters.pid], other: danonkiOther });
				if (richObj && richObj.css) {
					var css = $('<style type="text/css">@import url("' + richObj.css + '") screen;</style>');
					$('#page_content').append(css);
				}

				// Dolce Gusto products
				if (_.contains([9278,9273,91427,9277,91423,9275,91421,91429,91425,9274], +parameters.pid)) {
					$('#bottom-banner').after('<div id="dolce-gusto-shop"></div>');
					loadDolceGusto(null, null, {container: '#dolce-gusto-shop', customBanner: +parameters.pid});
				}

				var titleGrammage = (prod.human_grammage_gross && prod.human_grammage_gross != '1szt') ? (' ' + prod.human_grammage_gross) : '';
				document.title = prod.full_name + titleGrammage + " z dostawą do domu - Frisco.pl. Cena: " + (prod.promotion_human_price_gross || prod.human_price_gross) + " zł"; // set page title
				var newBreadCrumbsArray = friscoHelpers.buildBreadCrumbsFromProductCategories( prod );

				var canonical = helpers.url('product', { pid : prod.is_multipack ? prod.singlepack_id : prod.product_id, n : prod.full_name.toLowerCase() })
				$("head > link[rel=canonical]").remove();
				$("head").append('<link rel="canonical" href="' + canonical + '"/>');
				
				if (newBreadCrumbsArray) {
					try { $('#page_content .breadcrumbs').jqoteapp(frisco.getTemplate('breadcrumbs'), { categories : newBreadCrumbsArray, full: true}); } catch (e) { console.error(e); }
					$('#page_content .breadcrumbs').find('ol').append( $('<li/>').append( $('<a/>').attr('href', canonical).html ( prod.name )) );

					var finalCat = "";
					var bString = "Frisco";
					$.each(newBreadCrumbsArray, function(index) {
						finalCat = newBreadCrumbsArray[index].name;
						bString += " > " + newBreadCrumbsArray[index].name;
					});

					newBreadCrumbsArray.reverse();
					$('.gcategory').html(finalCat);
					$('.gcategory').attr("content", bString);
				}
		
				$("#page_content div.content_product > div.image > p > img").bind("click", function() {
					if (_gaq && _gaq.push)
						_gaq.push(['_trackEvent', 'Karta-produktu', 'Zdjecie', 'Duze-warstwa']);
					$.colorbox({ html : '<div style="width: 480px; height: 480px; text-align:center;"><img src="' + helpers.img_url(prod.image_id,480,480)  +'" /></div>', transition:"none" })
				});
				
				$('#page_content .tab h3').click(function(e){
					$(this).next('.more').slideToggle(400);
					$(this).closest('.tab').toggleClass('active');
				});
				
				var displaySidebarEntry = function(container, bindImages, callback) { return function(data){
					data.cartAmount = cart.entries[data.product_id] && cart.entries[data.product_id].amount;
					var content_price = $.jqote(templates.product_content_price, {product : data});
					
					if (data.status == FRISCO.PRODUCT_STATUS_UNAVAILABLE) {
						container.find(".addToCart").remove();
						container.find(".unavailable").show().html( __("chwilowo niedostępny")  );
					} else if (data.status == FRISCO.PRODUCT_STATUS_WITHDRAWN || data.status == FRISCO.PRODUCT_STATUS_DELETED) {
						container.find(".addToCart").remove();
						container.find(".unavailable").show().html( __("produkt wycofany")  );
					}
					
					if (bindImages && data.image_id) {
						container.bind("mouseover", function() {
							$("#page_content div.content_product > div.image > p > img").attr("src", __$(helpers.img_url(data.image_id, 360, 360)) )
						}).bind("mouseout", function() {
							$("#page_content div.content_product > div.image > p > img").attr("src", __$(helpers.img_url(prod.image_id, 360, 360)) )
						});
					}
					
					container.find(" > ul")
					.prepend(content_price).parent().show()
					.toggleClass('active', data.cartAmount > 0)
					.find("span.amount").text(data.cartAmount || 0);
					
					if (callback)
						callback(data);
				}};
				
				/* Get singlepack product if needed */
				if (prod.is_multipack) {
					var content_Mainprice = $.jqote(templates.product_content_price, {product : prod, itemprop: true});
					$('#page_content #sidebarMultiPack > ul').prepend(content_Mainprice).parent().show()
						.toggleClass('active', prod.cartAmount > 0)
						.find("span.amount").text(prod.cartAmount || 0);
					
					api.getProduct(prod.singlepack_id, displaySidebarEntry($("#page_content #sidebarMainPrice"), true, function() {
						$("#page_content #sidebarMainPrice").insertAfter($("#page_content #sidebarMultiPack"));
					}), loggedUserId);
				} else {
					prod.cartAmount = cart.entries[prod.product_id] && cart.entries[prod.product_id].amount;
					var content_Mainprice = $.jqote(templates.product_content_price, {product : prod, itemprop: true});
					$('#page_content').find('#sidebarMainPrice > ul').prepend(content_Mainprice);
					
					/* Get multipack product if needed */
					if (prod.multipack_id) {
						api.getProduct(prod.multipack_id, displaySidebarEntry($("#page_content #sidebarMultiPack"), true), loggedUserId);
					}
				}
				
				if (danonkiOther) {
					var titles = {86995: "śmietanka", 86997: "banan"};
					$("#page_content #sidebarMainPrice .cart_title").text(titles[prod.product_id]);
					$("#page_content #sidebarMainPrice2 .cart_title").text(titles[danonkiOther]);
					
					api.getProduct(danonkiOther, displaySidebarEntry($("#page_content #sidebarMainPrice2"), false), loggedUserId);
					
					$('.danone-section .next a').click(function(ev){
						ev.preventDefault();
						$('html, body').animate({scrollTop: $($(this).attr('href')).offset().top});
					});
				}
				
				var keywords = "";
				var brandLoaded = false;
				var brand = null;
				var vanAvailable = frisco.friscoVanAvailable();
				
				for (i in prod.tags) {
					var tag = prod.tags[i];
					if (tag.name) {
						keywords =  keywords + (keywords.length == 0 ? "" : ", ") + tag.name;
						var tag_link = "<li><a href=\"/filters,tag_ids%3D" + tag.tag_id + "/cn," + encodeURIComponent(tag.name) + "/stn,searchResults\">" + tag.name + "</a></li>";
						$("#page_content .productTags").append(tag_link);
					}
			
					if (!brandLoaded && tag.tag_type_id == friscoHelpers.TAG_TYPE_BRAND) {
						brand = tag.name;
						brandLoaded = true;
						api.searchProducts("", [], [tag.tag_id], function(totalFound, productsArray, brandsArray, tagsArray, categoriesArray, boughtProducts) {
							if (boughtProducts)
								frisco.renderProducts($('#sameBrandBought ul.products'), boughtProducts, function(x){
									x.cartAmount = cart.entries[x.product_id] && cart.entries[x.product_id].amount;
									var show = x.status == 0 && parameters.pid != x.product_id && x.image_id > 0;
									if (show && (!x.is_van_only || vanAvailable))
										$('#sameBrandBought').show();
									return show;
								}, {mini: true}, undefined, true);

							if (productsArray) {
								frisco.renderProducts($('#sameBrandOthers ul.products'), productsArray, function(x){
									x.cartAmount = cart.entries[x.product_id] && cart.entries[x.product_id].amount;
									var show = x.status == 0 && parameters.pid != x.product_id && x.image_id > 0;
									if (show && (!x.is_van_only || vanAvailable))
										$('#sameBrandOthers').show();
									return show;
								}, undefined, undefined, true);
								$('#sameBrandOthers ul.products').children().slice(0, 22).clone().appendTo($('#sameBrandOthers ul.products')).addClass("repeated");
							}

							function updateSlidersWidth(){
								$("#page_content .products-window").each(function(){
									var margins = 125;
									var realWidth = _.reduce($(this).find("li.productId:not(.repeated):visible"), function(a,b){return a+$(b).outerWidth(true)}, 0);
									var productSize = $(this).find("li.productId:visible").outerWidth(true);
									var size = Math.floor(($(window).width()-margins) / productSize) * productSize;
									$(this).closest(".products-slider").width(size + margins);
									if (realWidth < $(this).width())
										$(this).closest(".products-slider").addClass('inactive');
								});
							}
							updateSlidersWidth();
							$(window).unbind('resize.slider').bind('resize.slider', updateSlidersWidth);
						}, 30, 1, {'priority': 'd'}, false, true);
					}
				}
				
				// Brand
				if (brand) {
					var find = function (name, cbk) {
						cms.brand(name, function(data){
							if (data && data.image)
								$("#contentSection .see-other-products").find("a").html("<img src='"+data.image+"' alt='"+brand+"'>").attr("href", "/brand_name,"+data.container.replace(/ /g, '_')+"/stn,searchResults").end().show();
							else if ($.isFunction(cbk)) cbk();
						});
					};
					find(brand, function(){
						find(brand.replace(/'|\?/g, ''));
					});
				}
				
				// Gratis
				var display_gratis = function(product) {
					// Because we have the data, why not prepare the label content to save the api call in the future?
					$("#contentSection div.promotionLabel .other span.otherContainer").html("<img src='" + helpers.img_url(product.image_id, 50, 50) + "'/>" + product.visible_name + " " + product.human_grammage_gross);
					$("#contentSection .gratis-box")
						.find(".photo img").attr("src", helpers.img_url(product.image_id, 90, 90)).end()
						.find("a").attr("href", helpers.url('product', {pid: product.product_id, n: product.full_name.toLowerCase()})).end()
						.find(".name").text(product.visible_name).end()
						.find(".grammage").text(product.human_grammage_gross).end()
						.show();
				};
				
				cms.free_prod(function(res) {
					var shown = false;
					$.each(res, function(i, promo) {
						if ($.inArray(prod.product_id, promo.ids) >= 0) {
							shown = true;
							api.getProduct(promo.gratis, function(p){
								display_gratis(p);
								$("#contentSection .gratis-box")
									.find("h3").text(promo.headline).end()
									.find(".name").html(promo.text || promo.html).end()
									.find(".grammage").hide();
								if (promo.subline)
									$("#contentSection .gratis-box .free").text(promo.subline);
							});
							return false;
						}
					});
					
					if (!shown) {
						var curPromo = prod.promotions[prod.current_promotion];
						if (curPromo && (curPromo.type_id == 4 || curPromo.type_id == 3)) {
							shown = true;
							if (curPromo.type_id == 4)
								api.getProduct(curPromo.freeProductId, display_gratis);
							else
								display_gratis(prod);
						}
					}
					
					if (!shown) {
						var active;
						var handle = _.after(2, function() {
							if (active && $.inArray(""+prod.product_id, CONFIG.PROMOPAPER_PRODUCTS) >= 0) {
								shown = true;
								$("#page_content #sidebarMainPrice .cart_title").append('<h3><a href="/stn,gazetka-promocyjna">Produkt z gazetki</a></h3>');
							}
						});
						
						cms.promopaper(function(data){
							active = data.active;
							handle();
						});
						
						if (CONFIG.PROMOPAPER_PRODUCTS.length)
							handle();
						else {
							var cbk = function(data) {
								if (data.promopaper) {
									CONFIG.PROMOPAPER_PRODUCTS = data.promopaper;
									handle();
								}
							};
							var p = {}; p[friscoStorage.PARAM_FOLLOWER_CALLBACK] = cbk;
							friscoStorage.get("promoproducts", p);
						}
					}
					
					// OCTOBERcontest
					if (!shown && octoberContestActive()) {
						cms.octoberContest(function(products){
							if (_.findWhere(_.flatten(products), {id: prod.product_id})) {
								$("#contentSection .gratis-box")
									.find(".photo img").attr("src", '/img/produktkonkursowy.png').end()
									.find("a").attr("href", '/stn,wygraj-kurs').end()
									.find("h3").text("Produkt konkursowy").end()
									.find(".name").text("Kupując ten produkt, bierzesz udział w konkursie").end()
									.find(".free").hide().end()
									.show();
							}
						});
					}
				});

				cms.product_banners(function(res) {
					var banner = res && res[prod.product_id];
					if(banner && banner.img) {
						$('#bottom-banner').append('<a ' + (banner.url ? ('href="' + banner.url + '"') : '') + '><img src="' + banner.img + '"/></a>');
					}
				});

				var metas = document.getElementsByTagName('meta');
				for (i=0; i<metas.length; i++) {
					if (metas[i].name == "Keywords") {
						metas[i].content = "supermarket online, zakupy spożywcze, zakupy online warszawa, " + prod.full_name + keywords;
					}
					if (metas[i].name == "Description") {
						metas[i].content = "Supermarket online Frisco.pl poleca: " + prod.full_name  + " " + prod.human_grammage_gross + " w atrakcyjnej cenie! Zamów zakupy przez Internet, dostarczymy je nawet tego samego dnia. Spróbuj!";
					}
				}
				
				window.TDConf = window.TDConf || {};
				TDConf.Config = {
					productId: prod.product_id,
					brand: prod.brand_name,
					productName: prod.full_name,
					productDescription: prod.description,
					price: prod.price_gross / 100,
					currency: "PLN",
					url: location.href,
					imageUrl: "http://www.frisco.pl" + helpers.img_url(prod.image_id,450,450),
					containerTagId : "5199"
				};
				if (typeof (TDConf) != "undefined") {
					TDConf.sudomain = ("https:" == document.location.protocol) ? "swrap" : "wrap";
					TDConf.host = ".tradedoubler.com/wrap";
					TDConf.containerTagURL = (("https:" == document.location.protocol) ? "https://" : "http://")  + TDConf.sudomain + TDConf.host;
					if (typeof (TDConf.Config) != "undefined") {
							$.getScript(TDConf.containerTagURL  + "?id="+ TDConf.Config.containerTagId);
					}
				}
				
				// Criteo
				if (frisco.useTrackingCode("criteo"))
				try {
					window.criteo_q = window.criteo_q || [];
					window.criteo_q.push(
						{ event: "setAccount", account: 4936 },
						{ event: "setCustomerId", id: loggedUserId },
						{ event: "setSiteType", type: "d" },
						{ event: "viewItem", item: prod.product_id ,user_segment: "1" }
					);
					
					// Store visited product
					var criteo_prods = $.cookie("criteo_prods");
					criteo_prods = criteo_prods ? criteo_prods.split(",") : [];
					if ($.inArray(""+prod.product_id, criteo_prods) === -1) {
						criteo_prods.push(prod.product_id);
						criteo_prods = criteo_prods.slice(-100).join(",");
						$.cookie("criteo_prods", criteo_prods, {path : '/', expires: 366});
					}
				} catch (e) {}
				
				// Sociomantic
				if (frisco.useTrackingCode("sociomantic"))
				try {
					sociomantic.sonar.adv['frisco-pl'].clear();
					if (loggedUserId) window.customer = {identifier: loggedUserId};
					window.product = {identifier: prod.product_id};
					sociomantic.sonar.adv['frisco-pl'].track();
				} catch (e) {}
				
				// Żywiec pixel
				if (parameters.pid == 86235) {
					initPBTrackingPixel();
					window._fbq.push(['addPixelId', '295504170605568']);
					window._fbq.push(['track', 'PixelInitialized', {}]);
				}
				
				// Pampers pixel
				if (_.contains(pampersMonthProductIds, +parameters.pid)) {
					initPBTrackingPixel();
					window._fbq.push(['addPixelId', '497572337060093']);
					window._fbq.push(['track', 'PixelInitialized', {}]);
					window._fbq.push(['track', '6025342384061', {'value':(prod.price_gross / 100).toFixed(2),'currency':'PLN'}]);
				}

				var recom_loaded = 0, recom_ids={};
				var remove_duplicates = function(res, source) {
					recom_ids[source||0] = $.map(res, function(e){ return +e.id; });
					recom_loaded += 1;
					if (recom_loaded == 2 && recom_ids[0].length && recom_ids[1].length) {
						var common = $(recom_ids[0]).filter(recom_ids[1]); // intersection
						$.map(common, function(id){
							$('#recommendations .productId[product_id="'+id+'"]').remove();
						});
					}
				};
				
				$('#boughtTogether').hide();
				if(newBreadCrumbsArray && newBreadCrumbsArray.length) {
					var cat = $.map(newBreadCrumbsArray, function(x) { return x.name; }).reverse().join('>>');
					FabloConfig.showRecommendations(parameters.pid, $('#recommendations-in-category'), cat, 6, true, function(results){
						remove_duplicates(results, 1);
						if (results.length < 5 || prod.status != FRISCO.PRODUCT_STATUS_AVAILABLE) return;
						var currentProd = $($.jqote(templates.product_shelf, {product: prod, gaAttr: 'Kategoria' }));
						$('#recommendations-in-category ul.products .productId').eq(0).clone().addClass("sum").prependTo($('#boughtTogether ul.products'));
						currentProd.prependTo($('#boughtTogether ul.products'));
						var total = (prod.promotion_price_gross || prod.price_gross)/100;
						var ids = [prod.product_id];
						$.each(_.take(results, 1), function(i, v){
							total += v.attributes.Cena[0];
							ids.push(+v.id);
						});
						$('#boughtTogether .summary p.price').html(friscoHelpers.parsePrice(total));
						$('#boughtTogether .summary .addToCart a.multiple').attr('product_ids', ids.join(','));
						$('#boughtTogether').show();
					});
				} else {
					$('#recommendations-in-category').hide();
				}
				
				FabloConfig.showRecommendations(parameters.pid, $('#recommendations'), undefined, undefined, true, remove_duplicates);
				(function(product) {
					Fablo.ready(function(){
						// todo: remove Fablo.trace after next fablo release
						Fablo.trace.visited({user: loggedUserId, products: [product.product_id]});
						Fablitics.track("visited", {product: {id: '' + (product.singlepack_id || product.product_id)}});
					});

					setTimeout(function() {
						smEvent("load-product:"+parameters.pid);
					}, 3000);
				})(prod);

				// cloudtechnologies
				friscoEvents.fire('products_page', friscoEvents.FEV_LOAD_PRODUCT_PAGE, prod.product_id);
			}, loggedUserId);
			
		}
	};
	
	var setCanonicalUrlForCategory = function(cat_id, cat) {
		var url = core.getUrl('searchResults', null, {c: cat_id, cat: helpers.clearCategory(cat)}, true);
		$("head > link[rel=canonical]").remove();
		$("head").append('<link rel="canonical" href="' + url + '"/>');
	};

	/**
	*  publics
	*/
	var pub = {
		// Criteo & Sociomantic
		useTrackingCode : function(provider) {
			var cookie_name = "selectedTracking";
			// Randomize: false or list of providers to sample from: ['criteo', 'sociomantic']
			var randomize = false;
			
			var current = $.cookie(cookie_name);
			if (!randomize)
				return true;
			else if (current)
				return current.indexOf(provider) >= 0;
			else {
				current = randomize[Math.floor(Math.random() * randomize.length)];
				$.cookie(cookie_name, current, {path: '/'});
				return current == provider;
			}
		},
		
		getTemplate : function(tplName) {
			return templates[tplName] != undefined ? templates[tplName] : "<span>Empty template file</span>";
		},
		
		renderProducts : function(container, products, filter, extra, template, dontIncludeSpace) {
			var out = "", data;
			var sep = dontIncludeSpace ? '' : ' '; // this space is crucial for justify to work.
			var big_images = core.getCurrentParameters().big_images == "1";
			$.each(products, function() {
				// filter can be true to left only products with status==0 or 2 or can be any function returning boolean
				// or object of properties to check (only status is supported for now)
				if (filter) {
					if (filter === true)
						filter = {'status' : [FRISCO.PRODUCT_STATUS_AVAILABLE, FRISCO.PRODUCT_STATUS_UPDATED]};
					if (filter.status && (filter.status instanceof Array)) {
						var filterOut = true;
						for (var i in filter.status)
							if (this.status == filter.status[i])  filterOut = false;
						if (filterOut) return;
					} else if ( typeof(filter) == 'function' && !filter(this) ) {
						return;
					}
				}
				
				if (typeof(extra) == 'function') {
					data = extra(this);
					data.product = data.product || this;
				} else {
					data = extra ? extra : {};
					data.product = this;
				}
				data.product.bigImage = big_images;
				
				// OCTOBERcontest
				if ( $.inArray(data.product.product_id, october_promo_products) >= 0 )
					data.product.octoberContest = true;
				
				out += $.jqote(frisco.getTemplate(template || 'product_shelf'), data) + sep; 
			});
			
			if (dontIncludeSpace)
				container.append(out);
			else { // include elem placeholders
				var phs = container.find(".elem-placeholder");
				if (phs.length) {
					phs.eq(0).before(out);	
				} else {
					out += new Array(12).join(' <li class="elem-placeholder"></li> ');
					container.append(out);
				} 
			}
		},
		
		/**
		* force reload templates, 4debug
		*/
		reloadTemplates : function() {
			templates = {};
			loadTemplates();
		},
		
		loadOnScroll : function() {
			if (true == $(window).data("bound")) {
				return;
			}
			
			$(window).data("bound", true);
			$(window).scroll(function() {
				if (0 == $("#footer").length) { return; }
				var contentContainer = $(window);
				var elemBottom = $("#footer").offset().top; // contentContainer.find(":first-child").offset().top;
// 				var elemBottom = elemTop;
// 				
// 				contentContainer.children().each(function(index, item){
// 					elemBottom += $(item).height();
// 				});
				
				//var elemBottom = elemTop + contentContainer.height();
				var docViewTop = contentContainer.scrollTop();
				var docViewBottom = docViewTop + contentContainer.height();
				var shouldLoadMore = docViewBottom + 500 > elemBottom;
				
// 				console.log("[loadOnScroll] elemBottom: "+elemBottom+", docViewTop: "+docViewTop+", docViewBottom: "+docViewBottom+", shouldLoadMore: ("+(docViewBottom+100-elemBottom)+">0 ? "+shouldLoadMore);
				
				if (shouldLoadMore) {
					// disable auto products loading when quota was reached
					if (catalog && catalog.isAutoScrollActive()<0) 
						return false;
					friscoEvents.fire('scrollable', friscoEvents.FEV_LOAD_MORE, {});
				}
			});
		},
		
		contentHeader : function() {
			$(window).scroll( function() {
				var docViewTop = $(window).scrollTop();
				var docViewBottom = docViewTop + $(window).height();
				
				if (!$("#contentHeader") || !$("#contentHeader").offset()) {
					return;
				}
				
				var elemTop = $("#contentHeader").offset().top;
				var elemBottom = elemTop + $("#contentHeader").height();
				
				if ((elemTop >= docViewTop)){
					$("div#contentHeader").removeClass("fixed");
				} else {
					$("div#contentHeader").addClass("fixed");
				}
			});
		},
		
		setMetaDescription : function(desc) {
			var metas = document.getElementsByTagName('meta');
			for (i=0; i<metas.length; i++) {
				if (metas[i].name == "Description") {
					metas[i].content = desc;
				}
			}
		},

		setCanonical : function(url) {
			// check if there is already canonical link inside
			var canonicalLink = $('link[rel=canonical]');
			if (canonicalLink.length ==0) {
			    $('head').append( $('<link />').attr('rel', 'canonical').attr('href', url) );
			    
			} else {
			    canonicalLink.attr('href', url);
			}
		},
		
		loadCategory: function(category_id) {
			api.getCachedCategory(category_id, function(category) {
				var category_ids = _.pluck(category.path, 'category_id').reverse();
				
				// 1 - drinks, 165 - alcohol
				if (category_id == 1 || category_id == 165 || category_ids[0] == 1 || category_ids[0] == 165) {
					$("#sort-attrs .sort-list li:eq(3) a").text(__$('ceny za litr'));
				} else
					$("#sort-attrs .sort-list li:eq(3) a").text(__$('ceny za kg'));
			
				var categories = _.pluck(category.path, 'name').reverse();
				categories.push(category.name);
				var category = categories.join('>>');
				
				var title = _.last(categories);
                CategoryDescriptions.get(category_id + '_' + lang.getCurrentLang(), function(data) {
                    var top_seo_phrase = data.top_phrase;
                    if(top_seo_phrase) {
                        document.title = title + " - " + top_seo_phrase + " - z dostawą do domu - Frisco.pl";
                    } else {
                        document.title = title + " - z dostawą do domu - Frisco.pl";
                    }
                }, function() {
                    document.title = title + " - z dostawą do domu - Frisco.pl";
                });
				$("#contentHeader .title h1").text(title);
				$("#contentHeader .breadcrumbs").html("<ol/>");
				$("#contentHeader .breadcrumbs ol").html('<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/" title="Frisco.pl – zakupy online" itemprop="url"><span itemprop="title">Strona główna</span></a><span class="icon"></span></li>');
				if (category_ids && category_ids.length) {
					for(i = 0; i < categories.length - 1; i++) {
						$("#contentHeader .breadcrumbs ol").append('<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" depth="'+i+'"><a href="/c,'+category_ids[i]+'/cat,' + helpers.clearCategory(_.first(categories, i + 1)) + '/stn,searchResults" title="' + categories[i] + '" itemprop="url"><span itemprop="title">' + categories[i] + '</span></a><span class="icon"></span></li>');
					}
				} else {
					for(i = 0; i < categories.length - 1; i++) {
						$("#contentHeader .breadcrumbs ol").append('<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" depth="'+i+'"><a href="/cat,' + helpers.clearCategory(_.first(categories, i + 1)) + '/stn,searchResults" title="' + categories[i] + '" itemprop="url"><span itemprop="title">' + categories[i] + '</span></a><span class="icon"></span></li>');
					}
				}

				frisco.addCategoryBanner(category_id);

				setCanonicalUrlForCategory(category_id, category);
				frisco.setMetaDescription(title + " oferuje supermarket online Frisco.pl. Do wyboru - ponad 15 tys. artykułów, z dostawą do domu nawet tego samego dnia! Sprawdź.");

				setTimeout(function() {
					smEvent("load-category:"+category_id);
				}, 5000);
			});
		},
		
		handleLpBannerCustom : function(promoBannerURL, size, state) {
			$('#lp-banner').remove(); // remove as it can be on other, hidden page
			if (promoBannerURL) {
				lpBannerDisplayed = true;
				var html = '<div id="lp-banner" class="'+size+'"><img src="'+promoBannerURL+'"></div>';
				// add banner to first proper and visible DOM element
				if (state == "searchResults") $('#fablo_products').before(html);
				else if ($('#page_content #contentHeader + div:visible').prepend(html).length);
				else if ($('#page_content .homeImage').replaceWith(html).length);
				else if ($('#page_content:visible').prepend(html).length);
			}
		},
		
		addCategoryBanner : function(category_id) {
			var promoBannerURL = null;
			if (category_id == 4182) promoBannerURL = "/img/home-banners/pqs.jpg"; // 'Świeże>>Mięso>>Wieprzowina PQS' 
			
			if (promoBannerURL)
				frisco.handleLpBannerCustom(promoBannerURL, 'normal', 'searchResults');
		},
		
		addCatalogBanners : function(selector, onePerFewLines, category_path, query) {
			var state = core.getCurrentState()
			var onHomePage = !state || state === 'defaultState' || isClaimBonusLP(state);
			if ($("li.catalogImages").length || onHomePage) return;
			if (!onePerFewLines) {
				$(selector || "ul.products:visible").eq(0).prepend("<li class=\"catalogImages\"><ul></ul></li>");
				
				// banners used in rotation 
				var banners = [
// 					{src : "/img/catalog_images/sok_granat.jpg", url : "/stn,granteLP", name : "Grante_07_2013" },
// 					{src : "/img/catalog_images/papier_renova.jpg", url : "/q,Renova/t[0],3401633/stn,searchResults" },
// 					{src : "/img/catalog_images/ryby_owoce_morza.jpg", url : "/c,2509/bc[0],2403/cn,Ryby-i-owoce-morza/stn,searchResults" },
// 					{src : "/img/catalog_images/grill.jpg?100200300", url : "/stn,grill", name : "grill_kwiecien_2013" },
// 					{src : "/img/catalog_images/ziola.jpg", url : "/stn,feature/name,ziola082013" },
// 					{src : "/img/catalog_images/vibe.jpg", url : "http://www.frisco.pl/q,vibe/filters,brand_name%3DVIBE/stn,searchResults" },
//					{src : "/img/catalog_images/lody.jpg", url : "/c,161/stn,searchResults" },
//					{src : "/img/catalog_images/jj_baby.jpg", url : "/q,johnsons%20baby/filters,brand_name%3DJOHNSONS®%20BABY/stn,searchResults" },
// 					{src : "/img/catalog_images/30092013_nutricia_konkurs.jpg", url : "https://www.bobovita.pl/home/klub/konkursy/expert/?utm_source=frisco&utm_medium=baner&utm_campaign=konkurs_expert", newWindow: true},
// 					{src : "/img/catalog_images/gazetka_082013_v2.jpg", url : "/stn,gazetka", name : "gazetka_082013" }
// 					{src : "/img/catalog_images/gazetka_small_rotator-27092013.jpg", url : "/stn,gazetka" }
				];
				
				var array = [];
// 				array[0] = {src : "/img/catalog_images/wedel_2za20_v1.jpg", url : "/stn,searchResults/q,ptasie mleczko", name : "wedel_maj_2013" };
// 				array[0] = {src : "/img/catalog_images/pampers.jpg", url : "/stn,pampersLandingPage", name : "pampers" };
// 				array[0] = {src : "/img/catalog_images/gazetka_022014.jpg", url : "/stn,gazetka", name : "gazetka_luty_2014" };
				array[0] = {src : "/img/catalog_images/bebiko.jpg", url : "/q,bebiko/stn,searchResults", name: "bebiko-zdrowo-rosnac" };
// 				array[0] = {src : "/img/catalog_images/woda_blk.jpg", url : "/pid,47031/n,blk-woda-czarna-mineralna/stn,product" };
				array[2] = {src : "/img/catalog_images/frisco_okazja.jpg", url : "/stn,taniej-niz-myslisz", name: "okazyjne-ceny-frisco" };
// 				array[2] = {src : "/img/catalog_images/30092013_nutricia_konkurs.jpg", url : "https://www.bobovita.pl/home/klub/konkursy/expert/?utm_source=frisco&utm_medium=baner&utm_campaign=konkurs_expert", newWindow: true};
 				array[1] = {src : "/img/catalog_images/220x140_helio.jpg", url : "/q,helio/filters,brand_name=HELIO/stn,searchResults", name: "helio-bakalie" };
// 				array[3] = {src : "/img/catalog_images/220x140_vytautas.jpg", url : "/q,vytautas/stn,searchResults" };
				array[3] = {src : "/img/catalog_images/head_and_shoulders.jpg", url : "/q,Head%20&amp;%20Shoulders/stn,searchResults", name: "head-n-shoulders-meski-sposob" };
// 				array[3] = {src : "/img/catalog_images/grill.jpg?100200300", url : "/stn,grill", name : "grill_kwiecien_2013" };
                
				/*
				var start = 1, end = 2;
				while (start <= end){
					var random = Math.floor(Math.random() * banners.length);
					array[start] = banners[random];
					banners.splice(random, 1);
					start++;
				}
				*/
				$.each(array, function(index, value) {
					if (value.src) {
						$("li.catalogImages > ul").append('<li><a href="'+ value.url + '?miejsce=serwis-2-' + (index+1) + (value.name ? '&kampania='+ value.name : '') + '"' + (value.newWindow ? ' target="_blank"' : '')+'><span class="icon"></span><img src="' + value.src + '" /></a></li>');
					} else {
						$("li.catalogImages > ul").append('<li>' + value.html + '</li>');
					}
				});
			}
			else {
				var container = $(selector || "ul.products:visible");
				var bannersFree = ["activia", "danio", "danonki", "fantasia"];
				if ($.inArray(query.toLowerCase(), bannersFree) >= 0) {
					container.find(".catalogImage").remove();
					return;
				}
				var products = container.find('.productId:visible');
				var productsPerLine = Math.floor(container.width() / products.eq(0).outerWidth(true));
				var lines = products.length / productsPerLine;
				if (lines > 4) {
					cms.catalog_banners(function(selectedBanners) {
						if (category_path) {
							var category_id = category_path[0];
							if ($("#fablo_products").data('banners-cat') == category_id) {
								selectedBanners = $("#fablo_products").data('banners');
							}
							else {
								selectedBanners = _.filter(selectedBanners, function(b){ return !b.categories || _.intersection(b.categories, category_path).length});
								$("#fablo_products").data('banners', selectedBanners);
								$("#fablo_products").data('banners-cat', category_id);
							}
						}
						var MAX = selectedBanners.length;
						var bannerCount = Math.min(MAX, Math.floor((Math.floor(lines)+1)/2));
						var alreadyShown = container.find(".catalogImage").length;
						$.each(_.drop(_.take(selectedBanners, bannerCount), alreadyShown), function(i, value){
							var newEl = $('<div class="catalogImage"><a href="'+ value.url + '?miejsce=serwis' + (value.name ? '&kampania='+ value.name : '') + '"' + (value.newWindow ? ' target="_blank"' : '')+'><span class="icon"></span><img src="' + value.img + '" /></a></div>');
							products.parent().append(newEl); // Just insert them at the end, redrawBanners will handle positions
						});
						frisco.redrawBanners(container, true)();
						$(window).off("resize.catalog_banners");
						$(window).on("resize.catalog_banners", _.throttle(frisco.redrawBanners(container), 250));
					});
				}
				else {
					container.find(".catalogImage").remove();
				}
			}
		},
		
		redrawBanners : function(container, force) {
			return function() {
				var products = container.find('.productId:visible');
				var productsPerLine = Math.floor(container.width() / products.eq(0).outerWidth(true));
				var prevProductsPerLine = container.data('productsPerLine');
				if (!force && prevProductsPerLine == productsPerLine) return;
				container.data('productsPerLine', productsPerLine);
				container.find(".catalogImage").each(function(i, e){
					var nr = (1+i*2)*productsPerLine-2-i;
					if (i % 2 == 1) nr -= productsPerLine - 1;
					var p = products.eq(nr);
					if (p.length)
						p.after(document.createTextNode(' '), $(e).show())
					else
						$(e).hide();
				});
			}
		},
		
		datepickerLanguage : function() {
			if ($.datepicker.regional['pl'] == undefined) {
				$.datepicker.regional['pl'] = {
					clearText: 'Czyść',
					closeText: 'Zamknij',
					prevText: '&laquo; Poprzedni', nextText: 'Następny &raquo;', currentText: 'Teraz',
					dayNames: ['Pn','Wt','Śr','Czw','Pt','Sb','Nd'],
					dayNamesMin: [__("Nd"), __("Pn"), __("Wt"), __("Śr"), __("Cz"), __("Pt"), __("Sb")],
					monthNames: ['Styczeń','Luty','Marzec','Kwiecień','Maj','Czerwiec','Lipiec','Sierpień','Wrzesień','Październik','Listopad','Grudzień'],
					dateFormat: 'DMY/',
					firstDay: 0 };
				$.datepicker.setDefaults($.datepicker.regional['pl']);
			}
		},
		
		sortDropbox : function() {
			var filtersButton = $('div#contentHeader div.sort > a.dropbox');
			var filtersContainer = $('div#contentHeader div.sort');
			filtersButton.live("click", function(event) {
				event.stopPropagation();
				event.stopImmediatePropagation();
				if ($(this).parent("div").hasClass("active")) {
					$(this).parent("div").removeClass("active");
				} else {
					$(this).parent("div").addClass("active");
				}
				return false;
			});
			
			if (_gaq && _gaq.push) {
				$("div#contentHeader div.sort div.content a").live("click", function() {
					_gaq.push(['_trackEvent','Lista-produktow','Sortowanie',$(this).html()]);
					return true;
				});
			}
			
			$(document).click(function(){
				$('div#contentHeader div.sort.active').removeClass("active");
			});
			
			filtersContainer.live("mouseleave", function(event) {
				$('div#contentHeader div.sort').data("closeContent", setTimeout(function() {
					$('div#contentHeader div.sort').removeClass("active");
				}, 1000));
			});
			filtersContainer.live("mouseenter", function(event) {
				var closeContent = $('div#contentHeader div.sort').data("closeContent");
				if (closeContent) { clearInterval(closeContent); }
			});
		},
		
		bindProductTabs : function() {
			$('#page_sidebar').on("click", "a.showFullView", function() {
				Sidebar.hide(); 
				if (_gaq && _gaq.push) {
					_gaq.push(['_trackEvent','Karta-produktu-toplayer','Pelny-widok']);
				}
				return true;
			});
			
			$('#page_sidebar').on("click", "ul.tabs a", function() {
				if (_gaq && _gaq.push){
					if ($(this).parent().hasClass("description")){
						_gaq.push(['_trackEvent','Karta-produktu-toplayer','Zakladka','Opis']);
					} else if($(this).parent().hasClass("ingredients")) {
						_gaq.push(['_trackEvent','Karta-produktu-toplayer','Zakladka','Skladniki']);
					} else if($(this).parent().hasClass("nutritional")) {
						_gaq.push(['_trackEvent','Karta-produktu-toplayer','Zakladka','Wartosc']);
					}
				}
				$('#page_sidebar').find("ul.tabs > li.active").removeClass("active");
				$('#page_sidebar').find("ul.content > li.active").removeClass("active");
				
				$(this).parent("li").addClass("active"); 
				var current = $('#page_sidebar').find("ul.content li").eq($(this).parent().index());
				
				current.addClass("active");
				
// 				if (!current.hasClass("scrollDrawn")) { 
// 					$("#page_sidebar ul.content").mCustomScrollbar();
// 					current.addClass("scrollDrawn");
// 				}
			});
		},
		
		bindRadios : function(labels) {
			labels.each(function(index) {
				$(this).click(function() {
					labels.removeClass("checked");
					$(this).addClass("checked");
				});
			});
		},
		
		bindCheckboxes : function(labels) {
			labels.each(function(index) {
				$(this).click(function() {
					if ($(this).hasClass("checked")) {
						$(this).removeClass("checked");
						$(this).siblings("input").attr( 'checked', false );
						return false
					} else {
						$(this).addClass("checked");
						$(this).siblings("input").attr( 'checked', true );
						return true
					}
				});
			});
		},
		
		bindProductsSwitch : function() {
			$("li.productId.multipack ul.switch > li.singlepack a").live("click", function() {
				var parentLi = $(this).closest(".multipack");
				parentLi.addClass("hidden");
				parentLi.prev(".singlepack").addClass("switched").removeClass("hidden");
				return false;
			});

			$("li.productId.singlepack ul.switch > li.multipack a").live("click", function() {
				var parentLi = $(this).closest(".singlepack");
				var singleProductId = parentLi.attr("product_id");
				var multipackIdFromSingle = parentLi.attr("multipack_id");
				var gaAttr = parentLi.find(".addToCart a.add").attr('ga');
				var multipackExist = $('ul.products li[product_id=' + multipackIdFromSingle + ']').length;
				
				if (multipackExist == 0 ) {
					api.getProduct(multipackIdFromSingle, function(multiPackData) {
						var cart = friscoStorage.getShallow('cartData');
						multiPackData.cartAmount = cart.entries[multiPackData.multipack_id] && cart.entries[multiPackData.multipack_id].amount;
						multiPackData.bigImage = core.getCurrentParameters().big_images == "1";
						
						// OCTOBERcontest
						if ( $.inArray(singleProductId, october_promo_products) >= 0 )
							multiPackData.octoberContest = true;
						
						$('ul.products li[product_id=' + singleProductId + ']').after($.jqote(frisco.getTemplate('product_shelf'), { product : multiPackData, switchEnable : true, gaAttr: gaAttr}));
						
						parentLi.addClass("hidden");
						parentLi.next(".multipack").addClass("switched").removeClass("hidden");
// 						renderCartContent();
					});
				} else {
						parentLi.addClass("hidden");
						parentLi.next(".multipack").addClass("switched").removeClass("hidden");
				}
				return false;
			});
			
			$("li.productId.multipack ul.switch > li.multipack a, li.productId.singlepack ul.switch > li.singlepack a").live("click", function() { return false; });
			
			$("ul.products li").live("mouseleave", function() {
				$(this).prev().removeClass("switched");
				$(this).next().removeClass("switched");
			});
		},
		
		checkDevicePixelRatio : function() { 
			var height = $("div#device-pixel").css("height");
			if (height == "2px") {
				FRISCO.DEVICE_PIXEL_RATIO = 2;
			}
		},

		afterCartChanged: function(amount, entryCart) {
			DBG('afterCartChanged', 'updating cart after adding/deleting/changing product...');
			friscoStorage.set('cartData', entryCart);
			friscoSession.set('cart_version', entryCart.version);
			Fablitics.track("set-cart", {
				products: _.map(entryCart.entries, function(x) {
					return {
						id: '' + (x.product.singlepack_id || x.product_id),
						quantity: x.amount * (x.product.items_count || 1)
					};
				})
			});
		},

		// Adds productId or products to cart, updates state of cart and fires tracking codes.
		// Warning: if first argument is a list of products ids then rest of arguments will be ignored.
		addProductToCart: function(productId_or_products, quantity, gaAttr) {
			var productId, products;
			if($.isArray(productId_or_products)) {
				products = productId_or_products;
			} else {
				productId = productId_or_products;
			}

			var traceCart = function(prod_ids, gaAttr, quantity) {
				if (_gaq && _gaq.push && gaAttr) {
					_gaq.push(['_trackEvent', gaAttr, 'Dodaj-do-koszyka', '' + quantity, quantity]);
				}
				Fablo.trace.add_to_cart({user: loggedUserId, products: prod_ids});
				
				// Żywiec pixel
				if (prod_ids[0] == 86235) {
					initPBTrackingPixel();
					api.getProduct(prod_ids[0], function(prod) {
						var value = quantity * prod.price_gross / 100;
						window._fbq.push(['track', '6020676188017', {'value': value.toFixed(2), 'currency': 'PLN'}]);
					});
				}
				// Pampers pixel
				if (_.contains(pampersMonthProductIds, +prod_ids[0])) {
					initPBTrackingPixel();
					api.getProduct(prod_ids[0], function(prod) {
						var value = quantity * prod.price_gross / 100;
						window._fbq.push(['track', '6025342373861', {'value': value.toFixed(2), 'currency': 'PLN'}]);
					});
				}
			};

			if(products) {
				var reqData = {};
				$.each(products, function(i, productId){
					reqData[productId] = { action: 'inc', amount: 1 };
				});
// 				var cd = friscoStorage.getShallow('cartData');
// 				$.each(cd.entries, function(i, e) { 
// 					reqData[i] ? reqData[i] += e.amount : reqData[i] = e.amount; 
// 				});
// 				_.each(cd.entries, function(v){
// 					if (reqData[v.product_id])
// 						reqData[v.product_id] = v.amount + 1;
// 				});
				//FIXME: timers FTW!!!
				api.updateProductsInCart(reqData, true, function(data) {
					frisco.afterCartChanged(null, data);
				});
				traceCart(_.keys(reqData));
				return;
			}

			var cartMode = (core.getCurrentState() == 'cart');
			var timerName = 'cartAddTimer_' + productId;
			var context = friscoTimer.getTimerContext(timerName);
			if (context && typeof context['quantity']) {
				quantity += context['quantity'];
			}

			friscoTimer.initAfter(timerName, CLICKING_DELAY, function() {
				api.addProductAmount2Cart(productId, quantity, frisco.afterCartChanged);
				
				try {
					var cartData = friscoStorage.getShallow('cartData');
					if (cartData.itemsCount == 0) {
						DBG('productsList::addf', 'Rum: first product in cart');
						Rum.rumEvent(Rum.FIRST_PRODUCT_EVENT, productId, loggedUserId);
					}
				} catch (e) {}
				
				if (cartMode && _gaq && _gaq.push) {
					_gaq.push(['_trackEvent', 'Checkout', 'Koszyk', 'Plus']);
				} else {
					traceCart([productId], gaAttr, quantity);
				}
			}, {'productId': productId, 'quantity': quantity});
		},
		
		bindProductsList : function() {
			var addButtons = $('.addToCart > a.add');
			var multiAddButtons = $('.addToCart > a.multiple');
			var increaseButtons = $('.amountCart > a.increase');
			var decreaseButtons = $('.amountCart > a.decrease');
			var removeButtons = $('.amountCart > a.remove');
			
// 			if (Sidebar.getRenderedContent()) { // DONT do it this way
// 				var cartStatus = Sidebar.getRenderedContent().find('div.cartDetails').length;  
// 			}
// 			var cartStatus = Sidebar.slot1ContentId == "cart" // DO it this way, if ever needed 
			
			var checkIfFriscoVan = function(products, addFn, button) {
				if(!frisco.currentPostcode && products.is('.product-van-only')) {
					var handler = products.filter('.product-van-only').eq(0).find('.popup-handler');
					if (handler.length)
						frisco.postCodePopup(handler, true, function() { addFn.call(button) });
					else
						frisco.postCodePopup($('body'), true, function() { addFn.call(button) }, products.filter('.product-van-only').eq(0));
				} else {
					addFn.call(button);
				}
			};

			var addf = function() {
				DBG('bindProductsList', 'addButtons event firing...');
				var product = $(this).closest(".productId");
				if (!product || !product.length) {
					product = $(this).closest("div[product_id]");
				}
				var productId = parseInt(product.attr('product_id'));
				var quantity = parseInt($(this).siblings("input").val());
				var gaAttr = $(this).attr("ga");
				
				frisco.addProductToCart(productId, quantity, gaAttr);
			};
			addButtons.live("click", function() { 
				checkIfFriscoVan($(this).closest(".productId"), addf, this); 
			});
			
			// TODO: fix this, plz!!!!
			var multi_addf = function() {
				var products = [];
				$(this).closest('.summary').siblings('.products').find('.productId').each(function(i, e){
					var id = parseInt($(e).attr('product_id'));
					products.push(id);
				});
				frisco.addProductToCart(products);
			};

			multiAddButtons.live("click", function(){
				var products = $(this).closest('.summary').siblings('.products').find('.productId');
				checkIfFriscoVan(products, multi_addf, this);
			});

			var incrf = function() {
				DBG('bindProductsList', 'increaseButtons event firing...');
				var product = $(this).closest(".productId");
				if (!product || !product.length) {
					product = $(this).closest("div[product_id]");
				}
				var productId = parseInt(product.attr('product_id'));
				var quantity = parseInt($(this).siblings("input").val());

				var cartMode = (core.getCurrentState() == 'cart');
				var timerName = 'cartAddTimer_' + productId;
				var context = friscoTimer.getTimerContext(timerName);
				if (context && typeof context['quantity']) {
					quantity += context['quantity'];
				}
				
				friscoTimer.initAfter(timerName, CLICKING_DELAY, function() {
					api.addProductAmount2Cart(productId, quantity, frisco.afterCartChanged);
					if (cartMode && _gaq && _gaq.push) {
						_gaq.push(['_trackEvent', 'Checkout', 'Koszyk', 'Plus']);
					}
				}, {'productId': productId, 'quantity': quantity});
			};
			increaseButtons.live("click", incrf);
			
			var decrf = function() {
				var product = $(this).closest(".productId");
				var productId = parseInt(product.attr('product_id'));
				
				var cartMode = (core.getCurrentState() == 'cart');
				var timerName = 'cartRemoveTimer_' + productId;
				var context = friscoTimer.getTimerContext(timerName);
				var quantity = 1;
				if (context && typeof context['quantity']) {
					quantity += context['quantity'];
				}
				friscoTimer.initAfter(timerName, CLICKING_DELAY, function() {
					api.removeProductAmountFromCart(productId, quantity, frisco.afterCartChanged);
					if (cartMode && _gaq && _gaq.push) {
						_gaq.push(['_trackEvent', 'Checkout', 'Koszyk', 'Minus']);
					}
				}, {'productId': productId, 'quantity': quantity});
			};
			decreaseButtons.live("click", decrf);
			
			var remf = function() {
				var product = $(this).closest(".productId");
				var productId = parseInt(product.attr('product_id'));
				
				var cartMode = (core.getCurrentState() == 'cart');
				friscoTimer.stop('cartAddTimer_' + productId);
				friscoTimer.stop('cartRemoveTimer_' + productId);
				
				api.removeProductFromCart(productId, frisco.afterCartChanged);
				if (cartMode && _gaq && _gaq.push) {
					_gaq.push(['_trackEvent', 'Checkout', 'Koszyk', 'Usun']);
				}
			};
			removeButtons.live("click", remf);
		},
		
		bindCartList : function() {
			var incButtons = $('.cartDetails a.amountInc');
			var decButtons = $('.cartDetails a.amountDec');
			var removeButtons = $('.cartDetails a.removeFromCart');
			var showDetails = $('.cartDetails h3 a');
			
			if (_gaq && _gaq.push) {
				showDetails.live("click", function() {
					_gaq.push(['_trackEvent', 'Pasek-boczny', 'Koszyk', 'Produkt']);
					return true;
				});
			}

			incButtons.live("click", function() {
				var product = $(this).closest("li");
				var productId = parseInt(product.attr('product_id'));
// 				var cart = $('div.cartDetails');
// 				var cartStatus = cart.length;
				
				var timerName = 'cartAddTimer_' + productId;
				var context = friscoTimer.getTimerContext(timerName);
				var quantity = 1;
				
				if (context && typeof context['quantity']) {
					quantity += context['quantity'];
				}
				friscoTimer.initAfter(timerName, CLICKING_DELAY, function() {
					api.addProductAmount2Cart(productId, quantity, frisco.afterCartChanged);
				}, {'productId': productId, 'quantity': quantity});
				
				if (_gaq && _gaq.push) {
					_gaq.push(['_trackEvent','Pasek-boczny','Koszyk','Plus']);
				}
			});
			
			decButtons.live("click", function() {
				var product = $(this).closest("li");
				var productId = parseInt(product.attr('product_id'));
				
				var timerName = 'cartAddTimer_' + productId;
				var context = friscoTimer.getTimerContext(timerName);
				var quantity = 1;
				
				if (context && typeof context['quantity']) {
					quantity += context['quantity'];
				}
				friscoTimer.initAfter(timerName, CLICKING_DELAY, function() {
					api.removeProductAmountFromCart(productId,quantity, frisco.afterCartChanged);
				}, {'productId': productId, 'quantity': quantity});
				
				if (_gaq && _gaq.push) {
					_gaq.push(['_trackEvent','Pasek-boczny','Koszyk','Minus']);
				}
			});
			
			removeButtons.live("click", function() {
				var product = $(this).closest("li");
				var productId = parseInt(product.attr('product_id'));
				
				friscoTimer.stop('cartAddTimer_' + productId);
				friscoTimer.stop('cartRemoveTimer_' + productId);
				api.removeProductFromCart(productId, frisco.afterCartChanged);
				
				if (_gaq && _gaq.push) {
					_gaq.push(['_trackEvent','Pasek-boczny','Koszyk','Usun']);
				}
			});
		},
		
		changeTermOfDelivery : function() {
			$('#deliveryTime').bind("click", function(){
				if (_gaq && _gaq.push) {
					_gaq.push(['_trackEvent','Pasek-boczny','Termin-dostawy','Wybierz']);
				}
				renderDatePicker(true);
				return false;
			});
			
			$('#homeTermOfReservation a.book').live("click", function(){
				if (_gaq && _gaq.push) {
					_gaq.push(['_trackEvent','Pasek-boczny','Termin-dostawy','Wybierz']);
				}
				renderDatePicker(true);
				return false;
			});
			
			$('#reservedDeliveryTime').live("click", function(){
				if (_gaq && _gaq.push) {
					_gaq.push(['_trackEvent','Pasek-boczny','Termin-dostawy','Zmien']);
				}
				renderDatePicker(false);
			});
			
			$('#homeTermOfReservation a.changeTermOfDelivery').live("click", function(){
				if (_gaq && _gaq.push) {
					_gaq.push(['_trackEvent','Pasek-boczny','Termin-dostawy','Zmien']);
				}
				renderDatePicker(false);
			});
		},
		showCartDetails : function() {
			var cartButtons = $('div.showCartDetails');
			cartButtons.on("click", function() {
				var showFunc = function(cartData) {
					if (Sidebar.isVisible())
						Sidebar.render(false, ''); // enforce switch to cart view, in order to do that we have to reset content
					
					Sidebar.show();
					renderSliderCartContent();
					
					// Sociomantic
					if (frisco.useTrackingCode("sociomantic"))
					try {
						var sociomantic_products = [];
						for (i in cartData.entries) {
							var orderItem = cartData.entries[i].product;
							sociomantic_products.push({identifier: orderItem.product_id, amount: (orderItem.price_gross / 100).toFixed(2), currency: 'PLN', quantity: cartData.entries[i].amount});
						}
						sociomantic.sonar.adv['frisco-pl'].clear();
						if (loggedUserId) window.customer = {identifier: loggedUserId};
						window.basket = {products: sociomantic_products};
						sociomantic.sonar.adv['frisco-pl'].track();
					} catch (e) {}
				}
				if (_gaq && _gaq.push) {
					_gaq.push(['_trackEvent','Pasek-boczny','Koszyk','Zobacz']);
				}
				
				var params = {};
				params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = showFunc;
				friscoStorage.get('cartData', params);
			});
			
			// Bind here and not in handler above to not register event handler multiple times.
			if (_gaq && _gaq.push) {
				$("#page_sidebar").on("click", ".cartDetails.sidebar > h2 > a", function(){ 
					_gaq.push(['_trackEvent','Pasek-boczny','Koszyk','Pokaz-koszyk']);
					return true;
				});
			}
			$("#page_sidebar").on("click", ".cartDetails.sidebar a.checkout", function(){ 
				if (_gaq && _gaq.push)
					_gaq.push(['_trackEvent','Pasek-boczny','Zamawiam','Koszyk']);
				core.setState('checkout', null, {}, undefined, !loggedUserId); // !loggedUserId -> Special trackPageview event in loadCheckout
				return false;
			});
		},
		
		// this is such an utter crap that it had to be shot out
		checkUnavailableProducts : function() {
// 			$("ul.products li.unavailable.withdrawn").each(function(index) {
// 				var indexOfElement = $(this).index() + 1;
// 
// 				var productWidth = $(this).outerWidth(true);
// 				var contentWidth = $('ul#products').width();
// 				var productsInLine = parseInt(contentWidth / productWidth);
// 
// 				if(indexOfElement % productsInLine == 0){
// 					$(this).before("<li class='empty'><div></div></li>")
// 				};
// 			});
		},

        forceLoadNavigationSubtree : function(e) {
            return __loadNavigationSubtree(e);
        },
        /**
         * Initializes behavior for header categories menu
         */
        mainNavigation : function() {
            var samplingFreq = 25;
            var mouseLastX = 0;
            var currentX = 0;
            var dX = 0;
            var mouseTimeout;
            var hoverTimeout;
            var closeTimeout;
            $('#navigation').bind('mousemove', function(event) { currentX =  event.pageX; });
            var trackMouse = function() {
                dX = Math.abs(mouseLastX - currentX);
                mouseLastX = currentX;
                mouseTimeout = setTimeout(trackMouse, samplingFreq);
            };
            var onIntentHover = function(fn) {
                clearTimeout(hoverTimeout);
                var check;
                check = function() {
                    if(dX < 10) {
                        fn();
                    } else {
                        hoverTimeout = setTimeout(check, samplingFreq);
                    }
                };
                hoverTimeout = setTimeout(check, samplingFreq);
            };
            var closeMenu = function() {
                $('#navigation').removeClass('active');
                $('#navigation .active').removeClass('active');
                $('#navigation').removeClass('expand1 expand2 expand2a');
                $("#navigation .navigation-border").css("minHeight", 0);
                $("#navigation .level-2").css("minHeight", 300);
                $('#navigation .active-div').removeClass('active-div');
            }
            $('#navigation').bind('mouseenter touchend', function() {
                mouseTimeout = setTimeout(trackMouse, samplingFreq);
                $(this).addClass('active');
                clearTimeout(closeTimeout);
            });
            $('body').bind('touchend', function(e) {
                if(!$(e.target).parents('#navigation').length) {
                    closeTimeout = setTimeout(closeMenu, 1);
                }
            });
            $('#navigation').bind('mouseleave', function() {
                clearTimeout(mouseTimeout);
                closeTimeout = setTimeout(closeMenu, 250);
            });
            $('#navigation li').live('mouseenter touchend', function(e) {
                var el = this;
                onIntentHover(function(){
                    if(!$('#navigation').is('.active')) {
                        return;
                    }
                    $('#navigation .active').removeClass('active');
                    $('#navigation .active-div').removeClass('active-div');
                    $(el).addClass('active');
                    $(el).parents('#navigation li').addClass('active');
                    if($(el).hasClass('has-submenu')) {
                        $('#navigation').addClass('expand1');
                    }
                    if(!$(el).hasClass('greyout'))
                        $(el).parents('.level-2').addClass('active-div');

                    $('#navigation').toggleClass('expand2', !!$(el).closest('.submenu-one-col').length);
                    $('#navigation').toggleClass('expand2a', !!$(el).closest('.submenu-two-cols').length);
                    
                    var shops = $(el).hasClass('with-shops');
                    $('#navigation').toggleClass('with-shops', shops);
                    if (shops) {
                        var num = $(el).children("[rel_c]").attr("rel_c").split(":")[1];
                        var shops = $("#menu-shops a").hide();
                        shops.filter(".cat-" + num).show();
                    }

                    var minHeight = 0;
                    if($(el).parent().is('.level-1')) {
                        minHeight = Math.max($(el).find(".level-2 ul").first().height(), $(el).find(".level-2 .category-promotion.enabled a").height());
                    }
                    if($(el).parent().parent().is('.level-2')) {
                        minHeight = $(el).parents(".level-2 > ul").first().height();
                        var h = $(el).find(".level-3 ul").first().height();
                        if(h > minHeight) { minHeight = h; }
                    }
                    if(minHeight) {
	                    $("#navigation .navigation-border").css("minHeight", minHeight + 50);
	                    $("#navigation .level-2").css("minHeight", Math.max($('#navigation .level-1').height(), minHeight + 13));
	                }
                });
                if(e.type == 'touchend' && !$(this).is('.has-submenu')) { $(this).find('a').click(); }
                return $(this).is('.active');
            });
            $('#navigation li').live('mouseleave', function(e) {
                clearTimeout(hoverTimeout);
            });

            $('#navigation a').live('click', function() {
                if (_gaq && _gaq.push) {
                    var depth = parseInt(($(this).attr("rel_c") || "").split(":")[0])-2;
                    if(depth <= 2) {
                        _gaq.push(['_trackEvent','Serwis','Nawigacja','Menu',depth]);
                    }
                }
                closeMenu();
            });
        },

        /**
         * Fills navigation gadget with data, but does not care about styling or behaviour.
         */
        loadNavigation : function() {
            __loadNavigationSubtree($('#navigation ul'));
            frisco.mainNavigation();
        },

        bindPostcodeForm: function(form, callback) {
            $(form).validate({
                rules: {
                    postcode1: {required: true, digits: true, minlength: 2, maxlength : 2},
                    postcode2: {required: true, digits: true, minlength: 3, maxlength : 3}
                },
                highlight: function(el) { $(el).parent().addClass('error'); },
                unhighlight: function(el) { $(el).parent().removeClass('error'); },
                errorPlacement: function() {},
                submitHandler: function(f) {
					var old = frisco.currentPostcode;
					frisco.currentPostcode = $(f).find('[name=postcode1]').val() + '-' + $(f).find('[name=postcode2]').val();
					$.cookie('postcode', frisco.currentPostcode, { path : '/', expires: 762 });
					actionCheckPostcode(old, frisco.currentPostcode);
					
					if (_gaq && _gaq.push) {
						var place, state = core.getCurrentState();
						if (state == 'product')
							place = 'Karta-produktu';
						else if (state == 'searchResults')
							place = 'Kategoria';
						else if (state == 'iList')
							place = 'Najczesciej-kupowane';
						else
							place = 'Serwis';
						_gaq.push(['_trackEvent', place, 'Kod-pocztowy', frisco.currentPostcode]);
					}
                    callback();
                }
            });
            $(form).find('[name=postcode1]').keyup(function() {
                var val = $(this).val();
                if(val.length == 2) $(form).find('[name=postcode2]').focus();
                if(val.length > 2) $(this).val(val.substr(0, 2));
            });
            $(form).find('[name=postcode2]').keyup(function(e) {
                var val = $(this).val();
                if(val.length == 0 && e.keyCode == 8) $(form).find('[name=postcode1]').focus();
                if(val.length > 3) $(this).val(val.substr(0, 3));
            });
        },

		bindLoginPopup: function() {
			$('#login-form').attr('action', session.login_url);
			$('#login-form').validate({
				rules: {
					username: {required: true},
					password: {required: true}
				},
				highlight: function(el) { $(el).parent().addClass('error'); },
				unhighlight: function(el) { $(el).parent().removeClass('error'); },
				errorPlacement: function() {},
				submitHandler: function(form) {
// 					Rum.rumEvent(Rum.EMAIL_DROP_EVENT, form.username.value+"|login-form", loggedUserId);
					form.password.value = $.trim(form.password.value);
					form.submit();
				}
			});
			$('#login-form input[type=submit]').click(function() {
				$.cookie('sendRumLogin', true, {path : '/', expires: 762});
				$('#login-form input[type=hidden][name=origin]').val(window.location);
			});
			$('.error-message a').click(function() { $(this).parents('.error').removeClass('error'); });
			$('#login-form a.forgot, #forgot-form a.not-forgot').click(function() {
				$('#login-form, #forgot-form').toggle();
				$('#login-form .msg, #forgot-form .msg').html('');
				$('#login-form .error, #forgot-form .error').removeClass('error');
				$('#login-form .err').removeClass('err');
				return false;
			});
			$('#login-form a.new_account').click(function(e) {
				$('#popup-welcome').hide();
				frisco.loginRegisterAction(e.srcElement || e.target, {fullLoad : true});
			});
			$('#forgot-form').validate({
				rules: {username: {required: true}},
				highlight: function(el) { $(el).parent().addClass('error'); },
				unhighlight: function(el) { $(el).parent().removeClass('error'); },
				errorPlacement: function() {},
				submitHandler: function() {
					var email = $("#forgot-form input[name=username]").val();
					apiUsers.resetPasswordRequest(email, function(data) {
						if (!data) {
							$("#forgot-form .msg").html('<p>'+__("Wystąpił błąd, sprawdź poprawność danych")+'</p>');
						} else {
							$('#login-form, #forgot-form').toggle();
							$("#login-form .msg").html('<p>'+__("Link do wygenerowania nowego hasła został wysłany na podany adres email")+'</p>');
// 							Popup.loadMessage({ messageId: Popup.MESSAGES.PASSWORD_RESET_LINK_SENT, timeout: Popup.TIMEOUT.NORMAL });
						}
					});
				}
			});
			$('#popup-login .close, #popup-welcome .close').click(function() {
				$('#popup-login, #popup-welcome, #popupbackground').remove();
				if (core.getCurrentState() != '' && core.getCurrentState() != 'defaultState' && core.getCurrentState() != 'register') // the latter is for popup on account activation landing
					core.setState('defaultState');
			});
		},

		friscoVanAvailable: function(callback, code) {
			// if callback is not specified, just return the answer
			if (typeof(callback) === 'undefined') callback = function(x) { return x; };
			var postcode = code || frisco.currentPostcode || $.cookie('postcode') || '';
			if (_.isBoolean(postCodeVanCache[postcode]))
				return callback(postCodeVanCache[postcode]);
			var answer = (postcode.match(/\d\d-\d\d\d([-+])/) || [])[1];
			if(answer || !postcode.match(/\d\d-\d\d\d/)) {
				return callback(!postcode || answer === '+');
			}
			api.checkupDeliveryAddress(postcode, function(res) {
				var available = res && ((res.x && res.y) || (res.route && res.route > 0));
				postCodeVanCache[postcode] = !!available;
				if (!code) {
					frisco.currentPostcode = postcode + (available ? '+' : '-');
					$.cookie('postcode', frisco.currentPostcode, {path : '/', expires: 762});
				}
				return callback(!!available);
			});
		},
        
		onNoResults: function(query, container) {
// 			container.empty().html("<strong>NIC</strong> NIE ZNALEZIONO DLA ZAPYTANIA '" + query + "'!");
			$("#fablo_content").hide();
			if (loggedUserId) {
				userProfile = friscoStorage.getShallow('userProfile');
				$("#page_content").jqotesub(templates.product_not_found, {query: query, email: userProfile.email}).show();
			} else {
				$("#page_content").jqotesub(templates.product_not_found, {query: query}).show();
			}
			
			$("#sendMsgToBOK").live("click", function() {
				if ( $(this).data("locked") )
					return;
				
				var nulls = false;
				if ( $("input#msgMail").val() == "" ) {
					$("input#msgMail").addClass("error").prev().addClass("error"); nulls = true; 
				}
// 				if ( $("input#msgSubject").val() == "" ) {
// 					$("input#msgSubject").addClass("error").prev().addClass("error"); nulls = true; 
// 				}
				if ( $("textarea#msgContent").val() == "" ) {
					$("textarea#msgContent").addClass("error").prev().addClass("error"); nulls = true; 
				}
				
				if (nulls) return;
				
				var email = $("input#msgMail").val();
				var title = "Zgłoszenie braku produktów ze strony WWW"; // $("input#msgSubject").val();
				var content = $("textarea#msgContent").val();
				
				$(this).data("locked", true);
				
				api.sendMailToSupport(email, title, content, function(res) {
					if (res) {
						Popup.load({content: __("Dziękujemy, twoje uwagi zostały przekazane do Biura Obsługi Klienta."), size: Popup.SIZE.FLASH, type: Popup.TYPE.MESSAGE, timeout: Popup.TIMEOUT.NORMAL});
						$("#supportForm").hide();
						$("#afterMessageMsg").show();
					} else {
						Popup.load({content: __("Przepraszamy, wysyłanie wiadomości do Biura Obsługi Klienta nie powiodło się. Spróbuj ponownie."), size: Popup.SIZE.FLASH, type: Popup.TYPE.WARNING, timeout: Popup.TIMEOUT.NORMAL});
					}
				});
			});
			
			$(".form_bok span.error").live("click", function() {
				$(this).parent().removeClass("error").next().removeClass("error");
			});
			$(".form_bok input.error, .form_bok textarea.error").live("click", function() {
				$(this).removeClass("error").prev().removeClass("error");
			});
			
			var recommended = friscoStorage.get("promoproducts");
			api.getProducts(recommended['promoted'], function(prods) {
				frisco.renderProducts($("#notFoundPromoted"), prods);
				$("#notFoundPromotedHeader").show();
			});
				
// 			$("#page_content").jqoteapp(frisco.getTemplate('footer_content'), {});
		},

		setUsersPostcode: function(callback) {
			var old = frisco.currentPostcode;
			if (loggedUserId) {
				var num = friscoStorage.get('checkoutAddressNo');
				var address = $.grep(friscoStorage.get('deliveryAddresses'), function(x) { return x.address_no == num; })[0];
				frisco.currentPostcode = (address && address.postcode.replace(/(\d\d)(\d\d\d)/, "$1-$2")) || '';
			}
			var from_cookie = $.cookie('postcode');
			if (from_cookie && from_cookie.indexOf(frisco.currentPostcode) === 0)
				frisco.currentPostcode = from_cookie; // Cookie value contains availability info, why not use it?
			else
				frisco.currentPostcode = frisco.currentPostcode || from_cookie || '';
			actionCheckPostcode(old, frisco.currentPostcode);
			$('#header-postcode').html(frisco.currentPostcode.substr(0, 6) || '&mdash;');
			$('#top-line li.postcode .act').text(frisco.currentPostcode ? '' : 'podaj kod pocztowy');
			
			frisco.friscoVanAvailable(function(available) {
				$('#navigation .category-van-only, .if-van').toggle(available);
				$('.if-not-van').toggle(!available);
				$('body').toggleClass('show-van-only', !available);
				
				bindDeliveryMinimalPrice();
				
				if (FabloConfig.vanOnly) {
					FabloConfig.vanOnly(available);
				}
				if (callback) {
					callback(available);
				}
			});
		},

        postCodePopup: function(elem, forProduct, onAvaibleVan, positionElem) {
            $('#postcode-tooltip').remove();
            var otherVanReason = elem.is('.other-van-reason');
            elem.jqoteapp(templates.postcode_tooltip_v1, {forProduct: forProduct, otherVanReason: otherVanReason});
            if(forProduct) {
                var left = $('#postcode-tooltip').offset().left;
                if(left < 300) {
                    $('#postcode-tooltip').css('left', -23);
                }
                if(left > $(window).width()) {
                    $('#postcode-tooltip').css('left', -120);
                }
            };
			if (positionElem) {
				var off = positionElem.offset();
				off.left -= 100;
				if(off.left + $('#postcode-tooltip').width() > $(window).width())
					off.left -= 200;
				$('#postcode-tooltip').css('left', off.left);
				$('#postcode-tooltip').css('top', off.top + 250);
			}
            $("#postcode-tooltip .close").click(function() {
                $('#postcode-tooltip').remove();
                if(forProduct && frisco.currentPostcode) {
                    frisco.setUsersPostcode(function(available) {
                        if(available) { onAvaibleVan(); }
                    });
                }
            });
            if(loggedUserId) {
                $('#postcode-logged-edit').show();
                $('#postcode-without-friscovan .back').click(function() { $('#postcode-logged-edit, #postcode-without-friscovan').toggle(); });
                addressesEditor();
                setTimeout(function() { Sidebar.hide(); }, 1);
                $(".deliveryAddresses ul.addresses").addClass("editable");
                $(".deliveryAddresses ul.addresses li[address_no]").click(function() {
                    setTimeout(function () {
                        Sidebar.hide();
                        frisco.setUsersPostcode(function(available) {
                            $(".deliveryAddresses ul.addresses").addClass("editable");
                            if(available) {
                                $('#postcode-tooltip').remove();
                            } else {
                                $('#postcode-logged-edit, #postcode-without-friscovan').toggle();
                            }
                        });
                    },1);
                });
            } else {
                $('#postcode-edit').show();
                $('#postcode-without-friscovan .back').click(function() { $('#postcode-edit, #postcode-without-friscovan').toggle(); });
                frisco.bindPostcodeForm($("#postcode-tooltip form"), function() {
                    frisco.friscoVanAvailable(function(available) {
                        if(available) {
                            if(!forProduct) {
                                $('#postcode-tooltip').remove();
                            } else {
                                $('#postcode-edit, #postcode-success').toggle();
                            }
                        } else {
                            $('#postcode-edit, #postcode-without-friscovan').toggle();
                        }
                        if(!forProduct) {
                            frisco.setUsersPostcode();
                        }
                    });
                });
            }
        },

        displayPostCode: function() {
            $('#top-line').addClass('with-postcode');
            $('#top-line .top-slogan').remove();
            $('#top-line ul.page-tools').append('<li class="postcode">Kod pocztowy: <a href="#"><span id="header-postcode">&mdash;</span> <span class="act"></span></a></li>');
            frisco.setUsersPostcode();

            $('#top-line li.postcode > a').click(function() {
                var li = $(this).parent();
                frisco.postCodePopup(li);
            });
        },

		loginRegisterAction : function(elem, params) {
			if (params && params.fullLoad) {
				if (elem && ($(elem).hasClass('new_account') || $(elem).hasClass('register')) || core.getCurrentState() == 'register')
					$('body').jqoteapp(templates.login_or_checkout, {type: "register"});
				else 
					$('body').jqoteapp(templates.login_or_checkout, {type: "login"});
				$(window).scrollTop(0);
				$('#popup-login .close, #popup-welcome .close').click(function() {
					$('#popup-login, #popup-welcome, #popupbackground').remove();
				});
			} else {
				$('#up-bottom').remove();
				$('#popup-welcome').hide();
				$('#popup-login').show();
			}
			$('#popup-login #box-login').toggleClass('without-password', elem && $(elem).is('.not-register'));
			if (elem && $(elem).is('.not-register')) {
				var passwd = (new Date()).getTime().toString(32) + Math.floor(Math.random()*10000000).toString(32);
				$('#registerContent input[name=password], #registerContent input[name=repeatPassword]').val(passwd);
				$('#registerContent input[name=regtype]').val('2');
				$('#registerContent .name-fields').detach().insertBefore('#registerContent .email-passwd-fields');
			} else {
				$('#registerContent input[name=regtype]').val('1');
				$('#registerContent .name-fields').detach().insertAfter('#registerContent .email-passwd-fields');
			}
			
			var registerCb = function(response) {
				if (response.user_id) {
					if (params.popupBound && _gaq && _gaq.push) {
						_gaq.push(['_trackPageview',  $(elem).is('.not-register') ? '/niezalogowany-warstwa-kupuj-bez-rejestracji-ok' : '/niezalogowany-warstwa-pomyslne-zalozenie-konta']);
					}
					$('form#login-form input[name="username"]').val($('#registerContent input[name="email"]').val());
					$('form#login-form input[name="password"]').val($('#registerContent input[name="password"]').val());
					if (core.getCurrentState() != 'checkout') {
						$('form#login-form input[name="origin"]').val(document.location.origin + '/stn,register');
					} else 
						$('form#login-form input[name="origin"]').val(document.location.href);
						
					$('form#login-form').submit();
				} else {
					$('#submit-buttons').show();
					$('#submit-loader').hide();
				}
			};
			var onSubmit = function() {
				$('#submit-buttons').hide();
				$('#submit-loader').show();
			};
			
			if (!params || !params.popupBound || params.fullLoad)
				frisco.bindLoginPopup();
			bindRegisterValidations(true, registerCb, onSubmit);
			
			$("#showPopupRegulations").live('click', function() {
				var content = $.jqote(templates.regulation_content, {compactTemplate: true});
				Popup.load({ title : __("Regulamin supermarketu internetowego Frisco"), content: $(content).find("div.content").addClass("article regulation")[0], size: Popup.SIZE.FULLSIZE, type: Popup.TYPE.MESSAGE, /*timeout: Popup.TIMEOUT.NORMAL*/ });
			});
			$("#box-login span.error-message a").live("click", function() { 
				$(this).parent().remove(); 
				return false; 
			});
			
			// toggle invoice fields
			$("#invoice-fields #invoice-radio input:radio").live('change', function() {
				$("#invoice-fields").toggleClass('expanded', $(this).val() == 'yes');
			});
		},
		
		loginOrCheckoutPopup: function() {
			$('body').jqoteapp(templates.login_or_checkout, {type: "login"});
			$(window).scrollTop(0);
			frisco.bindLoginPopup();
			$('#popup-welcome a.register, #popup-welcome a.not-register').click(function(e) {
				var target = e.srcElement || e.target || this;
				if (!loggedUserId && _gaq && _gaq.push)
					_gaq.push(['_trackPageview',  $(target).is('.not-register') ? '/niezalogowany-warstwa-kupuj-bez-rejestracji' : '/niezalogowany-warstwa-zaloz-konto']);
				frisco.loginRegisterAction(target, {popupBound : true});
			});
		},

		loginPopup: function() {
			$('#popupbackground, #popup-welcome, #popup-login').remove();
			$('body').jqoteapp(templates.login_popup, {type: "login"});
			$('#box .close').click(function(e) {
				$('#popupbackground, #popup-welcome').remove();
				if(core.getCurrentState() =='checkout') core.setState('defaultState');
				e.stopImmediatePropagation();
				return false;
			});
			frisco.bindLoginPopup();

			if(core.getParam('info_loginAttempt') == 'failed') {
				$('#login-form .msg').html('<p>'+__('Logowanie nie powiodło się. Sprawdź login oraz hasło.')+'</p>');
				$('#login-form .msg').addClass('err');
			}
			if(core.getParam('info_lastLogin')) {
				$('#login-form input[name=username]').val(core.getParam('info_lastLogin'));
			}
		},

		lightBoxForFirstimers : function() {
			var inFrame;
			if (window!=window.top) { inFrame = true; }
			else { inFrame = false; }

			var firstTimeClient = $.cookie('fc');
			var showed = $.cookie('lightBoxForFirstimers');
			var curState = core.getCurrentState();
			
			if (!loggedUserId && showed == null && firstTimeClient == null && curState != "tdRedirect" && !isClaimBonusLP(curState)
				&& curState != "tdActivation" && curState != "afterSalesSurvey" && curState != "odbierz-swoj-prezent" && inFrame == false  ) {
				
				// check if this tradedoubler traffic
				if (tradedoubler.isTradedoublerActive()) 
					var param = { src : "tradedoubler" };
				else {
					//var param = { src : "firstimers" };
					var param = {
						src : "firstimers", //201411outdoor
						template: "mailling_content_201411outdoor"
					};
				}

				// Display popup only after user scroll site
				/*friscoEvents.hook("firsttimersLightbox", friscoEvents.FEV_PARALLAX_SCROLL, function(){
					tdLandingPage(curState, core.getCurrentSubstate(), param);
				}, {type: friscoEvents.FEV_TYPE_ONETIME});
				$(window).scroll(function() {
					friscoEvents.fire('parallax', friscoEvents.FEV_PARALLAX_SCROLL, {});
				});*/
				tdLandingPage(curState, core.getCurrentSubstate(), param);

				$.cookie('lightBoxForFirstimers', 'showed', { path : '/', expires: 762 });
				$('.show-for-first-timers').show();
			}
		},
		/**
		* show details of product
		*/
		slideContent : function(current) {
			var details = current.siblings("div");

			if (jQuery.support.animation == true) { details.css("display","block"); }
			if (details.hasClass("active") || details.hasClass("visible")) {
				if (jQuery.support.animation == true) {
					$('ul#product-list div.details.visible').addClass("hidden").removeClass("visible");
					$('#cartDetails.visible').addClass("hidden").removeClass("visible");
				}
				else {
					details.animate({
						right: '-350px'
					}, 400, function(){
						$('ul#product-list div.details.active').removeClass("active");
						$('#cartDetails.active').removeClass("active");
					});
				}
			} else {
				if (jQuery.support.animation == true) {
						$('ul#product-list div.details.visible').removeClass("visible");
						details.removeClass("hidden").addClass("visible");
				}
				else {
					$('ul#product-list div.details.active').css("right","-350px").removeClass("active");
					details.addClass("active");
					details.animate({
						right: '-5px'
					}, 400);
				}
				if( details.attr("id") != "cartDetails" ) {
					$('#cartDetails.visible').css("right","-350px").removeClass("visible");
					$('#cartDetails.active').css("right","-350px").removeClass("active");
				}
			}
			return false;
		},
		/**
		* close details of product
		*/
		closeSlideContent : function(current) {
			var details = current;
			if (details.hasClass("active") || details.hasClass("visible")) {
					if (jQuery.support.animation == true) {
						details.addClass("hidden").removeClass("visible");
					}
					else {
						details.animate({
							right: '-350px'
						}, 400, function() {
							details.removeClass("active");
						});
					}
			}
		},

		bindLoginBox : function() {
			$('div.userPanel a.login').live("click", function(e) { 
				frisco.loginPopup();
			});
			$('div.userPanel a.register').live("click", function(e) { 
				e.preventDefault();
				frisco.loginRegisterAction(e.srcElement||e.target, {fullLoad: true});
			});
		},
		
		showSettingsBox : function() {
			var button = $('div.userPanel a#username');

			$('div.userPanel div.settings.active').live("click", function(event) {
				event.stopImmediatePropagation();
			});

			button.click("click", function(event) {
				event.stopImmediatePropagation();
				if ($('div.userPanel div.settings').hasClass("active")) {
					$('div.userPanel div.settings').removeClass("active");
				} else {
					$('div.userPanel div.settings').addClass("active");
				}
				return false;
			});

			$("div.userPanel div.settings a").click(function(){
					$('div.userPanel div.settings.active').removeClass("active");
			});
			$(document).click(function(){
					$('div.userPanel div.settings.active').removeClass("active");
			});
		},

		bindAddToListBox : function() {
			$('.addToList.noActive > a').live("mouseover", function() { 
				$(this).siblings("div.notLogged").show();
			});
			$('.addToList.noActive > a').live("mouseout", function() { 
				$(this).siblings("div.notLogged").hide();
			});
			
			if (loggedUserId) {
				var button = $('.addToList > a');
				$('.addToList > div.content.active').live("click", function(event) {
					event.stopImmediatePropagation();
				});
				
				button.live("click", function(event) {
					event.stopPropagation();
					event.stopImmediatePropagation();
					if (_gaq && _gaq.push) {
						if($(this).closest(".productShelf").length){
							_gaq.push(['_trackEvent','Lista-produktow','Lista-zakupow','Dodaj']);
						} else if($(this).closest(".productSlider").length) {
							_gaq.push(['_trackEvent','Karta-produktu-toplayer','Lista-zakupow','Dodaj']);
						}
					}
					var addAllFromCart = $(this).parent().hasClass('cart');
					if ($(this).siblings('div.content').hasClass("active")) {
						$(this).siblings('div.content').removeClass("active");
					} else {
						$(this).siblings('div.content').children("ul").hide();
						$(this).siblings('div.content').children("div").hide();
						$(this).siblings('div.content').addClass("active");
						
						// here we show content
						var product_id = $(this).attr('data-product_id');
						var container = $(this).siblings('div.content');
						api.getUserShoppingLists(session.user_id, null, null, null, function(lists) {
							container.find('.newList .okButton').click(function(event){
								event.stopImmediatePropagation();
								var name = container.find('.newList input').val();
								var productList = {};
								if (addAllFromCart) {
									var cartData = {};
									cartData = friscoStorage.getShallow('cartData');
									$.each(cartData.entries, function(index) {
										productList[this.product_id] = this.amount;
									});
								} else {
									productList[product_id] = 1;
								};
								
								api.createUserShoppingList(session.user_id, name, productList, function(list) {
									if (_gaq && _gaq.push) {
										if(container.closest(".productShelf").length){
											_gaq.push(['_trackEvent','Lista-produktow','Lista-zakupow','Dodano']);
										} else if(container.closest(".productSlider").length) {
											_gaq.push(['_trackEvent','Karta-produktu-toplayer','Lista-zakupow','Dodano']);
										} else if(container.closest(".cartSlider").length) {
											_gaq.push(['_trackEvent','Pasek-boczny','Koszyk','Utworz-liste']);
										} else if(container.closest(".fullCart").length) {
											_gaq.push(['_trackEvent','Checkout','Koszyk','Utworz-liste']);
										}
									}
									container.find('.newList').hide();
									container.find('.done').show();
									
									setTimeout(function() {
										container.removeClass("active");
									}, 2000);
								});
								return false;
							});
							
							if (lists.length == 0) {
								container.find('.newList').show();
								return;
							}
							
							if (addAllFromCart) {
								container.find('.newList').show();
							} else {
								container.find('.chooseList').show();
								container.find('.chooseList ul').html("");
								container.find('.chooseList .addNewList a').click(function(event) {
									event.stopImmediatePropagation();
									container.find('.chooseList').hide();
									container.find('.newList').show();
									return false;
								});
							}
							
							container.find('.newList .cancelButton').click(function(event){
								event.stopImmediatePropagation();
								if(addAllFromCart) { 
									$('.addToList > div.content.active').removeClass("active");
								}else {
									container.find('.chooseList').show();
									container.find('.newList').hide();
								}
								return false;
							});
							
							$.each(lists, function (index, list) {
								container.find('.chooseList ul').append('<li><a data-shopping_list_id="' + list.shopping_list_id +'" href="#">' +  __$(list.name) + '</a></li>');
							});
							
							container.find('.chooseList ul a').click(function(event) {
								event.stopImmediatePropagation();
								container.find('.chooseList').hide();
								api.addProduct2ShoppingList(session.user_id, $(this).data('shopping_list_id'), product_id, 1, function(){
									if (_gaq && _gaq.push) {
										if(container.closest(".productShelf").length){
											_gaq.push(['_trackEvent','Lista-produktow','Lista-zakupow','Dodano']);
										} else if(container.closest(".productSlider").length) {
											_gaq.push(['_trackEvent','Karta-produktu-toplayer','Lista-zakupow','Dodano']);
										}
									}
									
									container.find('.newList').hide();
									container.find('.done').show();
									
									setTimeout(function() {
										container.removeClass("active");
									}, 2000);
								});
								return false;
							});
						});
						return false;
					}
					return false; 
				});
				
				$('ul.products li > div').live("mouseleave", function(event) {
					event.stopImmediatePropagation();
					$('.addToList > div.content.active').removeClass("active");
				});
				$('.addToList a.button').live("click", function(){
					$('.addToList > div.content.active').removeClass("active");
				});
				
				$(document).click(function(){
					$('.addToList > div.content.active').removeClass("active");
				});
			}
		},
		
		showStateLoadingPanel : function() {
			if (!core.onlineCheck()) {
				return false;
			}
			
			Loader.load(Loader.TYPE.COVER, "div#page_content", "zaczekaj chwilę...");
// 			$("#page_content").addClass("opacity");
// 			$("#page_content_loader").show();
			return true;
		},
		hideStateLoadingPanel : function() {
			Loader.hide();
// 			$("#page_content").removeClass("opacity");
// 			$("#page_content_loader").hide();
			return true;
		},
		
		renderProductsInCart : function() {
// 			try {
// 				var cartData = friscoStorage.getShallow('cartData');
// 				if (cartData == undefined || cartData == null) {
// 					console.log('No cart data;!');
// 					return;
// 				}
// 
// 				$('.subtotal p.price:not(.protected)').html(friscoHelpers.parsePrice(cartData.human_price_gross));
// 				$('.subtotal span.amount').html(cartData.entries.length);
// 				bindDeliveryMinimalPrice();
// 
// 				var cartById = friscoStorage.getShallow('cartById');
// 				
// 				$(".productId[product_id]").each(function() {
// 					var id = +$(this).attr('product_id');
// 					var amount = cartById[id];
// 					$(this).toggleClass('active', amount > 0);
// 					if (amount) {
// 						$(this).find(".amountCart span.amount").html(amount);
// 					}
// 				});
// 			} catch(e) {
// 				console.error('Error rendering product in cart', e);
// 			}
		},
		
		checkDontForget : function() {
			if (dontForgetTreshold === null)
				return;
			var check = function(cartData) {
				if (!cartData || !cartData.entries)
					return;
				var current = Object.keys(cartData.entries).length;
				DBG('DONTFORGET', "Checking products count treshold:", current, "of", dontForgetTreshold);
				if (current >= dontForgetTreshold) {
// 					dontForgetTreshold = null; // Don't call check function in future.
					
					// Perform the test below every 5 cart manipulations
					if (dontForgetCounter == 0) {
						// Now test if there are at least 5 products to show
						var remove = $.map(cartData.entries, function (item) { return item.product.product_id; });
						FabloConfig.showRecentlyPurchased(loggedUserId, $(), 10, remove, undefined, 5, function(res){
							DBG('DONTFORGET', "Received", res.length, "of 5 required to show button.");
							$(".user-box .dont-forget").toggle(res.length >= 5);
						});
					}
					dontForgetCounter = (dontForgetCounter + 1) % 5;
				}
				else {
					$(".user-box .dont-forget").hide();
					dontForgetCounter = 0;
				}
			}
			var params = {};
			params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = check;
			friscoStorage.get('cartData', params);
		},

		recheckUserReservations : function() {
			lastRecheckUserReservationTimeout = null;
			if (session.user_id) {
				var deliveryDate = friscoStorage.getShallow('deliveryDate');
				var reservation = apiReservations.getActiveUserReservation(session.user_id, null, true);

				if (lastRecheckUserReservationTimeout) {
					clearTimeout(lastRecheckUserReservationTimeout);
				}

				lastRecheckUserReservationTimeout = setTimeout(function() { frisco.recheckUserReservations(); }, 25*60000 );

				if (reservation && reservation.reservation_id) {
					var dt = new Date() - lastStateChangeDate;
					if (!lastStateChangeDate || lastStateChangeDate && (dt/1000 < 30*60000)) {
						if (new Date().getTime() - reservation.window_id*1000 > 45*60*1000) {
							// reservation is too old to prolong
							apiReservations.deleteReservation(session.user_id, reservation.reservation_id, function(r) {
								
							});
						} else {
							apiReservations.prolongReservation(session.user_id, reservation.reservation_id, function(r) {
								if (!r) {
									friscoStorage.setShallow('deliveryDate', null);
									friscoEvents.fire('frisco_delivery_date_recheck', friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, null);
									friscoEvents.fire('frisco_delivery_date_recheck', friscoEvents.FEV_RESERVED_DELIVERY_DATE_EXPIRED, null);
									Popup.loadMessage({ messageId: Popup.MESSAGES.RSV_EXPIRED });
								} else {
									friscoEvents.fire('frisco_delivery_date_recheck', friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, r );
								}
							});
						}
					}
					return;
				}

				if (deliveryDate && !(reservation && reservation.reservation_id)) {
					friscoStorage.setShallow('deliveryDate', null);
					friscoEvents.fire('frisco_delivery_date_recheck', friscoEvents.FEV_RESERVED_DELIVERY_DATE_CHANGED, null);
					friscoEvents.fire('frisco_delivery_date_recheck', friscoEvents.FEV_RESERVED_DELIVERY_DATE_EXPIRED, null);
					Popup.loadMessage({ messageId: Popup.MESSAGES.RSV_EXPIRED });
				}
			}
		},

		getBalance : function() {
			if (session.user_id) {
				api.getUserBalance(session.user_id, function(balance) {
					if (balance) {
						$("#header .userPanel li.balanceTag").html(__('Twoje saldo') + ': <strong class="' + (balance.human_value == 0 ? '">' + '0' + " "  + __('zł') : (balance.human_value > 0 ? 'green'  + '">' + balance.human_value + " " + __('zł') + " (" +  __('do zwrotu') +")" : 'red'  + '">' + balance.human_value.substr(1) + " " + __('zł') + " (" +  __('do zapłaty') + ")" ) + '</strong>'));
						checkoutUpdateTotalValue();
			
						if (balance.human_value == 0) {
							$(".cart.details li.balance").html('');
							return false;
						} else {
							$(".cart.details li.balance").html(__('Twoje saldo') + ': <span class="' + (balance.human_value > 0 ? 'green'  + '">' + balance.human_value + " " + __('zł') + " </span><em>(" +  __('do zwrotu') +")</em>" : 'red'  + '">' + friscoHelpers.priceFormat(balance.value*(-1)) + " " + __('zł') + " </span><em>(" +  __('do zapłaty') + ")</em>" ));
						}	
					} // if (balance) 
				});
			}
		},

		cookiesInfo: function() {
			if(!$.cookie('cookieInfoDisplayed')) {
				$.cookie('cookieInfoDisplayed', 'yes', {path : '/', expires: 762});
				$("#cookie-info-bar").show();
				$("#cookie-info-bar .close, #cookie-info-bar a").click(function() {
					$("#cookie-info-bar").hide();
				});
			}
		},
		
        setViewPort: function(content, viewportmeta) {
            viewportmeta = viewportmeta || document.querySelector('meta[name="viewport"]');
            if (viewportmeta) {
                viewportmeta.content = content;;
//                 document.body.addEventListener('gesturestart', function () {
//                     viewportmeta.content = 'width=device-width, minimum-scale=0.25, maximum-scale=1.6';
//                 }, false);
            } else {
                var m = document.createElement('meta');
                m.name = "viewport";
                m.content = content;
                $("head").append($(m));
            }
        },

		viewportMetaFix : function() {
			// iPad + chrome scale fix
			var viewportmeta = document.querySelector('meta[name="viewport"]');
			if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) {
				if (viewportmeta) viewportmeta.remove();
			} else {
				frisco.setViewPort('width=device-width, minimum-scale=0.25, maximum-scale=5.0, user-scalable=yes', viewportmeta);
			}
		},

		hideGUI : function(width) {
			$("body").addClass("mobile");
			$("#wrapper").hide();
			$("#ribbons").hide();
			if (typeof width !== "undefined")
				frisco.setViewPort('width=' + width);
		},
		
		initGUI : function() {
			frisco.viewportMetaFix();
			$("body").removeClass("mobile");
			$("#wrapper").show();
			$("#ribbons").show();
			frisco.lightBoxForFirstimers();
			frisco.cookiesInfo();
			
			// moved from core.js - caused problems there
			fix4iOSscaleBug();
			bindBrowserCheck();
		},
		
		stickyHeader : function(update) {
			headerStartY = $("#header-bar").offset().top - ($(".semi-widget-main-margin").height() || 0);
			if (!update) {
				var updatePos = function() {
					var posTop = Math.max($('html').scrollTop(), $('body').scrollTop());
					$("#header").toggleClass("sticky", posTop > headerStartY);
				}
				$(window).scroll(updatePos);
				updatePos();
			}
		},

		bindFooterForm: function() {
			bind_email({container: "#footer", src: "newsletter_stopka_2015", customThxPage: true, callback: function(ok){
				if (!ok) return;
				var container = $("#footer:visible .newsletter");
				container.find("form, .remarks").fadeOut(500, function(){
					container.find(".thx").fadeIn(500);
				});
			}});
		},

		initialize : function () {
			if (window.location.pathname.match('/taniej-niz-myslisz')) window.location.pathname = '/stn,taniej-niz-myslisz';
			
			// temporary fix to prevent cyclical window reload when session var contains userId,
			// but server returns 401 on any req containing that id in header, HP products happen to trigger that
			if (window.location.pathname.match('/info_loggedOut')) {
				session.id = "";
				session.user_id = "";
				loggedUserId = null;
				$("#page_content div.loggedUserPanel").hide();
			}
			
			// don't actually load application when called from within Google cache
			if (window.location.host.match(/webcache.google/))
				return;
			
			// init core
			core.initialize();
			
			// touch events detection
			if ('ontouchend' in document) {
				document.body.className += " touchable";
// 				if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPhone/i))
			}
			
			// get used lang
			core.updateLang();
			frisco.loadNavigation();
			
			// we load external templates
			loadTemplates();
			
			var state = core.getCurrentState();
			var isAndroid = navigator.userAgent.match(/Android/i);
			var isIOS = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i);
			if (state == 'mobile-kupon' || state == 'rok-zakupow-promo'); // Special mobile states without gui
			else if (!$.cookie("mobileLP") && (isAndroid || isIOS)) {
				if (!state)
					mobileLP(null, null, {'os' : isAndroid?'android':(isIOS?'ios':undefined)});
				else {
					frisco.initGUI();
					var link = isAndroid ? "https://play.google.com/store/apps/details?id=pl.frisco.app" : "https://itunes.apple.com/pl/app/id628473425?mt=8";
					Ribbon.load({'switch':"on", container: "mobile-info", position: "up", color: "blue", html: 'Sprawdź naszą aplikację mobilną. <a href="'+link+'" target="_blank">Kliknij i pobierz</a>' });
				}
			}
			else {
				frisco.initGUI();
			}
			
			if (location.href.match('promo=true') && !loggedUserId) {
				tdLandingPage('','',{check: location.href.match('check=1')});
			}
			
			// ugly hack to detect if we need to update Rum info
			if (loggedUserId && $.cookie('sendRumLogin') != undefined) {
				Rum.rumEvent(Rum.LOGIN_EVENT, null, loggedUserId);
				$.removeCookie('sendRumLogin');
			}
			
			if (loggedUserId)
			cms.nye_popup(function(config){
				if (!config) return;
				var action = showPopupNYE;
				if (config.place == "everywhere") {
					Bounce.setAction(action);
					Bounce.enable();
					setTimeout(function(){
						Bounce.disable();
						if (core.getCurrentState() == 'checkout')
							return;
						if (core.getCurrentState() != 'product')
							action();
						else {
							friscoEvents.hook('gift_popup', friscoEvents.FEV_STATE_CHANGED, action, {type: friscoEvents.FEV_TYPE_ONETIME});
						}
					}, 15000);
				}
				else if (config.place == "checkout") {
					$("#cartCheckoutButton").one("click", function(event){
						var fail = action(function(){
							$("#cancelGiftPopup, #cboxClose").one("click", function(){
								$("#cartCheckoutButton").triggerHandler("click"); // Continue to checkout
							});
						});
						if (!fail)
							event.stopImmediatePropagation();
					});
					// Be sure to call this handler first.
					var currentBindings = $("#cartCheckoutButton").data('events')["click"];
					if ($.isArray(currentBindings)) {
						currentBindings.unshift(currentBindings.pop());
					}
				}
			});
			
			if ($.cookie('fc') == null && !loggedUserId) {
				cms.bounce_config(function(config) {
					if (!config.enabled) {
						Bounce.disable();
						return;
					}
					Bounce.setCondition(function(){
						return !$("#cboxContent #bon20").length;
					});
					Bounce.setAction(tdBounceLandingPage);
					Bounce.count(config.delay);
				});
			}

			if (core.getCurrentState() != 'tdRedirect')
				$.cookie('fc', 'no', { path : '/', expires: 762 });
			
			var curProfile = null;
			if (loggedUserId) {
				// Early things initialization 
				// reload user profile and othes things
// 				var params = {}; params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_SYNC;
				curProfile = friscoStorage.get('userProfile'); //, params);
// 				var curProfile = friscoStorage.getShallow('userProfile');
				friscoStorage.setShallow('checkoutAddressNo', curProfile.delivery_address_no);
				friscoStorage.setShallow('paymentMethod', curProfile.default_payment_method);
				
				var curLangId = friscoHelpers.lang2id(core.getCurrentLang());
				if (curLangId != curProfile.lang_id) {
					apiUsers.setUserLang(loggedUserId, core.getCurrentLang(), function(data) {
						if (data.success) {
							curProfile.lang_id = curLangId;
							friscoStorage.setShallow('userProfile', curProfile);
						}
					});
				}
			} // if (loggedUserId)
			
			FabloConfig.initFablo(api, cms, templates, loggedUserId, curProfile && curProfile.group_id || 0);
			
			// Show "dont forget" button if applicable
			if (loggedUserId) {
				api.getOrderList(loggedUserId, 0, 5, function(orders){
					if (orders.length == 0)
						return;
					var count = 0;
					$.each(orders, function(i, order) { count += order.itemsLinesCount});
					dontForgetTreshold = Math.ceil(count / orders.length * 0.8);
					frisco.checkDontForget();
					var events = [friscoEvents.FEV_CART_PRODUCT_DELETED, friscoEvents.FEV_CART_PRODUCT_ADDED, friscoEvents.FEV_CART_DATA_CHANGED, friscoEvents.FEV_CART_INVALIDATED];
					for (i in events)
						friscoEvents.hook('dontForget', events[i], frisco.checkDontForget);
				});
			}
			
			var voucher = (location.search.match(/voucherCode=([^&]+)(&|$)/) || [])[1];
			if (voucher && !Ribbon.get("voucher-info").length && core.getCurrentState() != 'wygraj-kurs')
				Ribbon.load({ container: "voucher-info", reusable: true, position: "up", color: "green", html: "Pamiętaj o kuponie! Wpisz kod <b>"+voucher+"</b> w koszyku podczas składania zamówienia" });
			
			var voucherData = location.search.match(/discountCode=([^&,]+),([^&,]+),([^&,]+)(?:,([^&,]+))?(&|$)/);
			if (voucherData && !Ribbon.get("voucher-info").length && !Ribbon.get("voucher-info-plus").length) {
				var content = '<div class="wrapper"><div class="code">'+voucherData[1]+'</div><div class="pln">'+voucherData[2]+'</div><div class="terms">'+(voucherData[4] ? 'na produkty z kategorii '+decodeURIComponent(voucherData[4])+' <br>' : '')+'przy łącznych zakupach od '+voucherData[3]+' zł</div></div>';
				Ribbon.load({ container: "voucher-info-plus", reusable: true, custom: true, switch: "on", position: "up", color: "green", html: content });
			}
			
			Ribbon.loadFromCms(cms);
			
			// Salesmanago
			_smid = "uumqam1503fjvfpp"; // has to be global as global sm.js refer straight to such var
			(function() {
				var sm = document.createElement('script');
				sm.type = 'text/javascript';
				sm.async = true;
				sm.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'www.salesmanago.pl/static/sm.js';
				var s = document.getElementsByTagName('script')[0];
				s.parentNode.insertBefore(sm, s);
				sm.onload = sm.onreadystatechange = function() {
					console.log("[DBG][init] salesmanago loaded");
					setTimeout(function() {
						if (loggedUserId && curProfile.salesManagoContactId && curProfile.salesManagoContactId != null) {
							_smclientid = curProfile.salesManagoContactId; // has to be global also
							createCookie('smclient', _smclientid, 365 * 10);
						}
						smEvent("load-page");
					}, 5000);
				};
				
				var smfb = document.createElement('script'); smfb.type = 'text/javascript'; smfb.async = true;
				smfb.onload = smfb.onreadystatechange = function() {smSocInit();smfb.onload = null; smfb.onreadystatechange = null;};
				smfb.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'www.salesmanago.pl/static/sm_fb.js';
				var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(smfb, s);
			})();

			// Rum - if possible initialize after Google Analytics
			if (_gaq) {
				_gaq.push(function() {
					Rum.initialize(loggedUserId);
				});
			} else {
				Rum.initialize(loggedUserId);
			}

			/* Password reminder after reset */
			var curState = core.getCurrentState();
			if ((loggedUserId) && (curState != 'settings')) {
				var curUserData = apiUsers.getUser(loggedUserId, null, null, true);
				if (curUserData.password_reset_reminder) {
					/* Redirect is our last hope */
					setTimeout(function() { window.location = '/stn,settings/sub,myAccount/forcePassword,1'; }, 500);
				}
			} // if (loggedUserId)
		
			/* Load minimal price */
			friscoEvents.hook('cartDeliveryPrice', friscoEvents.FEV_CART_DATA_CHANGED, function() { friscoStorage.getFresh('deliveryPrices'); } ); 
			friscoEvents.hook('orderMinimalValue', friscoEvents.FEV_ORDER_MINIMAL_VALUE_CHANGED, loadMinimalOrderValue); 
			friscoEvents.fire('orderMinimalValueInit', friscoEvents.FEV_ORDER_MINIMAL_VALUE_CHANGED, null);

			// safe binding
// 			bindLoginBoxValidation();
// 			bindResetPasswordBox();

			frisco.displayPostCode();

			try {
			// bind callbacks;
				bindRefreshingRoutines();
				bindAuthorizationGuard();
				bindStatusRequest();
				bindOnlineCheck();
				bindStatusRequestGuard();
				bindOrderEditionModeGuard();
			} catch(e) {
				console.log("Error occured", e);
			}

			// bind UserCard reserved delivery date
			if (loggedUserId) {
				friscoStorage.get('deliveryMethod');
				bindUserCardDeliveryDateGuard();
// 				var currentDeliveryDate = friscoStorage.getShallow('deliveryDate');
// 				if (!currentDeliveryDate) //{
// 					currentDeliveryDate = friscoStorage.getFresh('deliveryDate');
// 				} else {
// 					userCardDeliveryDateChanger(currentDeliveryDate);
// 				}
			}

			var params = {};
			params[friscoStorage.PARAM_FOLLOWER_CALLBACK] = renderCartContent;
			friscoStorage.getFresh('cartData', params);

			// get deliveryPrices, render on hooks
			friscoStorage.getFresh('deliveryPrices');

			// load windows, or do some method to get nearest window date @ventana
			var params = {}; params[friscoStorage.PARAM_TYPE] = friscoStorage.TYPE_ASYNC;
			friscoEvents.hook('nearestWindowGuard', friscoEvents.FEV_WINDOWS_DATA_CHANGED, nearestWindowGuard);
			friscoEvents.hook('nearestWindowLabelSetterSidebar', friscoEvents.FEV_NEAREST_DELIVERY_DATE_CHANGED, setNearestWindowLabel);
			friscoEvents.hook('nearestWindowLabelSetterMain', friscoEvents.FEV_NEAREST_DELIVERY_DATE_CHANGED, updateHomeDeliveryOrderBox);

			if (loggedUserId) {
				nearestWindowGuard();
// 				friscoStorage.get('windowsList', params);
			}

			// bind user card data
			bindUserCard();

			// all internal anchors will be handled by js core router
			$('a').live('click', function (event) {
				/* Ignore a's with ignore attribute */
				if ($(this).attr('ignore')) {
					return false;
				}
				
				/* Don't mess with a's with force attribute */
				if ($(this).attr('leave')) {
                    return true;
                }
		
				if (!$(this).attr('href')) {
					return;
				}

				if ($(this).attr('href').substr(0, 1) == "#") {
					return false;
				}

				if ($(this).attr('href').substr(0, 1) != "/") {
					return true;
				}

				event.stopPropagation();
				if (_gaq && _gaq.push) {
					_gaq.push(['_trackPageview', $(this).attr('href')]);
				}
				if (window.__insp && __insp.push) {
					_.delay(function(){
						__insp.push(["virtualPage", {url: $(this).attr('href')}]);
					}, 1000);
				}

				var title = "Supermarket online Frisco.pl";
				if(this.title) { title = this.title + " - " + title; }
				core.applyStateUrl(this.href, title);
				return false;
			});

			// just a dummy search handler
			var iTimeout = null;
			var sTimeout = null;

			// we load current state
			loadSidebarForLogged();

			$("ul.products li input.quantity").live("click", function(event) {
				return false;
			});

			core.loadInitialState();

			$('#authenticate').click(function() {
				//$('#origin').val(window.location);
				$('input[type=hidden][name=origin]').val(window.location)
				//$('#credentials').submit(); <- NO SUBMIT HERE! Submit is handled by jquery.validation (bindLoginBoxValidation), otherwise 2xPOST in IE would be send
			});

			$('#loginBox .login').click(function() {
				$('#loginBox .origin').val(window.location);
				//$('#loginBox').submit(); <- NO SUBMIT HERE! Submit is handled by jquery.validation (bindLoginBoxValidation), otherwise 2xPOST in IE would be send
			});

			$('.userPanel .settings a').click(function() {
				//$('.userPanel .username.userCard').hide();
				$("#rightNavigation").html("");
				return true;
			});

			$('#doLogout').click(function() {
				//$('#origin').val(window.location);
				$('input[type=hidden][name=origin]').val(window.location); // there are two ids=origin (dunno why)
				$('#logout').submit();
			});

			// Fill interface with logged user data if user is logged
			if (loggedUserId) {
				var updateUserData = function(data) {
					var visibleName = (data.name || data.surname) ? data.name + " " + data.surname : data.email.substring(0, data.email.indexOf('@'));
					$("a#username > strong").text(visibleName);
				};
				
				friscoStorage.get('userData', { followerCbk: updateUserData });
			}

			frisco.checkDevicePixelRatio();
			frisco.bindProductsList();
			frisco.bindProductsSwitch();
			frisco.showCartDetails();
			frisco.changeTermOfDelivery();
			frisco.bindLoginBox();
			frisco.showSettingsBox();
			frisco.bindAddToListBox();
			frisco.bindCartList();
			frisco.sortDropbox();
			frisco.contentHeader();
			frisco.bindProductTabs();
			frisco.loadOnScroll();
			bindLangSwitchers();
			
			// can't stay here, gets lost in prd though works fine on devel
// 			if (lang.getCurrentLang() == "pl") { frisco.datepickerLanguage(); }
			
			$("#reserveNearestDeliveryDate").click(reserveNearestDeliveryDate );

			/** handle invalid login attempt **/
			DBG('INITIALIZER', 'Checking login status', core.getParam('loginAttempt'));
			var activeLoginContainer = $("div.loginBox");
			if (!activeLoginContainer.length || !activeLoginContainer.is(":visible")) {
				activeLoginContainer = $("form#login-form");
			}
			switch(core.getParam('info_loginAttempt')) {
				case undefined:
				case null:
					break;
				case 'notAllowed':
					frisco.loginPopup();
					break;
				case 'failed':
				default:
					frisco.loginPopup();
					break;
			}

			switch(core.getParam('info_payment')) {
				case undefined:
				case null:
					break;
				case 'ok':
					break;
				case 'error':
				default:
					Popup.loadMessage({ messageId: Popup.MESSAGES.PAYMENT_ABORTED, timeout: Popup.TIMEOUT.NORMAL });
					break;
			}
/*
			if (core.getParam('info_loggedOut')) {
				Popup.loadMessage({ messageId: Popup.MESSAGES.SESSION_EXPIRED });
			}
*/
			if (core.getParam('info_lastLogin')) {
				var lastLogin = __(core.getParam('info_lastLogin'));
				$('.loginPanel form input[name=username]').val(lastLogin);
				$('.loginBox form input[name=username]').val(lastLogin);
			}

			if(!core.getParam('info_loginAttempt') && core.getParam('login_popup')) {
				frisco.loginPopup();
			}

			if(core.getParam('add_to_cart')) {
				var productToAdd = +core.getParam('add_to_cart');
				if(productToAdd) {
					frisco.addProductToCart(productToAdd, 1);
					Popup.load({content: __('Dodaliśmy produkt do koszyka'), size: Popup.SIZE.FLASH, type: Popup.TYPE.MESSAGE, timeout: Popup.TIMEOUT.NORMAL});
				}
			}

			if (_gaq && _gaq.push) {
				$("div#sidebar div.hintHolder").bind("mouseenter", function() {
					_gaq.push(['_trackEvent','Pasek-boczny','Bezplatna-dostawa']);
				});
			}

			$(".hintHolder .hintContent > a.savingPlans").bind("click", function() {
				var params = {};
				params['showOtherPrograms'] = true;
				loadDefaultState(null, params);
			});

			setInterval(function() {
				pub.getBalance();
			}, 60000 );

			pub.getBalance();

			$("a.clearCart").live('click', function(e) {
				var elemId = e.target.id;
				var callbacks = {
					"#popupYes" : function() {
						api.clearCart(function(result) {
							if (result) {
								// TODO/FIXME : rewrite this put to return full object upon cart clearing
								friscoStorage.setShallow('cart', {entries:[], version:0, itemsCount:0});
								friscoEvents.fire('cart', friscoEvents.FEV_CART_INVALIDATED, {});
								$(".productId.active div.amountCart span.amount").html("0");
								$("div#page_sidebar div.productId.active div.amountCart span.amount").html("0");
								$(".productId.active").removeClass("active");
								
								if (_gaq && _gaq.push) {
									if (elemId == "sidebarClearCart")
										_gaq.push(['_trackEvent','Pasek-boczny','Koszyk','Wyczysc']);
									else 
										_gaq.push(['_trackEvent','Checkout','Koszyk','Wyczysc']);
								}
								
								if (curProfile == null) 
									curProfile = friscoStorage.getShallow('userProfile');
								if (loggedUserId && curProfile.salesManagoContactId && curProfile.salesManagoContactId != null) {
									api.smReinitCart(loggedUserId, [], function(data){ 
										console.log("[renderCartContent] cleared cart for salesmanago"); 
									});
								}
							}
						});
						Popup.hide();
					},
					"#popupNo" : function() { 
						Popup.hide();
					},
				};
				Popup.loadMessage({ messageId: Popup.MESSAGES.CLEAR_CART, callbacks: callbacks });
			});
			
			// smooth scroll to top on state change
			friscoEvents.hook('scrollTop', friscoEvents.FEV_ON_STATE_ENTER, function(event) {
				if (event.eventData.backForward) // when user performed a back/forward action, don't scroll to page top.
					return;
				
				$("body").on("webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd", function() {
					$("body").css("transition", "none");
				});
				
				var wpos = $(window).scrollTop();
				var pos = 0;
				$("body").css({ "margin-top": (pos-wpos)+"px", "overflow-y": "scroll", }); // overflow-y is to fix the blink of the window width change 
				$(window).scrollTop(pos); 
				$("body").css("transition", "all 1s ease");
				$("body").css("margin-top", "0");
			});
			
			friscoEvents.hook('mainOrderStatusChangeHook', friscoEvents.FEV_ORDER_STATUS_CHANGED, function(event) {
				var data = event.eventData;
				var orderList = friscoStorage.get('orderList'); // this calls api.getOrderList on undefined || null
				
				if ( (undefined == orderList) ||(!data.orderId)||(!data.orderYear)||(!data.orderStatus) )  {
// 				orderList = api.getOrderList(loggedUserId, 0, 100, null, true);
// 				friscoStorage.set('orderList', orderList.reverse());
// 				} else {
					// soft update
					$.each(orderList, function(index) {
						var order = orderList[index];
						if (order.order_id == data.orderId && order.year == data.orderYear)
							orderList[index].status = data.orderStatus;
					});

					friscoStorage.set('orderList', orderList);
				} // if (undefined === orderList)
			}); // friscoEvents.hook('mainOrderStatusChangeHook', friscoEvents.FEV_ORDER_STATUS_CHANGED, function(event))

			if (_gaq && _gaq.push){
				$("a#catalogLoadMoreLink").live("click", function() {
					_gaq.push(['_trackEvent','Lista-produktow','Pokaz-wiecej']);
					return true;
				})
				$("div#contentHeader div.breadcrumbs a").live("click", function() {
					var depth = parseInt($(this).parent().attr("depth"));
					if(depth <= 2) {
						_gaq.push(['_trackEvent','Serwis','Nawigacja','Breadcrumbs',depth]);
					}
					return true;
				});
				$("#categoriesTree li > a").live("click", function() {
					var depth = parseInt($(this).parent().attr("depth"));
					if(depth <= 2) {
						_gaq.push(['_trackEvent','Serwis','Nawigacja','Pasek-boczny',depth]);
					}
					return true; 
				});
				$("#cartCheckoutButton").live("click", function() {
					_gaq.push(['_trackEvent','Pasek-boczny','Zamawiam','Pasek-boczny']);
					return true; 
				});
			}

			$('#cartCheckoutButton').click(function() {
				var cartData = friscoStorage.get('cartData');
				if (!cartData || !cartData.entries || cartData.entries.length == 0) {
					Popup.loadMessage({ messageId: Popup.MESSAGES.EMPTY_CART, timeout: Popup.TIMEOUT.NORMAL });
					return;
				}
				core.setState('checkout', null, {}, undefined, !loggedUserId); // !loggedUserId -> Special trackPageview event in loadCheckout
			});
			
			$('#orderEditCheckoutButton').click(function() {
				var cartData = friscoStorage.get('cartData');
				if (!cartData || !cartData.entries || cartData.entries.length == 0) {
					Popup.loadMessage({ messageId: Popup.MESSAGES.EMPTY_CART, timeout: Popup.TIMEOUT.NORMAL });
					return;
				}
				
				if (cartData.order_id  || cartData.order_year) 
					core.setState('order', core.getCurrentState(), {'orderId':cartData.order_id, 'year': cartData.order_year});
				else
					Popup.loadMessage({ messageId: Popup.MESSAGES.SAVE_CHECKOUT_LOAD_ERROR, timeout: Popup.TIMEOUT.NORMAL });
			});

			$("div.promotionLabel .other").live("mouseenter", function(event) {
				var container = $(this);
				if (container.data('product_id') != undefined) {
					var productId = container.data('product_id');
					var targetContainer = container.find("span.otherContainer");
					if (targetContainer.html().length > 0) {
						targetContainer.show();
						return;
					}

					api.getProduct(productId, function(product) {
						targetContainer.html("<img src='" + helpers.img_url(product.image_id, 50, 50) + "'/>" + product.visible_name + " " + product.human_grammage_gross);
						targetContainer.show();
					});
				} else if (container.data('product_ids') != undefined) {
					var productIds = container.data('product_ids').toString().split(',');
					var targetContainer = container.find("span.otherContainer");
					if (targetContainer.html().length > 0) {
						targetContainer.show();
						return;
					}

					api.getProducts(productIds, function(products) {
						var html = "";
						$.each(products, function(i,e) {
							html += "<div>" + "<img src='" + helpers.img_url(e.image_id, 50, 50) + "'/><b>" + e.full_name + " " + e.human_grammage_gross + "</b></div>";
						});
						targetContainer.html(html);
						targetContainer.show();
					});
				}
			});

			$("div.promotionLabel .other").live("mouseleave", function() {
				$(this).find("span.otherContainer").hide();
			});
			
			$(".products-slider .slide").live("click", function() {
				var win = $(this).siblings(".products-window");
				var products = win.find(".products");
				var productSize = products.find("li.productId:visible").outerWidth(true);
				var moveSize = Math.floor(win.width() / productSize) * productSize;
				var repeatOffset = products.find(".repeated").eq(0).position().left;
				var curPos = typeof(products.data('left')) === 'undefined' ? products.position().left : products.data('left');
				var newPos = curPos + ($(this).hasClass("next") ? -1 : 1) * moveSize;
				var realWidth = _.reduce(products.find("li.productId:visible"), function(a,b){return a+$(b).outerWidth(true)}, 0)
				if (newPos > 0) {
					newPos -= repeatOffset;
					products.css('left', curPos - repeatOffset);
				}
				if (newPos <= 0) {
					products.data('left', newPos);
					products.stop().animate({left: newPos}, 600, 'swing', function(){
						if (newPos + repeatOffset <= 0) {
							newPos += repeatOffset;
							products.css('left', newPos).data('left', newPos);
						}
					});
				}
				return false;
			});
			
			pub.stickyHeader();

			// OCTOBERcontest
			if (octoberContestActive())
			cms.octoberContest(function(products){
				october_promo_products = _.pluck(_.flatten(products), 'id');
				// Add badge to products loaded before the data was gathered from cms
				setTimeout(function(){
					$.each(october_promo_products, function(i, id){
						$('.productId[product_id="' + id + '"], #contentSection[product_id="' + id + '"]').not('.octoberContest').addClass('octoberContest');
					});
				}, 0);
			});
			
			// coca-cola-konkurs
			cms.cola_contest(function(products){
				if (!products) return;
				october_promo_products = products;
				// Add badge to products loaded before the data was gathered from cms
				setTimeout(function(){
					$.each(october_promo_products, function(i, id){
						$('.productId[product_id="' + id + '"], #contentSection[product_id="' + id + '"]').not('.octoberContest').addClass('octoberContest');
					});
				}, 0);
			});
		}
	};

	/*
	* set routing rules.
	* better place then class constructor.
	*/
	$(function() {
		core.setupRouting({
			/* disabled shops && LPs */
// 			'redbullLandingPage'       : redbullLandingPage,
// 			'wedelLandingPage'         : wedelLandingPage,
// 			'bacardiMartiniLP'         : bacardiMartiniLP,

			'christmasBaskets'         : loadDisabledLandingPage, //christmasBaskets,
			'christmasLandingPage'     : loadDisabledLandingPage, //christmasLandingPage,
			'wielkanoc'                : loadDisabledLandingPage, //wielkanocLandingPage,
			'wiosna'                   : loadDisabledLandingPage,
			'henkel'                   : loadDisabledLandingPage, //henkelLandingPage,
			'lindt'                    : loadDisabledLandingPage,  //lindtLandingPage,
			'piknik'                   : loadDisabledLandingPage, //piknikLandingPage,
			'granteLP'                 : loadDisabledLandingPage, //granteLandingPage,
			'arielLP'                  : loadDisabledLandingPage, //arielLandingPage,
			'vizirLP'                  : loadDisabledLandingPage,
			'pampers_bcLP'             : loadDisabledLandingPage, //pampersBCLandingPage,
			'mikolajki13'              : loadDisabledLandingPage, //mikolajki13LandingPage
			'pqsLP'                    : loadDisabledLandingPage, //pqsLandingPage,
			
			/* active states */
			"defaultState"       : loadDefaultState,
			"searchResults"      : loadSearchResults,
			"checkout"           : loadCheckout,
			"cart"               : loadCart,
			"register"           : loadRegister,
			"resetPassword"      : loadPasswordReset,
			"settings"           : loadSettings,
			"lists"              : loadShoppingList,
			"showList"           : loadShowShoppingList,
			"about"              : loadAbout,
			"regulation"         : loadRegulation,
			"nutriciaRegulation" : loadNutriciaRegulation,
			"privacy"            : loadPrivacy,
			"work"               : loadWork,
			"savingPrograms"     : loadSavingPrograms,
			"aboutFrisco"        : loadAboutFrisco,
			"firstShopping"      : loadFirstShopping,
			"security"           : loadSecurity,
			"order"              : loadOrder,
			"viewOrder"          : loadViewOrder,
			"iList"              : loadUserIlist,
			"checkoutFinal"      : loadCheckoutFinal,
			"paymentFinal"       : loadPaymentFinal,
			"orderCart"          : loadOrderCart,
			"payment"            : loadPayment,
			"error404"           : loadError404,
			'product'            : loadProduct,
			'featuredProducts'   : featuredProducts,
// 			'wybierzPrezent'     : registerPromoGift,
// 			'dlaCiebie'          : registerPromoGift,
			'promo-lp'           : tdNewLandingPage,
			'promo-lp-v2'        : tdNew2LandingPage,
			'tdLandingPage'      : tdLandingPage,
			'tdFBLandingPage'    : tdFBLandingPage,
			'mobile-kupon'       : tdMobileLandingPage,
			'paypal'             : tdPaypalLandingPage,
			'rok-zakupow-promo'  : yearOfShoppingPromoRedirect,
			'rok-zakupow'        : yearOfShoppingPromo,
			'promo-lp-ab0'       : tdLandingPage,
			'promo-lp-ab1'       : tdNewLandingPage,
			'promo-lp-ab2'       : tdNew2LandingPage,
			'odbierz-bon-w1'     : tdABLandingPage,
			'odbierz-bon-w2'     : tdABLandingPage,
			'odbierz-bon-w3'     : tdABLandingPage,
			'odbierz-bon-o1'     : tdABLandingPage,
			'odbierz-bon-o2'     : tdABLandingPage,
			'odbierz-bon-o3'     : tdABLandingPage,
			'odbierz-bon-w4'     : tdAB2LandingPage,
			'odbierz-bon-w5'     : tdAB2LandingPage,
			'odbierz-bon-w6'     : tdAB2LandingPage,
			'odbierz-bon-o4'     : tdAB2LandingPage,
			'odbierz-bon-o5'     : tdAB2LandingPage,
			'odbierz-bon-o6'     : tdAB2LandingPage,
			'specjalna-oferta-dla-firm' : tdB2BLandingPage,
			'odbierz-kupon-50'   : tdKupon50LandingPage,
			'partner'            : tdPartnerPage,
			'feature'            : loadFeaturePage,
			'tdActivation'       : tdActivation,
			'tdRedirect'         : tdRedirect,
			'smRedirect'         : smRedirect,
			'mobileLP'           : mobileLP,
			'mobile'             : mobileApp,
			'afterSalesSurvey'   : afterSalesSurvey,
			'mailerUnsubscribe'  : mailerUnsubscribe,
			'mailerResubscribe'  : mailerResubscribe,
			'subscribenewsletter': mailerResubscribeForm,
			'subscribenewsletter-kupon': mailerResubscribeForm,
			'marki'              : allBrandsPage,
			'pomoc'              : helpForumPage,
			'wygraj-wakacje-promo'     : juneContestPromo,
			'wygraj-wakacje'           : juneContestResults,
			'frisco-jest-wszedzie'     : juneContestInfo,
			'wygraj-kurs-promo'        : octoberContestPromo,
			'wygraj-kurs'              : octoberContestPage,
			'wygraj-kurs-wyniki'       : octoberContestResults,
			'zobacz-opinie-o-frisco-pl': loadTestimonials,
			'pampersLandingPage'       : pampersLandingPage,
			'gazetka'                  : oldPromopaperLandingPage,
			'gazetka-promocyjna'       : promopaperLandingPage,
			'promocje'                 : loadPromotionsPage,
			'nowosci'                  : loadNewestPage,
			'taniej-niz-myslisz'       : bestpriceLandingPage,
			'dla-ciebie'               : recommendedProductsPage,
			'metroLP'                  : metroLandingPage,
			'wina_mkLP'                : loadLandingPage, //winaMKLandingPage,
			'informacje-prasowe'       : loadPressInfoPage,
			'media-o-frisco'           : loadPressHeadingsPage,
			'akcja-olimpijska'         : pgAoLandingPage,
			'dzien-kobiet'             : loadLandingPage,
			'puchar-swiata'            : loadLandingPage,
			'slodki-tydzien'           : loadLandingPage,
			'develey'                  : loadLandingPage,
			'pantene'                  : loadLandingPage,
			'mundial'                  : loadLandingPage,
			'danone'                   : loadLandingPage,
			'coca-cola-konkurs'        : loadLandingPage,
			'nutricia'                 : loadLandingPage,
			'promocja'                 : loadLandingPage,
			'melt-water'               : loadMeltWaterPage,
// 			'przetestuj-frisco-mobile' : friscoMobileLandingPage,
			'zamow-najwyzsza-jakosc'   : zamowNajwyzszaJakoscLandingPage,
			'odbierz-swoj-prezent'     : giftLandingPage,
			'giftActivation'           : giftActivationPage,
			'praktyczna-pani-domu'     : ppdPage,
			'praktyczna-pani-domu-lp'  : ppdLandingPage,
			'ppd-lp-out'               : ppdLandingPageOptOut,
			'pyszne-przepisy'          : recipesPage,
			'swiateczne-przepisy'      : xmasRecipesPage,
			'criteoLandingPage'        : loadCriteoLandingPage,
			'partner-site'             : loadPartnerSite,
			'wszystko-do-koszyka'      : loadPartnerSite,
			'pizza'                    : loadLandingPage,
			'domowe-wypieki'           : loadLandingPage,
			'kuchnia-azjatycka'        : loadLandingPage,
			'wiosenne-porzadki'        : loadLandingPage,
			'produkty-bio'             : loadLandingPage,
			'wielkanoc'                : loadLandingPage,
			'grill'                    : loadLandingPage,
			'nowalijki'                : loadLandingPage,
			'slodkosci'                : loadLandingPage,
			'diety'                    : loadLandingPage,
			'woda'                     : loadLandingPage,
			'lody'                     : loadLandingPage,
			'owoce-morza'              : loadLandingPage,
			'drugie-sniadanie'         : loadLandingPage,
			'dania-na-szybko'          : loadLandingPage,
			'kuchnia-meksyku'          : loadLandingPage,
			'sosy'                     : loadLandingPage,
			'jesienne-inspiracje'      : loadLandingPage,
			'kawa-czy-herbata'         : loadLandingPage,
			'ryby'                     : loadLandingPage,
			'zestawyPG'                : loadLandingPage,
			'swieta'                   : loadLandingPage,
			'sylwester'                : loadLandingPage,
			'superprezent'             : loadLandingPage,
			'zima'                     : loadLandingPage,
			'dzienbabci'               : loadLandingPage,
			'sniadanie'                : loadLandingPage,
			'paczki'                   : loadLandingPage,
			'akcesoria-kuchenne'       : loadLandingPage,
			'pomysl-na-smaczne-danie'  : loadLandingPage,
			'walentynki'               : loadLandingPage,
			'przekaski-na-ostatki'     : loadLandingPage,
			'kuchnia-francuska'        : loadLandingPage,
			'przepis-na-chleb'         : loadLandingPage,
			'jak-posprzatac-mieszkanie': loadLandingPage,
			'przepisy-na-wielkanoc'    : loadLandingPage,
			'alkohol'                  : loadCategoryPage,
			'kuchnie-swiata'           : loadCategoryPage,
			'napoje'                   : loadCategoryPage,
			'spozywcze'                : loadCategoryPage,
			'domowe'                   : loadCategoryPage,
			'dziecko'                  : loadCategoryPage,
			'mrozonki'                 : loadCategoryPage,
			'piekarnia'                : loadCategoryPage,
			'swieze'                   : loadCategoryPage,
			'organic'                  : loadCategoryPage,
			'toaletowe'                : loadCategoryPage,
			'zdrowie-i-uroda'          : loadCategoryPage,
			'zwierzeta'                : loadCategoryPage,
			'piekarnia-putka'          : loadBrandShopPage,
			'wierzejki'                : loadBrandShopPage,
			'sklep-blikle'             : loadBrandShopPage,
			'polec-nas'                : recommendUsPage,
			'kubus'                    : loadKubusPage,
			'dolce-gusto'              : loadDolceGusto,
			'nie-zapomnij'             : dontForgetPage,
			'kody-rabatowe'            : loadCodesPage,
			'abcgotowania'             : loadCookingABCPage,
			'przepis1'                 : loadHerbsRecipes,
			'przepis2'                 : loadHerbsRecipes,
			'zielnik'                  : loadHerbsProductsPage,
			'ziola-all'                : loadHerbsProductsPage,
			'mieta'                    : loadHerbsProductsPage,
			'kielki'                   : loadHerbsProductsPage,
			'trawa'                    : loadHerbsProductsPage,
			'oliwa'                    : loadHerbsProductsPage,
			'akcja-ziola'              : routeAction('ziola'),
			'akcja-diety'              : routeAction('diety'),
			'akcja-sniadanie'          : routeAction('sniadanie'),
			'akcja-wege'               : routeAction('wege'),
			'magazynfrisco'            : loadFridgeCMSPage,
			'przepisy-kulinarne'       : loadFridgeSlugCMSPage,
			'dziendziecka'             : genericTabLanding,
			'potrawy-na-grilla'        : genericTabLanding,
			'inspiracje-kulinarne'     : recipesCollectivePage,
			'zamow-kosz-swiateczny'    : zamowKoszSwiatecznyPage,
			'odstapienie-od-umowy'     : orderCancelInfo,
		});
		core.setupReleasing({
		});
		core.setupLoadingCallback(function() {
			friscoEvents.clear(friscoEvents.FEV_LOAD_MORE);
			lastStateChangeDate = new Date();
			if ( session.user_id && lastRecheckUserReservationTimeout == null ) {
				frisco.recheckUserReservations();
			}
			$("body").removeClass("feature notfixed homepage order-edit-or-checkout recommend-us");
			$("head > link[rel=canonical]").remove();
			Loader.hide();
			lpBannerDisplayed = false;
			
			// Google Tag Manager for SALESMORE
			tagEventSentInThisState = false;
		});
        
		core.setupPostLoadingCallback(function(currentState) {
			if (!lpBannerDisplayed)
				cms.lp_banners(function(banners){
					$.each(banners, function(i, banner) {
						var partialy_encoded_in_cms = null;
						try { partialy_encoded_in_cms = encodeURI(decodeURI(i)); } catch (e) {};
						if (location.pathname == i || location.pathname == partialy_encoded_in_cms) {
							frisco.handleLpBannerCustom(banner.img, banner.size, currentState);
							return false;
						}
					});
					if (!lpBannerDisplayed)
						frisco.handleLpBannerCustom(null);
				});
		});

		// Google Tag Manager for SALESMORE
		var sendDefaultGTMEvent = function() {
			if (!tagEventSentInThisState) {
				sendGTMEvent({'event': 'info'});
			}
		}
		// hook and check - after state was loaded - whether some event was sent. If not, send a default one.
		friscoEvents.hook('gtm', friscoEvents.FEV_STATE_CHANGED, sendDefaultGTMEvent);

		var jqoteSub = $.jqote.sub;
	});
	
	/*
	* fire initialize onload
	*/
	$(pub.initialize);
	return pub;
};

var frisco = Frisco();

// OCTOBERcontest
var october_promo_products = [];

